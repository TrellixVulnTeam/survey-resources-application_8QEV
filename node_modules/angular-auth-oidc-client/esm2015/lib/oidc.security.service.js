import { Injectable } from '@angular/core';
import { AuthStateService } from './authState/auth-state.service';
import { CallbackService } from './callback/callback.service';
import { RefreshSessionService } from './callback/refresh-session.service';
import { CheckAuthService } from './check-auth.service';
import { ConfigurationProvider } from './config/config.provider';
import { FlowsDataService } from './flows/flows-data.service';
import { CheckSessionService } from './iframe/check-session.service';
import { LoginService } from './login/login.service';
import { LogoffRevocationService } from './logoffRevoke/logoff-revocation.service';
import { StoragePersistanceService } from './storage/storage-persistance.service';
import { UserService } from './userData/user-service';
import { TokenHelperService } from './utils/tokenHelper/oidc-token-helper.service';
export class OidcSecurityService {
    constructor(checkSessionService, checkAuthService, userService, tokenHelperService, configurationProvider, authStateService, flowsDataService, callbackService, logoffRevocationService, loginService, storagePersistanceService, refreshSessionService) {
        this.checkSessionService = checkSessionService;
        this.checkAuthService = checkAuthService;
        this.userService = userService;
        this.tokenHelperService = tokenHelperService;
        this.configurationProvider = configurationProvider;
        this.authStateService = authStateService;
        this.flowsDataService = flowsDataService;
        this.callbackService = callbackService;
        this.logoffRevocationService = logoffRevocationService;
        this.loginService = loginService;
        this.storagePersistanceService = storagePersistanceService;
        this.refreshSessionService = refreshSessionService;
    }
    get configuration() {
        const openIDConfiguration = this.configurationProvider.getOpenIDConfiguration();
        return {
            configuration: openIDConfiguration,
            wellknown: this.storagePersistanceService.read('authWellKnownEndPoints'),
        };
    }
    get userData$() {
        return this.userService.userData$;
    }
    get isAuthenticated$() {
        return this.authStateService.authorized$;
    }
    get checkSessionChanged$() {
        return this.checkSessionService.checkSessionChanged$;
    }
    get stsCallback$() {
        return this.callbackService.stsCallback$;
    }
    checkAuth(url) {
        return this.checkAuthService.checkAuth(url);
    }
    checkAuthIncludingServer() {
        return this.checkAuthService.checkAuthIncludingServer();
    }
    getToken() {
        return this.authStateService.getAccessToken();
    }
    getIdToken() {
        return this.authStateService.getIdToken();
    }
    getRefreshToken() {
        return this.authStateService.getRefreshToken();
    }
    getPayloadFromIdToken(encode = false) {
        const token = this.getIdToken();
        return this.tokenHelperService.getPayloadFromToken(token, encode);
    }
    setState(state) {
        this.flowsDataService.setAuthStateControl(state);
    }
    getState() {
        return this.flowsDataService.getAuthStateControl();
    }
    // Code Flow with PCKE or Implicit Flow
    authorize(authOptions) {
        if (authOptions === null || authOptions === void 0 ? void 0 : authOptions.customParams) {
            this.storagePersistanceService.write('storageCustomRequestParams', authOptions.customParams);
        }
        this.loginService.login(authOptions);
    }
    authorizeWithPopUp(authOptions) {
        if (authOptions === null || authOptions === void 0 ? void 0 : authOptions.customParams) {
            this.storagePersistanceService.write('storageCustomRequestParams', authOptions.customParams);
        }
        return this.loginService.loginWithPopUp(authOptions);
    }
    forceRefreshSession(customParams) {
        if (customParams) {
            this.storagePersistanceService.write('storageCustomRequestParams', customParams);
        }
        return this.refreshSessionService.forceRefreshSession(customParams);
    }
    // The refresh token and and the access token are revoked on the server. If the refresh token does not exist
    // only the access token is revoked. Then the logout run.
    logoffAndRevokeTokens(urlHandler) {
        return this.logoffRevocationService.logoffAndRevokeTokens(urlHandler);
    }
    // Logs out on the server and the local client.
    // If the server state has changed, checksession, then only a local logout.
    logoff(urlHandler) {
        return this.logoffRevocationService.logoff(urlHandler);
    }
    logoffLocal() {
        return this.logoffRevocationService.logoffLocal();
    }
    // https://tools.ietf.org/html/rfc7009
    // revokes an access token on the STS. This is only required in the code flow with refresh tokens.
    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.
    // This makes it possible to manage your own tokens.
    revokeAccessToken(accessToken) {
        return this.logoffRevocationService.revokeAccessToken(accessToken);
    }
    // https://tools.ietf.org/html/rfc7009
    // revokes a refresh token on the STS. This is only required in the code flow with refresh tokens.
    // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.
    // This makes it possible to manage your own tokens.
    revokeRefreshToken(refreshToken) {
        return this.logoffRevocationService.revokeRefreshToken(refreshToken);
    }
    getEndSessionUrl() {
        return this.logoffRevocationService.getEndSessionUrl();
    }
}
OidcSecurityService.decorators = [
    { type: Injectable }
];
OidcSecurityService.ctorParameters = () => [
    { type: CheckSessionService },
    { type: CheckAuthService },
    { type: UserService },
    { type: TokenHelperService },
    { type: ConfigurationProvider },
    { type: AuthStateService },
    { type: FlowsDataService },
    { type: CallbackService },
    { type: LogoffRevocationService },
    { type: LoginService },
    { type: StoragePersistanceService },
    { type: RefreshSessionService }
];
//# sourceMappingURL=data:application/json;base64,