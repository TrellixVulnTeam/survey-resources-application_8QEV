import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { of } from 'rxjs';
import { concatMap, map } from 'rxjs/operators';
import { AuthStateService } from '../authState/auth-state.service';
import { AutoLoginService } from '../auto-login/auto-login-service';
import { CheckAuthService } from '../check-auth.service';
import { LoginService } from '../login/login.service';
import * as i0 from "@angular/core";
import * as i1 from "./auto-login-service";
import * as i2 from "../authState/auth-state.service";
import * as i3 from "../check-auth.service";
import * as i4 from "../login/login.service";
import * as i5 from "@angular/router";
export class AutoLoginGuard {
    constructor(autoLoginService, authStateService, checkAuthService, loginService, router) {
        this.autoLoginService = autoLoginService;
        this.authStateService = authStateService;
        this.checkAuthService = checkAuthService;
        this.loginService = loginService;
        this.router = router;
    }
    canLoad(route, segments) {
        return this.checkAuth(route.path);
    }
    canActivate(route, state) {
        return this.checkAuth(state.url);
    }
    checkAuth(url) {
        return this.authStateService.authorized$.pipe(concatMap((isAuthenticatedAlready) => (isAuthenticatedAlready ? of(isAuthenticatedAlready) : this.checkAuthService.checkAuth())), map((isAuthorized) => {
            const storedRoute = this.autoLoginService.getStoredRedirectRoute();
            if (isAuthorized) {
                if (storedRoute) {
                    this.autoLoginService.deleteStoredRedirectRoute();
                    this.router.navigate([storedRoute]);
                }
                return true;
            }
            this.autoLoginService.saveStoredRedirectRoute(url);
            this.loginService.login();
            return false;
        }));
    }
}
AutoLoginGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function AutoLoginGuard_Factory() { return new AutoLoginGuard(i0.ɵɵinject(i1.AutoLoginService), i0.ɵɵinject(i2.AuthStateService), i0.ɵɵinject(i3.CheckAuthService), i0.ɵɵinject(i4.LoginService), i0.ɵɵinject(i5.Router)); }, token: AutoLoginGuard, providedIn: "root" });
AutoLoginGuard.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
AutoLoginGuard.ctorParameters = () => [
    { type: AutoLoginService },
    { type: AuthStateService },
    { type: CheckAuthService },
    { type: LoginService },
    { type: Router }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1sb2dpbi5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWF1dGgtb2lkYy1jbGllbnQvc3JjLyIsInNvdXJjZXMiOlsibGliL2F1dG8tbG9naW4vYXV0by1sb2dpbi5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBdUQsTUFBTSxFQUFtQyxNQUFNLGlCQUFpQixDQUFDO0FBQy9ILE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNwRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7Ozs7Ozs7QUFHdEQsTUFBTSxPQUFPLGNBQWM7SUFDekIsWUFDVSxnQkFBa0MsRUFDbEMsZ0JBQWtDLEVBQ2xDLGdCQUFrQyxFQUNsQyxZQUEwQixFQUMxQixNQUFjO1FBSmQscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUNyQixDQUFDO0lBRUosT0FBTyxDQUFDLEtBQVksRUFBRSxRQUFzQjtRQUMxQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxXQUFXLENBQUMsS0FBNkIsRUFBRSxLQUEwQjtRQUNuRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTyxTQUFTLENBQUMsR0FBVztRQUMzQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUMzQyxTQUFTLENBQUMsQ0FBQyxzQkFBc0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBRWhJLEdBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ25CLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBRW5FLElBQUksWUFBWSxFQUFFO2dCQUNoQixJQUFJLFdBQVcsRUFBRTtvQkFDZixJQUFJLENBQUMsZ0JBQWdCLENBQUMseUJBQXlCLEVBQUUsQ0FBQztvQkFDbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO2lCQUNyQztnQkFDRCxPQUFPLElBQUksQ0FBQzthQUNiO1lBRUQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25ELElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDMUIsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7OztZQXRDRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7WUFKekIsZ0JBQWdCO1lBRGhCLGdCQUFnQjtZQUVoQixnQkFBZ0I7WUFDaEIsWUFBWTtZQU55QyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgQ2FuQWN0aXZhdGUsIENhbkxvYWQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlclN0YXRlU25hcHNob3QsIFVybFNlZ21lbnQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNvbmNhdE1hcCwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQXV0aFN0YXRlU2VydmljZSB9IGZyb20gJy4uL2F1dGhTdGF0ZS9hdXRoLXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXV0b0xvZ2luU2VydmljZSB9IGZyb20gJy4uL2F1dG8tbG9naW4vYXV0by1sb2dpbi1zZXJ2aWNlJztcbmltcG9ydCB7IENoZWNrQXV0aFNlcnZpY2UgfSBmcm9tICcuLi9jaGVjay1hdXRoLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9naW5TZXJ2aWNlIH0gZnJvbSAnLi4vbG9naW4vbG9naW4uc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgQXV0b0xvZ2luR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSwgQ2FuTG9hZCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYXV0b0xvZ2luU2VydmljZTogQXV0b0xvZ2luU2VydmljZSxcbiAgICBwcml2YXRlIGF1dGhTdGF0ZVNlcnZpY2U6IEF1dGhTdGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjaGVja0F1dGhTZXJ2aWNlOiBDaGVja0F1dGhTZXJ2aWNlLFxuICAgIHByaXZhdGUgbG9naW5TZXJ2aWNlOiBMb2dpblNlcnZpY2UsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlclxuICApIHt9XG5cbiAgY2FuTG9hZChyb3V0ZTogUm91dGUsIHNlZ21lbnRzOiBVcmxTZWdtZW50W10pOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5jaGVja0F1dGgocm91dGUucGF0aCk7XG4gIH1cblxuICBjYW5BY3RpdmF0ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5jaGVja0F1dGgoc3RhdGUudXJsKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tBdXRoKHVybDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuYXV0aFN0YXRlU2VydmljZS5hdXRob3JpemVkJC5waXBlKFxuICAgICAgY29uY2F0TWFwKChpc0F1dGhlbnRpY2F0ZWRBbHJlYWR5KSA9PiAoaXNBdXRoZW50aWNhdGVkQWxyZWFkeSA/IG9mKGlzQXV0aGVudGljYXRlZEFscmVhZHkpIDogdGhpcy5jaGVja0F1dGhTZXJ2aWNlLmNoZWNrQXV0aCgpKSksXG5cbiAgICAgIG1hcCgoaXNBdXRob3JpemVkKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0b3JlZFJvdXRlID0gdGhpcy5hdXRvTG9naW5TZXJ2aWNlLmdldFN0b3JlZFJlZGlyZWN0Um91dGUoKTtcblxuICAgICAgICBpZiAoaXNBdXRob3JpemVkKSB7XG4gICAgICAgICAgaWYgKHN0b3JlZFJvdXRlKSB7XG4gICAgICAgICAgICB0aGlzLmF1dG9Mb2dpblNlcnZpY2UuZGVsZXRlU3RvcmVkUmVkaXJlY3RSb3V0ZSgpO1xuICAgICAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW3N0b3JlZFJvdXRlXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hdXRvTG9naW5TZXJ2aWNlLnNhdmVTdG9yZWRSZWRpcmVjdFJvdXRlKHVybCk7XG4gICAgICAgIHRoaXMubG9naW5TZXJ2aWNlLmxvZ2luKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuIl19