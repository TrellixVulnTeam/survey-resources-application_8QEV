import { Injectable } from '@angular/core';
import { LoggerService } from '../logging/logger.service';
import { allRules } from './rules';
export class ConfigValidationService {
    constructor(loggerService) {
        this.loggerService = loggerService;
    }
    validateConfig(passedConfig) {
        const allValidationResults = allRules.map((rule) => rule(passedConfig));
        const allMessages = allValidationResults.filter((x) => x.messages.length > 0);
        const allErrorMessages = this.getAllMessagesOfType('error', allMessages);
        const allWarnings = this.getAllMessagesOfType('warning', allMessages);
        allErrorMessages.map((message) => this.loggerService.logError(message));
        allWarnings.map((message) => this.loggerService.logWarning(message));
        return allErrorMessages.length === 0;
    }
    getAllMessagesOfType(type, results) {
        const allMessages = results.filter((x) => x.level === type).map((result) => result.messages);
        return allMessages.reduce((acc, val) => acc.concat(val), []);
    }
}
ConfigValidationService.decorators = [
    { type: Injectable }
];
ConfigValidationService.ctorParameters = () => [
    { type: LoggerService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXZhbGlkYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWF1dGgtb2lkYy1jbGllbnQvc3JjLyIsInNvdXJjZXMiOlsibGliL2NvbmZpZy12YWxpZGF0aW9uL2NvbmZpZy12YWxpZGF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFMUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUduQyxNQUFNLE9BQU8sdUJBQXVCO0lBQ2xDLFlBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQUcsQ0FBQztJQUVwRCxjQUFjLENBQUMsWUFBaUM7UUFDOUMsTUFBTSxvQkFBb0IsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUV4RSxNQUFNLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRTlFLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztRQUN6RSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3RFLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN4RSxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRXJFLE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU8sb0JBQW9CLENBQUMsSUFBVyxFQUFFLE9BQStCO1FBQ3ZFLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0YsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7WUFwQkYsVUFBVTs7O1lBSkYsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9wZW5JZENvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9hbmd1bGFyLWF1dGgtb2lkYy1jbGllbnQnO1xuaW1wb3J0IHsgTG9nZ2VyU2VydmljZSB9IGZyb20gJy4uL2xvZ2dpbmcvbG9nZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTGV2ZWwsIFJ1bGVWYWxpZGF0aW9uUmVzdWx0IH0gZnJvbSAnLi9ydWxlJztcbmltcG9ydCB7IGFsbFJ1bGVzIH0gZnJvbSAnLi9ydWxlcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb25maWdWYWxpZGF0aW9uU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9nZ2VyU2VydmljZTogTG9nZ2VyU2VydmljZSkge31cblxuICB2YWxpZGF0ZUNvbmZpZyhwYXNzZWRDb25maWc6IE9wZW5JZENvbmZpZ3VyYXRpb24pOiBib29sZWFuIHtcbiAgICBjb25zdCBhbGxWYWxpZGF0aW9uUmVzdWx0cyA9IGFsbFJ1bGVzLm1hcCgocnVsZSkgPT4gcnVsZShwYXNzZWRDb25maWcpKTtcblxuICAgIGNvbnN0IGFsbE1lc3NhZ2VzID0gYWxsVmFsaWRhdGlvblJlc3VsdHMuZmlsdGVyKCh4KSA9PiB4Lm1lc3NhZ2VzLmxlbmd0aCA+IDApO1xuXG4gICAgY29uc3QgYWxsRXJyb3JNZXNzYWdlcyA9IHRoaXMuZ2V0QWxsTWVzc2FnZXNPZlR5cGUoJ2Vycm9yJywgYWxsTWVzc2FnZXMpO1xuICAgIGNvbnN0IGFsbFdhcm5pbmdzID0gdGhpcy5nZXRBbGxNZXNzYWdlc09mVHlwZSgnd2FybmluZycsIGFsbE1lc3NhZ2VzKTtcbiAgICBhbGxFcnJvck1lc3NhZ2VzLm1hcCgobWVzc2FnZSkgPT4gdGhpcy5sb2dnZXJTZXJ2aWNlLmxvZ0Vycm9yKG1lc3NhZ2UpKTtcbiAgICBhbGxXYXJuaW5ncy5tYXAoKG1lc3NhZ2UpID0+IHRoaXMubG9nZ2VyU2VydmljZS5sb2dXYXJuaW5nKG1lc3NhZ2UpKTtcblxuICAgIHJldHVybiBhbGxFcnJvck1lc3NhZ2VzLmxlbmd0aCA9PT0gMDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QWxsTWVzc2FnZXNPZlR5cGUodHlwZTogTGV2ZWwsIHJlc3VsdHM6IFJ1bGVWYWxpZGF0aW9uUmVzdWx0W10pIHtcbiAgICBjb25zdCBhbGxNZXNzYWdlcyA9IHJlc3VsdHMuZmlsdGVyKCh4KSA9PiB4LmxldmVsID09PSB0eXBlKS5tYXAoKHJlc3VsdCkgPT4gcmVzdWx0Lm1lc3NhZ2VzKTtcbiAgICByZXR1cm4gYWxsTWVzc2FnZXMucmVkdWNlKChhY2MsIHZhbCkgPT4gYWNjLmNvbmNhdCh2YWwpLCBbXSk7XG4gIH1cbn1cbiJdfQ==