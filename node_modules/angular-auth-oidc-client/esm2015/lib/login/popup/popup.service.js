import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class PopUpService {
    constructor() {
        this.STORAGE_IDENTIFIER = 'popupauth';
        this.receivedUrlInternal$ = new Subject();
    }
    get receivedUrl$() {
        return this.receivedUrlInternal$.asObservable();
    }
    isCurrentlyInPopup() {
        const popup = sessionStorage.getItem(this.STORAGE_IDENTIFIER);
        return !!window.opener && window.opener !== window && !!popup;
    }
    openPopUp(url, popupOptions) {
        const optionsToPass = this.getOptions(popupOptions);
        this.popUp = window.open(url, '_blank', optionsToPass);
        this.popUp.sessionStorage.setItem(this.STORAGE_IDENTIFIER, 'true');
        const listener = (event) => {
            if (!(event === null || event === void 0 ? void 0 : event.data) || typeof event.data !== 'string') {
                return;
            }
            this.receivedUrlInternal$.next(event.data);
            this.cleanUp(listener);
        };
        window.addEventListener('message', listener, false);
    }
    sendMessageToMainWindow(url) {
        if (window.opener) {
            this.sendMessage(url, window.location.href);
        }
    }
    cleanUp(listener) {
        window.removeEventListener('message', listener, false);
        if (this.popUp) {
            this.popUp.sessionStorage.removeItem(this.STORAGE_IDENTIFIER);
            this.popUp.close();
            this.popUp = null;
        }
    }
    sendMessage(url, href) {
        window.opener.postMessage(url, href);
    }
    getOptions(popupOptions) {
        const popupDefaultOptions = { width: 500, height: 500, left: 50, top: 50 };
        const options = Object.assign(Object.assign({}, popupDefaultOptions), (popupOptions || {}));
        return Object.entries(options)
            .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
            .join(',');
    }
}
PopUpService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PopUpService_Factory() { return new PopUpService(); }, token: PopUpService, providedIn: "root" });
PopUpService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWF1dGgtb2lkYy1jbGllbnQvc3JjLyIsInNvdXJjZXMiOlsibGliL2xvZ2luL3BvcHVwL3BvcHVwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUkzQyxNQUFNLE9BQU8sWUFBWTtJQUR6QjtRQUVVLHVCQUFrQixHQUFHLFdBQVcsQ0FBQztRQUVqQyx5QkFBb0IsR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO0tBMER0RDtJQXhEQyxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLE1BQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDOUQsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBVyxFQUFFLFlBQTJCO1FBQ2hELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVuRSxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQW1CLEVBQVEsRUFBRTtZQUM3QyxJQUFJLEVBQUMsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLElBQUksQ0FBQSxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQ2xELE9BQU87YUFDUjtZQUVELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRTNDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDO1FBRUYsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELHVCQUF1QixDQUFDLEdBQVc7UUFDakMsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDO0lBRU8sT0FBTyxDQUFDLFFBQWE7UUFDM0IsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFdkQsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQzlELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDbkI7SUFDSCxDQUFDO0lBRU8sV0FBVyxDQUFDLEdBQVcsRUFBRSxJQUFZO1FBQzNDLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU8sVUFBVSxDQUFDLFlBQTJCO1FBQzVDLE1BQU0sbUJBQW1CLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFFM0UsTUFBTSxPQUFPLG1DQUFRLG1CQUFtQixHQUFLLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQyxDQUFFLENBQUM7UUFFcEUsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQzthQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO2FBQ2hGLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNmLENBQUM7Ozs7WUE3REYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBvcHVwT3B0aW9ucyB9IGZyb20gJy4vcG9wdXAtb3B0aW9ucyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgUG9wVXBTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBTVE9SQUdFX0lERU5USUZJRVIgPSAncG9wdXBhdXRoJztcbiAgcHJpdmF0ZSBwb3BVcDogV2luZG93O1xuICBwcml2YXRlIHJlY2VpdmVkVXJsSW50ZXJuYWwkID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xuXG4gIGdldCByZWNlaXZlZFVybCQoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5yZWNlaXZlZFVybEludGVybmFsJC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIGlzQ3VycmVudGx5SW5Qb3B1cCgpOiBib29sZWFuIHtcbiAgICBjb25zdCBwb3B1cCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0odGhpcy5TVE9SQUdFX0lERU5USUZJRVIpO1xuICAgIHJldHVybiAhIXdpbmRvdy5vcGVuZXIgJiYgd2luZG93Lm9wZW5lciAhPT0gd2luZG93ICYmICEhcG9wdXA7XG4gIH1cblxuICBvcGVuUG9wVXAodXJsOiBzdHJpbmcsIHBvcHVwT3B0aW9ucz86IFBvcHVwT3B0aW9ucyk6IHZvaWQge1xuICAgIGNvbnN0IG9wdGlvbnNUb1Bhc3MgPSB0aGlzLmdldE9wdGlvbnMocG9wdXBPcHRpb25zKTtcbiAgICB0aGlzLnBvcFVwID0gd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJywgb3B0aW9uc1RvUGFzcyk7XG4gICAgdGhpcy5wb3BVcC5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHRoaXMuU1RPUkFHRV9JREVOVElGSUVSLCAndHJ1ZScpO1xuXG4gICAgY29uc3QgbGlzdGVuZXIgPSAoZXZlbnQ6IE1lc3NhZ2VFdmVudCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKCFldmVudD8uZGF0YSB8fCB0eXBlb2YgZXZlbnQuZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlY2VpdmVkVXJsSW50ZXJuYWwkLm5leHQoZXZlbnQuZGF0YSk7XG5cbiAgICAgIHRoaXMuY2xlYW5VcChsaXN0ZW5lcik7XG4gICAgfTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgfVxuXG4gIHNlbmRNZXNzYWdlVG9NYWluV2luZG93KHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHdpbmRvdy5vcGVuZXIpIHtcbiAgICAgIHRoaXMuc2VuZE1lc3NhZ2UodXJsLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjbGVhblVwKGxpc3RlbmVyOiBhbnkpOiB2b2lkIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG5cbiAgICBpZiAodGhpcy5wb3BVcCkge1xuICAgICAgdGhpcy5wb3BVcC5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMuU1RPUkFHRV9JREVOVElGSUVSKTtcbiAgICAgIHRoaXMucG9wVXAuY2xvc2UoKTtcbiAgICAgIHRoaXMucG9wVXAgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2VuZE1lc3NhZ2UodXJsOiBzdHJpbmcsIGhyZWY6IHN0cmluZyk6IHZvaWQge1xuICAgIHdpbmRvdy5vcGVuZXIucG9zdE1lc3NhZ2UodXJsLCBocmVmKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0T3B0aW9ucyhwb3B1cE9wdGlvbnM/OiBQb3B1cE9wdGlvbnMpOiBzdHJpbmcge1xuICAgIGNvbnN0IHBvcHVwRGVmYXVsdE9wdGlvbnMgPSB7IHdpZHRoOiA1MDAsIGhlaWdodDogNTAwLCBsZWZ0OiA1MCwgdG9wOiA1MCB9O1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgLi4ucG9wdXBEZWZhdWx0T3B0aW9ucywgLi4uKHBvcHVwT3B0aW9ucyB8fCB7fSkgfTtcblxuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhvcHRpb25zKVxuICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfWApXG4gICAgICAuam9pbignLCcpO1xuICB9XG59XG4iXX0=