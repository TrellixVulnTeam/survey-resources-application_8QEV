import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { map, switchMap, take } from 'rxjs/operators';
import { AuthStateService } from '../../authState/auth-state.service';
import { CheckAuthService } from '../../check-auth.service';
import { AuthWellKnownService } from '../../config/auth-well-known.service';
import { ConfigurationProvider } from '../../config/config.provider';
import { LoggerService } from '../../logging/logger.service';
import { UserService } from '../../userData/user-service';
import { RedirectService } from '../../utils/redirect/redirect.service';
import { UrlService } from '../../utils/url/url.service';
import { PopUpService } from '../popup/popup.service';
import { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';
import { ParService } from './par.service';
export class ParLoginService {
    constructor(loggerService, responseTypeValidationService, urlService, redirectService, configurationProvider, authWellKnownService, popupService, checkAuthService, userService, authStateService, parService) {
        this.loggerService = loggerService;
        this.responseTypeValidationService = responseTypeValidationService;
        this.urlService = urlService;
        this.redirectService = redirectService;
        this.configurationProvider = configurationProvider;
        this.authWellKnownService = authWellKnownService;
        this.popupService = popupService;
        this.checkAuthService = checkAuthService;
        this.userService = userService;
        this.authStateService = authStateService;
        this.parService = parService;
    }
    loginPar(authOptions) {
        if (!this.responseTypeValidationService.hasConfigValidResponseType()) {
            this.loggerService.logError('Invalid response type!');
            return;
        }
        const { authWellknownEndpoint } = this.configurationProvider.getOpenIDConfiguration();
        if (!authWellknownEndpoint) {
            this.loggerService.logError('no authWellknownEndpoint given!');
            return;
        }
        this.loggerService.logDebug('BEGIN Authorize OIDC Flow, no auth data');
        const { urlHandler, customParams } = authOptions || {};
        this.authWellKnownService
            .getAuthWellKnownEndPoints(authWellknownEndpoint)
            .pipe(switchMap(() => this.parService.postParRequest(customParams)))
            .subscribe((response) => {
            this.loggerService.logDebug('par response: ', response);
            const url = this.urlService.getAuthorizeParUrl(response.requestUri);
            this.loggerService.logDebug('par request url: ', url);
            if (!url) {
                this.loggerService.logError(`Could not create url with param ${response.requestUri}: '${url}'`);
                return;
            }
            if (urlHandler) {
                urlHandler(url);
            }
            else {
                this.redirectService.redirectTo(url);
            }
        });
    }
    loginWithPopUpPar(authOptions, popupOptions) {
        if (!this.responseTypeValidationService.hasConfigValidResponseType()) {
            const errorMessage = 'Invalid response type!';
            this.loggerService.logError(errorMessage);
            return throwError(errorMessage);
        }
        const { authWellknownEndpoint } = this.configurationProvider.getOpenIDConfiguration();
        if (!authWellknownEndpoint) {
            const errorMessage = 'no authWellknownEndpoint given!';
            this.loggerService.logError(errorMessage);
            return throwError(errorMessage);
        }
        this.loggerService.logDebug('BEGIN Authorize OIDC Flow with popup, no auth data');
        const { customParams } = authOptions || {};
        return this.authWellKnownService.getAuthWellKnownEndPoints(authWellknownEndpoint).pipe(switchMap(() => this.parService.postParRequest(customParams)), switchMap((response) => {
            this.loggerService.logDebug('par response: ', response);
            const url = this.urlService.getAuthorizeParUrl(response.requestUri);
            this.loggerService.logDebug('par request url: ', url);
            if (!url) {
                const errorMessage = `Could not create url with param ${response.requestUri}: 'url'`;
                this.loggerService.logError(errorMessage);
                return throwError(errorMessage);
            }
            this.popupService.openPopUp(url, popupOptions);
            return this.popupService.receivedUrl$.pipe(take(1), switchMap((receivedUrl) => this.checkAuthService.checkAuth(receivedUrl)), map((isAuthenticated) => ({
                isAuthenticated,
                userData: this.userService.getUserDataFromStore(),
                accessToken: this.authStateService.getAccessToken(),
            })));
        }));
    }
}
ParLoginService.decorators = [
    { type: Injectable }
];
ParLoginService.ctorParameters = () => [
    { type: LoggerService },
    { type: ResponseTypeValidationService },
    { type: UrlService },
    { type: RedirectService },
    { type: ConfigurationProvider },
    { type: AuthWellKnownService },
    { type: PopUpService },
    { type: CheckAuthService },
    { type: UserService },
    { type: AuthStateService },
    { type: ParService }
];
//# sourceMappingURL=data:application/json;base64,