{"version":3,"file":"angular-auth-oidc-client.js","sources":["../esm2015/projects/angular-auth-oidc-client/src/lib/utils/platform-provider/platform.provider.ts","../projects/angular-auth-oidc-client/src/lib/logging/log-level.ts","../projects/angular-auth-oidc-client/src/lib/config/default-config.ts","../projects/angular-auth-oidc-client/src/lib/config/config.provider.ts","../projects/angular-auth-oidc-client/src/lib/api/http-base.service.ts","../projects/angular-auth-oidc-client/src/lib/api/data.service.ts","../projects/angular-auth-oidc-client/src/lib/logging/logger.service.ts","../projects/angular-auth-oidc-client/src/lib/public-events/event-types.ts","../projects/angular-auth-oidc-client/src/lib/public-events/public-events.service.ts","../projects/angular-auth-oidc-client/src/lib/storage/abstract-security-storage.ts","../projects/angular-auth-oidc-client/src/lib/storage/storage-persistance.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/utils/tokenHelper/oidc-token-helper.service.ts","../projects/angular-auth-oidc-client/src/lib/validation/token-validation.service.ts","../projects/angular-auth-oidc-client/src/lib/authState/auth-state.service.ts","../projects/angular-auth-oidc-client/src/lib/auto-login/auto-login-service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/random/random.service.ts","../projects/angular-auth-oidc-client/src/lib/flows/flows-data.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/utils/flowHelper/flow-helper.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/utils/url/uri-encoder.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/utils/url/url.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/callback-handling/code-flow-callback-handler.service.ts","../projects/angular-auth-oidc-client/src/lib/authState/authorized-state.ts","../projects/angular-auth-oidc-client/src/lib/validation/validation-result.ts","../projects/angular-auth-oidc-client/src/lib/userData/user-service.ts","../projects/angular-auth-oidc-client/src/lib/flows/reset-auth-data.service.ts","../projects/angular-auth-oidc-client/src/lib/flows/signin-key-data.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/callback-handling/history-jwt-keys-callback-handler.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/callback-handling/implicit-flow-callback-handler.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/callback-handling/refresh-session-callback-handler.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/callback-handling/refresh-token-callback-handler.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/utils/equality/equality.service.ts","../projects/angular-auth-oidc-client/src/lib/validation/state-validation-result.ts","../projects/angular-auth-oidc-client/src/lib/validation/state-validation.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/callback-handling/state-validation-callback-handler.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/callback-handling/user-callback-handler.service.ts","../projects/angular-auth-oidc-client/src/lib/flows/flows.service.ts","../projects/angular-auth-oidc-client/src/lib/callback/intervall.service.ts","../projects/angular-auth-oidc-client/src/lib/callback/implicit-flow-callback.service.ts","../projects/angular-auth-oidc-client/src/lib/callback/code-flow-callback.service.ts","../projects/angular-auth-oidc-client/src/lib/callback/callback.service.ts","../projects/angular-auth-oidc-client/src/lib/iframe/existing-iframe.service.ts","../projects/angular-auth-oidc-client/src/lib/iframe/silent-renew.service.ts","../projects/angular-auth-oidc-client/src/lib/iframe/refresh-session-iframe.service.ts","../projects/angular-auth-oidc-client/src/lib/callback/refresh-session-refresh-token.service.ts","../projects/angular-auth-oidc-client/src/lib/callback/periodically-token-check.service.ts","../projects/angular-auth-oidc-client/src/lib/config/auth-well-known-data.service.ts","../projects/angular-auth-oidc-client/src/lib/config/auth-well-known.service.ts","../projects/angular-auth-oidc-client/src/lib/callback/refresh-session.service.ts","../projects/angular-auth-oidc-client/src/lib/iframe/check-session.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/login/popup/popup.service.ts","../../projects/angular-auth-oidc-client/src/lib/check-auth.service.ts","../projects/angular-auth-oidc-client/src/lib/config-validation/rule.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/config-validation/rules/ensure-clientId.rule.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/config-validation/rules/ensure-redirect-url.rule.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/config-validation/rules/ensure-silentRenewUrl-with-no-refreshtokens.rule.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/config-validation/rules/ensure-sts-server.rule.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/config-validation/rules/use-offline-scope-with-silent-renew.rule.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/config-validation/rules/index.ts","../projects/angular-auth-oidc-client/src/lib/config-validation/config-validation.service.ts","../projects/angular-auth-oidc-client/src/lib/config/config.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/utils/redirect/redirect.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/login/response-type-validation/response-type-validation.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/login/par/par.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/login/par/par-login.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/login/popup/popup-login.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/login/standard/standard-login.service.ts","../projects/angular-auth-oidc-client/src/lib/login/login.service.ts","../projects/angular-auth-oidc-client/src/lib/logoffRevoke/logoff-revocation.service.ts","../../projects/angular-auth-oidc-client/src/lib/oidc.security.service.ts","../projects/angular-auth-oidc-client/src/lib/storage/browser-storage.service.ts","../../projects/angular-auth-oidc-client/src/lib/auth.module.ts","../projects/angular-auth-oidc-client/src/lib/auto-login/auto-login.guard.ts","../projects/angular-auth-oidc-client/src/lib/interceptor/auth.interceptor.ts","../../projects/angular-auth-oidc-client/src/lib/angular-auth-oidc-client.ts","../../../projects/angular-auth-oidc-client/src/public-api.ts","../../../projects/angular-auth-oidc-client/src/angular-auth-oidc-client.ts"],"names":[],"mappings":"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","sourcesContent":["import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n\n@Injectable()\nexport class PlatformProvider {\n  get isBrowser() {\n    return isPlatformBrowser(this.platformId);\n  }\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\n}\n","// eslint-disable-next-line no-shadow\nexport enum LogLevel {\n  None,\n  Debug,\n  Warn,\n  Error,\n}\n","import { LogLevel } from '../logging/log-level';\nimport { OpenIdConfiguration } from './openid-configuration';\n\nexport const DEFAULT_CONFIG: OpenIdConfiguration = {\n  stsServer: 'https://please_set',\n  authWellknownEndpoint: '',\n  redirectUrl: 'https://please_set',\n  clientId: 'please_set',\n  responseType: 'code',\n  scope: 'openid email profile',\n  hdParam: '',\n  postLogoutRedirectUri: 'https://please_set',\n  startCheckSession: false,\n  silentRenew: false,\n  silentRenewUrl: 'https://please_set',\n  silentRenewTimeoutInSeconds: 20,\n  renewTimeBeforeTokenExpiresInSeconds: 0,\n  useRefreshToken: false,\n  usePushedAuthorisationRequests: false,\n  ignoreNonceAfterRefresh: false,\n  postLoginRoute: '/',\n  forbiddenRoute: '/forbidden',\n  unauthorizedRoute: '/unauthorized',\n  autoUserinfo: true,\n  autoCleanStateAfterAuthentication: true,\n  triggerAuthorizationResultEvent: false,\n  logLevel: LogLevel.Warn,\n  issValidationOff: false,\n  historyCleanupOff: false,\n  maxIdTokenIatOffsetAllowedInSeconds: 120,\n  disableIatOffsetValidation: false,\n  storage: typeof Storage !== 'undefined' ? sessionStorage : null,\n  customParams: {},\n  eagerLoadAuthWellKnownEndpoints: true,\n  disableRefreshIdTokenAuthTimeValidation: false,\n  tokenRefreshInSeconds: 4,\n  refreshTokenRetryInSeconds: 3,\n  ngswBypass: false,\n};\n","import { Injectable } from '@angular/core';\nimport { PlatformProvider } from '../utils/platform-provider/platform.provider';\nimport { DEFAULT_CONFIG } from './default-config';\nimport { OpenIdConfiguration } from './openid-configuration';\n\n@Injectable()\nexport class ConfigurationProvider {\n  private openIdConfigurationInternal: OpenIdConfiguration;\n\n  constructor(private platformProvider: PlatformProvider) {}\n\n  hasValidConfig() {\n    return !!this.openIdConfigurationInternal;\n  }\n\n  getOpenIDConfiguration(): OpenIdConfiguration {\n    return this.openIdConfigurationInternal || null;\n  }\n\n  setConfig(configuration: OpenIdConfiguration) {\n    this.openIdConfigurationInternal = { ...DEFAULT_CONFIG, ...configuration };\n\n    if (configuration?.storage) {\n      console.warn(\n        `PLEASE NOTE: The storage in the config will be deprecated in future versions:\n                Please pass the custom storage in forRoot() as documented`\n      );\n    }\n\n    this.setSpecialCases(this.openIdConfigurationInternal);\n\n    return this.openIdConfigurationInternal;\n  }\n\n  private setSpecialCases(currentConfig: OpenIdConfiguration) {\n    if (!this.platformProvider.isBrowser) {\n      currentConfig.startCheckSession = false;\n      currentConfig.silentRenew = false;\n      currentConfig.useRefreshToken = false;\n      currentConfig.usePushedAuthorisationRequests = false;\n    }\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class HttpBaseService {\n  constructor(private http: HttpClient) {}\n\n  get<T>(url: string, params?: { [key: string]: any }): Observable<T> {\n    return this.http.get<T>(url, params);\n  }\n\n  post<T>(url: string, body: any, params?: { [key: string]: any }): Observable<T> {\n    return this.http.post<T>(url, body, params);\n  }\n}\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { HttpBaseService } from './http-base.service';\n\nconst NGSW_CUSTOM_PARAM = 'ngsw-bypass';\n\n@Injectable()\nexport class DataService {\n  constructor(private httpClient: HttpBaseService, private readonly configurationProvider: ConfigurationProvider) {}\n\n  get<T>(url: string, token?: string): Observable<T> {\n    const headers = this.prepareHeaders(token);\n    let params = new HttpParams();\n\n    const { ngswBypass } = this.configurationProvider.getOpenIDConfiguration();\n    if (ngswBypass) {\n      params = params.set(NGSW_CUSTOM_PARAM, '');\n    }\n    return this.httpClient.get<T>(url, {\n      headers,\n      params,\n    });\n  }\n\n  post<T>(url: string, body: any, headersParams?: HttpHeaders) {\n    const headers = headersParams || this.prepareHeaders();\n    let params = new HttpParams();\n\n    const { ngswBypass } = this.configurationProvider.getOpenIDConfiguration();\n    if (ngswBypass) {\n      params = params.set(NGSW_CUSTOM_PARAM, '');\n    }\n\n    return this.httpClient.post<T>(url, body, { headers, params });\n  }\n\n  private prepareHeaders(token?: string) {\n    let headers = new HttpHeaders();\n    headers = headers.set('Accept', 'application/json');\n\n    if (!!token) {\n      headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\n    }\n\n    return headers;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LogLevel } from './log-level';\n\n@Injectable()\nexport class LoggerService {\n  constructor(private configurationProvider: ConfigurationProvider) {}\n\n  logError(message: any, ...args: any[]) {\n    if (this.loggingIsTurnedOff()) {\n      return;\n    }\n\n    if (!!args && args.length) {\n      console.error(message, ...args);\n    } else {\n      console.error(message);\n    }\n  }\n\n  logWarning(message: any, ...args: any[]) {\n    if (!this.logLevelIsSet()) {\n      return;\n    }\n\n    if (this.loggingIsTurnedOff()) {\n      return;\n    }\n\n    if (!this.currentLogLevelIsEqualOrSmallerThan(LogLevel.Warn)) {\n      return;\n    }\n\n    if (!!args && args.length) {\n      console.warn(message, ...args);\n    } else {\n      console.warn(message);\n    }\n  }\n\n  logDebug(message: any, ...args: any[]) {\n    if (!this.logLevelIsSet()) {\n      return;\n    }\n\n    if (this.loggingIsTurnedOff()) {\n      return;\n    }\n\n    if (!this.currentLogLevelIsEqualOrSmallerThan(LogLevel.Debug)) {\n      return;\n    }\n\n    if (!!args && args.length) {\n      console.log(message, ...args);\n    } else {\n      console.log(message);\n    }\n  }\n\n  private currentLogLevelIsEqualOrSmallerThan(logLevelToCompare: LogLevel) {\n    const { logLevel } = this.configurationProvider.getOpenIDConfiguration() || {};\n    return logLevel <= logLevelToCompare;\n  }\n\n  private logLevelIsSet() {\n    const { logLevel } = this.configurationProvider.getOpenIDConfiguration() || {};\n\n    if (logLevel === null) {\n      return false;\n    }\n\n    if (logLevel === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private loggingIsTurnedOff() {\n    const { logLevel } = this.configurationProvider.getOpenIDConfiguration() || {};\n\n    return logLevel === LogLevel.None;\n  }\n}\n","// eslint-disable-next-line no-shadow\nexport enum EventTypes {\n  /**\n   *  This only works in the AppModule Constructor\n   */\n  ConfigLoaded,\n  ConfigLoadingFailed,\n  CheckSessionReceived,\n  UserDataChanged,\n  NewAuthorizationResult,\n  TokenExpired,\n  IdTokenExpired,\n}\n","import { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { EventTypes } from './event-types';\nimport { OidcClientNotification } from './notification';\n\n@Injectable()\nexport class PublicEventsService {\n  private notify = new ReplaySubject<OidcClientNotification<any>>(1);\n\n  fireEvent<T>(type: EventTypes, value?: T) {\n    this.notify.next({ type, value });\n  }\n\n  registerForEvents() {\n    return this.notify.asObservable();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Implement this class-interface to create a custom storage.\n */\n@Injectable()\nexport abstract class AbstractSecurityStorage {\n  /**\n   * This method must contain the logic to read the storage.\n   *\n   * @return The value of the given key\n   */\n  public abstract read(key: string): any;\n\n  /**\n   * This method must contain the logic to write the storage.\n   *\n   * @param value The value for the given key\n   */\n  public abstract write(key: string, value: any): void;\n\n  /**\n   * This method must contain the logic to remove an item from the storage.\n   *\n   * @param key The value for the key to be removed\n   */\n  public abstract remove(key: string): void;\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { AbstractSecurityStorage } from './abstract-security-storage';\n\nexport type StorageKeys =\n  | 'authnResult'\n  | 'authzData'\n  | 'access_token_expires_at'\n  | 'authWellKnownEndPoints'\n  | 'userData'\n  | 'authNonce'\n  | 'codeVerifier'\n  | 'authStateControl'\n  | 'session_state'\n  | 'storageSilentRenewRunning'\n  | 'storageCustomRequestParams';\n\n@Injectable()\nexport class StoragePersistanceService {\n  constructor(\n    private readonly oidcSecurityStorage: AbstractSecurityStorage,\n    private readonly configurationProvider: ConfigurationProvider\n  ) {}\n\n  read(key: StorageKeys) {\n    const keyToRead = this.createKeyWithPrefix(key);\n    return this.oidcSecurityStorage.read(keyToRead);\n  }\n\n  write(key: StorageKeys, value: any) {\n    const keyToStore = this.createKeyWithPrefix(key);\n    this.oidcSecurityStorage.write(keyToStore, value);\n  }\n\n  remove(key: StorageKeys) {\n    const keyToStore = this.createKeyWithPrefix(key);\n    this.oidcSecurityStorage.remove(keyToStore);\n  }\n\n  resetStorageFlowData() {\n    this.remove('session_state');\n    this.remove('storageSilentRenewRunning');\n    this.remove('codeVerifier');\n    this.remove('userData');\n    this.remove('storageCustomRequestParams');\n    this.remove('access_token_expires_at');\n  }\n\n  resetAuthStateInStorage() {\n    this.remove('authzData');\n    this.remove('authnResult');\n  }\n\n  getAccessToken(): any {\n    return this.read('authzData');\n  }\n\n  getIdToken(): any {\n    return this.read('authnResult')?.id_token;\n  }\n\n  getRefreshToken(): any {\n    return this.read('authnResult')?.refresh_token;\n  }\n\n  private createKeyWithPrefix(key: string) {\n    const config = this.configurationProvider.getOpenIDConfiguration();\n    const prefix = config?.clientId || '';\n    return `${prefix}_${key}`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\n\nconst PARTS_OF_TOKEN = 3;\n@Injectable()\nexport class TokenHelperService {\n  constructor(private readonly loggerService: LoggerService) {}\n\n  getTokenExpirationDate(dataIdToken: any): Date {\n    if (!dataIdToken.hasOwnProperty('exp')) {\n      return new Date(new Date().toUTCString());\n    }\n\n    const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    date.setUTCSeconds(dataIdToken.exp);\n\n    return date;\n  }\n\n  getHeaderFromToken(token: any, encoded: boolean) {\n    if (!this.tokenIsValid(token)) {\n      return {};\n    }\n\n    return this.getPartOfToken(token, 0, encoded);\n  }\n\n  getPayloadFromToken(token: any, encoded: boolean) {\n    if (!this.tokenIsValid(token)) {\n      return {};\n    }\n\n    return this.getPartOfToken(token, 1, encoded);\n  }\n\n  getSignatureFromToken(token: any, encoded: boolean) {\n    if (!this.tokenIsValid(token)) {\n      return {};\n    }\n\n    return this.getPartOfToken(token, 2, encoded);\n  }\n\n  private getPartOfToken(token: string, index: number, encoded: boolean) {\n    const partOfToken = this.extractPartOfToken(token, index);\n\n    if (encoded) {\n      return partOfToken;\n    }\n\n    const result = this.urlBase64Decode(partOfToken);\n    return JSON.parse(result);\n  }\n\n  private urlBase64Decode(str: string) {\n    let output = str.replace(/-/g, '+').replace(/_/g, '/');\n\n    switch (output.length % 4) {\n      case 0:\n        break;\n      case 2:\n        output += '==';\n        break;\n      case 3:\n        output += '=';\n        break;\n      default:\n        throw Error('Illegal base64url string!');\n    }\n\n    const decoded = typeof window !== 'undefined' ? window.atob(output) : Buffer.from(output, 'base64').toString('binary');\n\n    try {\n      // Going backwards: from bytestream, to percent-encoding, to original string.\n      return decodeURIComponent(\n        decoded\n          .split('')\n          .map((c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n      );\n    } catch (err) {\n      return decoded;\n    }\n  }\n\n  private tokenIsValid(token: string) {\n    if (!token) {\n      this.loggerService.logError(`token '${token}' is not valid --> token falsy`);\n      return false;\n    }\n\n    if (!(token as string).includes('.')) {\n      this.loggerService.logError(`token '${token}' is not valid --> no dots included`);\n      return false;\n    }\n\n    const parts = token.split('.');\n\n    if (parts.length !== PARTS_OF_TOKEN) {\n      this.loggerService.logError(`token '${token}' is not valid --> token has to have exactly ${PARTS_OF_TOKEN - 1} dots`);\n      return false;\n    }\n\n    return true;\n  }\n\n  private extractPartOfToken(token: string, index: number) {\n    return token.split('.')[index];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { hextob64u, KEYUTIL, KJUR } from 'jsrsasign-reduced';\nimport { LoggerService } from '../logging/logger.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\n\n// http://openid.net/specs/openid-connect-implicit-1_0.html\n\n// id_token\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n// MUST exactly match the value of the iss (issuer) Claim.\n//\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n// or if it contains additional audiences not trusted by the Client.\n//\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\n//\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n//\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n//\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect\n// Core 1.0\n// [OpenID.Core] specification.\n//\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\n// for clock skew).\n//\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n//\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\n// is Client specific.\n//\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\n// The meaning and processing of acr Claim Values is out of scope for this document.\n//\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\n// if it determines too much time has elapsed since the last End- User authentication.\n\n// Access Token Validation\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present\n// in the ID Token.\n\n@Injectable()\nexport class TokenValidationService {\n  static refreshTokenNoncePlaceholder = '--RefreshToken--';\n  keyAlgorithms: string[] = ['HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'PS256', 'PS384', 'PS512'];\n\n  constructor(private tokenHelperService: TokenHelperService, private loggerService: LoggerService) {}\n\n  // id_token C7: The current time MUST be before the time represented by the exp Claim\n  // (possibly allowing for some small leeway to account for clock skew).\n  hasIdTokenExpired(token: string, offsetSeconds?: number): boolean {\n    const decoded = this.tokenHelperService.getPayloadFromToken(token, false);\n\n    return !this.validateIdTokenExpNotExpired(decoded, offsetSeconds);\n  }\n\n  // id_token C7: The current time MUST be before the time represented by the exp Claim\n  // (possibly allowing for some small leeway to account for clock skew).\n  validateIdTokenExpNotExpired(decodedIdToken: string, offsetSeconds?: number): boolean {\n    const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decodedIdToken);\n    offsetSeconds = offsetSeconds || 0;\n\n    if (!tokenExpirationDate) {\n      return false;\n    }\n\n    const tokenExpirationValue = tokenExpirationDate.valueOf();\n    const nowWithOffset = new Date(new Date().toUTCString()).valueOf() + offsetSeconds * 1000;\n    const tokenNotExpired = tokenExpirationValue > nowWithOffset;\n\n    this.loggerService.logDebug(`Has id_token expired: ${!tokenNotExpired}, ${tokenExpirationValue} > ${nowWithOffset}`);\n\n    // Token not expired?\n    return tokenNotExpired;\n  }\n\n  validateAccessTokenNotExpired(accessTokenExpiresAt: Date, offsetSeconds?: number): boolean {\n    // value is optional, so if it does not exist, then it has not expired\n    if (!accessTokenExpiresAt) {\n      return true;\n    }\n\n    offsetSeconds = offsetSeconds || 0;\n    const accessTokenExpirationValue = accessTokenExpiresAt.valueOf();\n    const nowWithOffset = new Date(new Date().toUTCString()).valueOf() + offsetSeconds * 1000;\n    const tokenNotExpired = accessTokenExpirationValue > nowWithOffset;\n\n    this.loggerService.logDebug(`Has access_token expired: ${!tokenNotExpired}, ${accessTokenExpirationValue} > ${nowWithOffset}`);\n\n    // access token not expired?\n    return tokenNotExpired;\n  }\n\n  // iss\n  // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the\n  // https scheme that contains scheme, host,\n  // and optionally, port number and path components and no query or fragment components.\n  //\n  // sub\n  // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\n  // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\n  // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\n  //\n  // aud\n  // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an\n  // audience value.\n  // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\n  // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\n  //\n  // exp\n  // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\n  // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\n  // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\n  // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until\n  // the date/ time.\n  // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\n  //\n  // iat\n  // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from\n  // 1970- 01 - 01T00: 00: 00Z as measured\n  // in UTC until the date/ time.\n  validateRequiredIdToken(dataIdToken: any): boolean {\n    let validated = true;\n    if (!dataIdToken.hasOwnProperty('iss')) {\n      validated = false;\n      this.loggerService.logWarning('iss is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('sub')) {\n      validated = false;\n      this.loggerService.logWarning('sub is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('aud')) {\n      validated = false;\n      this.loggerService.logWarning('aud is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('exp')) {\n      validated = false;\n      this.loggerService.logWarning('exp is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('iat')) {\n      validated = false;\n      this.loggerService.logWarning('iat is missing, this is required in the id_token');\n    }\n\n    return validated;\n  }\n\n  // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n  // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n  validateIdTokenIatMaxOffset(dataIdToken: any, maxOffsetAllowedInSeconds: number, disableIatOffsetValidation: boolean): boolean {\n    if (disableIatOffsetValidation) {\n      return true;\n    }\n\n    if (!dataIdToken.hasOwnProperty('iat')) {\n      return false;\n    }\n\n    const dateTimeIatIdToken = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    dateTimeIatIdToken.setUTCSeconds(dataIdToken.iat);\n    maxOffsetAllowedInSeconds = maxOffsetAllowedInSeconds || 0;\n\n    const nowInUtc = new Date(new Date().toUTCString());\n    const diff = nowInUtc.valueOf() - dateTimeIatIdToken.valueOf();\n    const maxOffsetAllowedInMilliseconds = maxOffsetAllowedInSeconds * 1000;\n\n    this.loggerService.logDebug(`validate id token iat max offset ${diff} < ${maxOffsetAllowedInMilliseconds}`);\n\n    if (diff > 0) {\n      return diff < maxOffsetAllowedInMilliseconds;\n    }\n\n    return -diff < maxOffsetAllowedInMilliseconds;\n  }\n\n  // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\n  // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\n  // The precise method for detecting replay attacks is Client specific.\n\n  // However the nonce claim SHOULD not be present for the refresh_token grant type\n  // https://bitbucket.org/openid/connect/issues/1025/ambiguity-with-how-nonce-is-handled-on\n  // The current spec is ambiguous and Keycloak does send it.\n  validateIdTokenNonce(dataIdToken: any, localNonce: any, ignoreNonceAfterRefresh: boolean): boolean {\n    const isFromRefreshToken =\n      (dataIdToken.nonce === undefined || ignoreNonceAfterRefresh) && localNonce === TokenValidationService.refreshTokenNoncePlaceholder;\n    if (!isFromRefreshToken && dataIdToken.nonce !== localNonce) {\n      this.loggerService.logDebug('Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + localNonce);\n      return false;\n    }\n\n    return true;\n  }\n\n  // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n  // MUST exactly match the value of the iss (issuer) Claim.\n  validateIdTokenIss(dataIdToken: any, authWellKnownEndpointsIssuer: any): boolean {\n    if ((dataIdToken.iss as string) !== (authWellKnownEndpointsIssuer as string)) {\n      this.loggerService.logDebug(\n        'Validate_id_token_iss failed, dataIdToken.iss: ' +\n          dataIdToken.iss +\n          ' authWellKnownEndpoints issuer:' +\n          authWellKnownEndpointsIssuer\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n  // by the iss (issuer) Claim as an audience.\n  // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\n  // not trusted by the Client.\n  validateIdTokenAud(dataIdToken: any, aud: any): boolean {\n    if (Array.isArray(dataIdToken.aud)) {\n      const result = dataIdToken.aud.includes(aud);\n\n      if (!result) {\n        this.loggerService.logDebug('Validate_id_token_aud array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n        return false;\n      }\n\n      return true;\n    } else if (dataIdToken.aud !== aud) {\n      this.loggerService.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n\n      return false;\n    }\n\n    return true;\n  }\n\n  validateIdTokenAzpExistsIfMoreThanOneAud(dataIdToken: any): boolean {\n    if (!dataIdToken) {\n      return false;\n    }\n\n    if (Array.isArray(dataIdToken.aud) && dataIdToken.aud.length > 1 && !dataIdToken.azp) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n  validateIdTokenAzpValid(dataIdToken: any, clientId: string): boolean {\n    if (!dataIdToken?.azp) {\n      return true;\n    }\n\n    if (dataIdToken.azp === clientId) {\n      return true;\n    }\n\n    return false;\n  }\n\n  validateStateFromHashCallback(state: any, localState: any): boolean {\n    if ((state as string) !== (localState as string)) {\n      this.loggerService.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + localState);\n      return false;\n    }\n\n    return true;\n  }\n\n  // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\n  // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n  // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\n  // OpenID Connect Core 1.0 [OpenID.Core] specification.\n  validateSignatureIdToken(idToken: any, jwtkeys: any): boolean {\n    if (!jwtkeys || !jwtkeys.keys) {\n      return false;\n    }\n\n    const headerData = this.tokenHelperService.getHeaderFromToken(idToken, false);\n\n    if (Object.keys(headerData).length === 0 && headerData.constructor === Object) {\n      this.loggerService.logWarning('id token has no header data');\n      return false;\n    }\n\n    const kid = headerData.kid;\n    const alg = headerData.alg;\n\n    if (!this.keyAlgorithms.includes(alg as string)) {\n      this.loggerService.logWarning('alg not supported', alg);\n      return false;\n    }\n\n    let jwtKtyToUse = 'RSA';\n    if ((alg as string).charAt(0) === 'E') {\n      jwtKtyToUse = 'EC';\n    }\n\n    let isValid = false;\n\n    if (!headerData.hasOwnProperty('kid')) {\n      // exactly 1 key in the jwtkeys and no kid in the Jose header\n      // kty\t\"RSA\" or EC use \"sig\"\n      let amountOfMatchingKeys = 0;\n      for (const key of jwtkeys.keys) {\n        if ((key.kty as string) === jwtKtyToUse && (key.use as string) === 'sig') {\n          amountOfMatchingKeys = amountOfMatchingKeys + 1;\n        }\n      }\n\n      if (amountOfMatchingKeys === 0) {\n        this.loggerService.logWarning('no keys found, incorrect Signature, validation failed for id_token');\n        return false;\n      }\n\n      if (amountOfMatchingKeys > 1) {\n        this.loggerService.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\n        return false;\n      }\n\n      for (const key of jwtkeys.keys) {\n        if ((key.kty as string) === jwtKtyToUse && (key.use as string) === 'sig') {\n          const publickey = KEYUTIL.getKey(key);\n          isValid = KJUR.jws.JWS.verify(idToken, publickey, [alg]);\n          if (!isValid) {\n            this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n          }\n          return isValid;\n        }\n      }\n    } else {\n      // kid in the Jose header of id_token\n      for (const key of jwtkeys.keys) {\n        if ((key.kid as string) === (kid as string)) {\n          const publicKey = KEYUTIL.getKey(key);\n          isValid = KJUR.jws.JWS.verify(idToken, publicKey, [alg]);\n          if (!isValid) {\n            this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n          }\n          return isValid;\n        }\n      }\n    }\n\n    return isValid;\n  }\n\n  // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\n  //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\n  ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\n  ////    if (!header_data.hasOwnProperty('kid')) {\n  ////        // no kid defined in Jose header\n  ////        if (jwtkeys.keys.length != 1) {\n  ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\n  ////            return false;\n  ////        }\n  ////    }\n\n  ////    return true;\n  //// }\n\n  // Access Token Validation\n  // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n  // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n  // access_token C2: Take the left- most half of the hash and base64url- encode it.\n  // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\n  // is present in the ID Token.\n  validateIdTokenAtHash(accessToken: any, atHash: any, idTokenAlg: string): boolean {\n    this.loggerService.logDebug('at_hash from the server:' + atHash);\n\n    // 'sha256' 'sha384' 'sha512'\n    let sha = 'sha256';\n    if (idTokenAlg.includes('384')) {\n      sha = 'sha384';\n    } else if (idTokenAlg.includes('512')) {\n      sha = 'sha512';\n    }\n\n    const testData = this.generateAtHash('' + accessToken, sha);\n    this.loggerService.logDebug('at_hash client validation not decoded:' + testData);\n    if (testData === (atHash as string)) {\n      return true; // isValid;\n    } else {\n      const testValue = this.generateAtHash('' + decodeURIComponent(accessToken), sha);\n      this.loggerService.logDebug('-gen access--' + testValue);\n      if (testValue === (atHash as string)) {\n        return true; // isValid\n      }\n    }\n\n    return false;\n  }\n\n  generateCodeChallenge(codeVerifier: any): string {\n    const hash = KJUR.crypto.Util.hashString(codeVerifier, 'sha256');\n    const testData = hextob64u(hash);\n\n    return testData;\n  }\n\n  private generateAtHash(accessToken: any, sha: string): string {\n    const hash = KJUR.crypto.Util.hashString(accessToken, sha);\n    const first128bits = hash.substr(0, hash.length / 2);\n    const testData = hextob64u(first128bits);\n\n    return testData;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { TokenValidationService } from '../validation/token-validation.service';\nimport { AuthorizationResult } from './authorization-result';\n\n@Injectable()\nexport class AuthStateService {\n  private authorizedInternal$ = new BehaviorSubject<boolean>(false);\n\n  get authorized$() {\n    return this.authorizedInternal$.asObservable();\n  }\n\n  private get isAuthorized() {\n    return !!this.storagePersistanceService.getAccessToken() && !!this.storagePersistanceService.getIdToken();\n  }\n\n  constructor(\n    private storagePersistanceService: StoragePersistanceService,\n    private loggerService: LoggerService,\n    private publicEventsService: PublicEventsService,\n    private configurationProvider: ConfigurationProvider,\n    private tokenValidationService: TokenValidationService\n  ) {}\n\n  setAuthorizedAndFireEvent(): void {\n    this.authorizedInternal$.next(true);\n  }\n\n  setUnauthorizedAndFireEvent(): void {\n    this.storagePersistanceService.resetAuthStateInStorage();\n    this.authorizedInternal$.next(false);\n  }\n\n  updateAndPublishAuthState(authorizationResult: AuthorizationResult) {\n    this.publicEventsService.fireEvent<AuthorizationResult>(EventTypes.NewAuthorizationResult, authorizationResult);\n  }\n\n  setAuthorizationData(accessToken: any, authResult: any) {\n    this.loggerService.logDebug(accessToken);\n    this.loggerService.logDebug('storing the accessToken');\n\n    this.storagePersistanceService.write('authzData', accessToken);\n    this.persistAccessTokenExpirationTime(authResult);\n    this.setAuthorizedAndFireEvent();\n  }\n\n  getAccessToken(): string {\n    if (!this.isAuthorized) {\n      return '';\n    }\n\n    const token = this.storagePersistanceService.getAccessToken();\n    return this.decodeURIComponentSafely(token);\n  }\n\n  getIdToken(): string {\n    if (!this.isAuthorized) {\n      return '';\n    }\n\n    const token = this.storagePersistanceService.getIdToken();\n    return this.decodeURIComponentSafely(token);\n  }\n\n  getRefreshToken(): string {\n    if (!this.isAuthorized) {\n      return '';\n    }\n\n    const token = this.storagePersistanceService.getRefreshToken();\n    return this.decodeURIComponentSafely(token);\n  }\n\n  areAuthStorageTokensValid() {\n    if (!this.isAuthorized) {\n      return false;\n    }\n\n    if (this.hasIdTokenExpired()) {\n      this.loggerService.logDebug('persisted id_token is expired');\n      return false;\n    }\n\n    if (this.hasAccessTokenExpiredIfExpiryExists()) {\n      this.loggerService.logDebug('persisted access_token is expired');\n      return false;\n    }\n\n    this.loggerService.logDebug('persisted id_token and access token are valid');\n    return true;\n  }\n\n  hasIdTokenExpired() {\n    const tokenToCheck = this.storagePersistanceService.getIdToken();\n    const { renewTimeBeforeTokenExpiresInSeconds } = this.configurationProvider.getOpenIDConfiguration();\n\n    const idTokenExpired = this.tokenValidationService.hasIdTokenExpired(tokenToCheck, renewTimeBeforeTokenExpiresInSeconds);\n\n    if (idTokenExpired) {\n      this.publicEventsService.fireEvent<boolean>(EventTypes.IdTokenExpired, idTokenExpired);\n    }\n\n    return idTokenExpired;\n  }\n\n  hasAccessTokenExpiredIfExpiryExists() {\n    const { renewTimeBeforeTokenExpiresInSeconds } = this.configurationProvider.getOpenIDConfiguration();\n    const accessTokenExpiresIn = this.storagePersistanceService.read('access_token_expires_at');\n    const accessTokenHasNotExpired = this.tokenValidationService.validateAccessTokenNotExpired(\n      accessTokenExpiresIn,\n      renewTimeBeforeTokenExpiresInSeconds\n    );\n\n    const hasExpired = !accessTokenHasNotExpired;\n\n    if (hasExpired) {\n      this.publicEventsService.fireEvent<boolean>(EventTypes.TokenExpired, hasExpired);\n    }\n\n    return hasExpired;\n  }\n\n  private decodeURIComponentSafely(token: string) {\n    if (token) {\n      return decodeURIComponent(token);\n    } else {\n      return '';\n    }\n  }\n\n  private persistAccessTokenExpirationTime(authResult: any) {\n    if (authResult?.expires_in) {\n      const accessTokenExpiryTime = new Date(new Date().toUTCString()).valueOf() + authResult.expires_in * 1000;\n      this.storagePersistanceService.write('access_token_expires_at', accessTokenExpiryTime);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nconst STORAGE_KEY = 'redirect';\n\n@Injectable()\nexport class AutoLoginService {\n  getStoredRedirectRoute() {\n    return localStorage.getItem(STORAGE_KEY);\n  }\n\n  saveStoredRedirectRoute(url: string) {\n    localStorage.setItem(STORAGE_KEY, url);\n  }\n\n  deleteStoredRedirectRoute() {\n    localStorage.removeItem(STORAGE_KEY);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\n\n@Injectable()\nexport class RandomService {\n  constructor(@Inject(DOCUMENT) private readonly doc: any, private loggerService: LoggerService) {}\n\n  createRandom(requiredLength: number): string {\n    if (requiredLength <= 0) {\n      return '';\n    }\n\n    if (requiredLength > 0 && requiredLength < 7) {\n      this.loggerService.logWarning(`RandomService called with ${requiredLength} but 7 chars is the minimum, returning 10 chars`);\n      requiredLength = 10;\n    }\n\n    const length = requiredLength - 6;\n    const arr = new Uint8Array((length || length) / 2);\n    if (this.getCrypto()) {\n      this.getCrypto().getRandomValues(arr);\n    }\n\n    return Array.from(arr, this.toHex).join('') + this.randomString(7);\n  }\n\n  private toHex(dec) {\n    return ('0' + dec.toString(16)).substr(-2);\n  }\n\n  private randomString(length): string {\n    let result = '';\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    const values = new Uint32Array(length);\n    if (this.getCrypto()) {\n      this.getCrypto().getRandomValues(values);\n      for (let i = 0; i < length; i++) {\n        result += characters[values[i] % characters.length];\n      }\n    }\n\n    return result;\n  }\n\n  private getCrypto() {\n    // support for IE,  (window.crypto || window.msCrypto)\n    return this.doc.defaultView.crypto || (this.doc.defaultView as any).msCrypto;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { RandomService } from './random/random.service';\n\n@Injectable()\nexport class FlowsDataService {\n  constructor(\n    private storagePersistanceService: StoragePersistanceService,\n    private randomService: RandomService,\n    private configurationProvider: ConfigurationProvider,\n    private loggerService: LoggerService\n  ) {}\n\n  createNonce(): string {\n    const nonce = this.randomService.createRandom(40);\n    this.setNonce(nonce);\n    return nonce;\n  }\n\n  setNonce(nonce: string) {\n    this.storagePersistanceService.write('authNonce', nonce);\n  }\n\n  getAuthStateControl(): any {\n    return this.storagePersistanceService.read('authStateControl');\n  }\n\n  setAuthStateControl(authStateControl: string) {\n    this.storagePersistanceService.write('authStateControl', authStateControl);\n  }\n\n  getExistingOrCreateAuthStateControl(): any {\n    let state = this.storagePersistanceService.read('authStateControl');\n    if (!state) {\n      state = this.randomService.createRandom(40);\n      this.storagePersistanceService.write('authStateControl', state);\n    }\n    return state;\n  }\n\n  setSessionState(sessionState: any) {\n    this.storagePersistanceService.write('session_state', sessionState);\n  }\n\n  resetStorageFlowData() {\n    this.storagePersistanceService.resetStorageFlowData();\n  }\n\n  getCodeVerifier() {\n    return this.storagePersistanceService.read('codeVerifier');\n  }\n\n  createCodeVerifier() {\n    const codeVerifier = this.randomService.createRandom(67);\n    this.storagePersistanceService.write('codeVerifier', codeVerifier);\n    return codeVerifier;\n  }\n\n  isSilentRenewRunning() {\n    const storageObject = JSON.parse(this.storagePersistanceService.read('storageSilentRenewRunning'));\n\n    if (storageObject) {\n      const { silentRenewTimeoutInSeconds } = this.configurationProvider.getOpenIDConfiguration();\n      const timeOutInMilliseconds = silentRenewTimeoutInSeconds * 1000;\n      const dateOfLaunchedProcessUtc = Date.parse(storageObject.dateOfLaunchedProcessUtc);\n      const currentDateUtc = Date.parse(new Date().toISOString());\n      const elapsedTimeInMilliseconds = Math.abs(currentDateUtc - dateOfLaunchedProcessUtc);\n      const isProbablyStuck = elapsedTimeInMilliseconds > timeOutInMilliseconds;\n\n      if (isProbablyStuck) {\n        this.loggerService.logDebug('silent renew process is probably stuck, state will be reset.');\n        this.resetSilentRenewRunning();\n        return false;\n      }\n\n      return storageObject.state === 'running';\n    }\n\n    return false;\n  }\n\n  setSilentRenewRunning() {\n    const storageObject = {\n      state: 'running',\n      dateOfLaunchedProcessUtc: new Date().toISOString(),\n    };\n\n    this.storagePersistanceService.write('storageSilentRenewRunning', JSON.stringify(storageObject));\n  }\n\n  resetSilentRenewRunning() {\n    this.storagePersistanceService.write('storageSilentRenewRunning', '');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../../config/config.provider';\n\n@Injectable()\nexport class FlowHelper {\n  constructor(private configurationProvider: ConfigurationProvider) {}\n\n  isCurrentFlowCodeFlow() {\n    return this.currentFlowIs('code');\n  }\n\n  isCurrentFlowAnyImplicitFlow() {\n    return this.isCurrentFlowImplicitFlowWithAccessToken() || this.isCurrentFlowImplicitFlowWithoutAccessToken();\n  }\n\n  isCurrentFlowCodeFlowWithRefreshTokens() {\n    const { useRefreshToken } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (this.isCurrentFlowCodeFlow() && useRefreshToken) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isCurrentFlowImplicitFlowWithAccessToken() {\n    return this.currentFlowIs('id_token token');\n  }\n\n  isCurrentFlowImplicitFlowWithoutAccessToken() {\n    return this.currentFlowIs('id_token');\n  }\n\n  currentFlowIs(flowTypes: string[] | string) {\n    const { responseType } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (Array.isArray(flowTypes)) {\n      return flowTypes.some((x) => responseType === x);\n    }\n\n    return responseType === flowTypes;\n  }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { oneLineTrim } from 'common-tags';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { FlowsDataService } from '../../flows/flows-data.service';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistanceService } from '../../storage/storage-persistance.service';\nimport { TokenValidationService } from '../../validation/token-validation.service';\nimport { FlowHelper } from '../flowHelper/flow-helper.service';\nimport { UriEncoder } from './uri-encoder';\n\nconst CALLBACK_PARAMS_TO_CHECK = ['code', 'state', 'token', 'id_token'];\n@Injectable()\nexport class UrlService {\n  constructor(\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly loggerService: LoggerService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly flowHelper: FlowHelper,\n    private tokenValidationService: TokenValidationService,\n    private storagePersistanceService: StoragePersistanceService\n  ) {}\n\n  getUrlParameter(urlToCheck: any, name: any): string {\n    if (!urlToCheck) {\n      return '';\n    }\n\n    if (!name) {\n      return '';\n    }\n\n    name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    const regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\n    const results = regex.exec(urlToCheck);\n    return results === null ? '' : decodeURIComponent(results[1]);\n  }\n\n  isCallbackFromSts(currentUrl: string): boolean {\n    return CALLBACK_PARAMS_TO_CHECK.some((x) => !!this.getUrlParameter(currentUrl, x));\n  }\n\n  getRefreshSessionSilentRenewUrl(customParams?: { [key: string]: string | number | boolean }): string {\n    if (this.flowHelper.isCurrentFlowCodeFlow()) {\n      return this.createUrlCodeFlowWithSilentRenew(customParams);\n    }\n\n    return this.createUrlImplicitFlowWithSilentRenew(customParams) || '';\n  }\n\n  getAuthorizeParUrl(requestUri: string): string {\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n\n    if (!authWellKnownEndPoints) {\n      this.loggerService.logError('authWellKnownEndpoints is undefined');\n      return null;\n    }\n\n    const authorizationEndpoint = authWellKnownEndPoints.authorizationEndpoint;\n\n    if (!authorizationEndpoint) {\n      this.loggerService.logError(`Can not create an authorize url when authorizationEndpoint is '${authorizationEndpoint}'`);\n      return null;\n    }\n\n    const { clientId } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!clientId) {\n      this.loggerService.logError(`createAuthorizeUrl could not add clientId because it was: `, clientId);\n      return null;\n    }\n\n    const urlParts = authorizationEndpoint.split('?');\n    const authorizationUrl = urlParts[0];\n\n    let params = new HttpParams({\n      fromString: urlParts[1],\n      encoder: new UriEncoder(),\n    });\n\n    params = params.set('request_uri', requestUri);\n    params = params.append('client_id', clientId);\n\n    return `${authorizationUrl}?${params}`;\n  }\n\n  getAuthorizeUrl(customParams?: { [key: string]: string | number | boolean }): string {\n    if (this.flowHelper.isCurrentFlowCodeFlow()) {\n      return this.createUrlCodeFlowAuthorize(customParams);\n    }\n\n    return this.createUrlImplicitFlowAuthorize(customParams) || '';\n  }\n\n  createEndSessionUrl(idTokenHint: string): string {\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    const endSessionEndpoint = authWellKnownEndPoints?.endSessionEndpoint;\n\n    if (!endSessionEndpoint) {\n      return null;\n    }\n\n    const urlParts = endSessionEndpoint.split('?');\n\n    const authorizationEndsessionUrl = urlParts[0];\n\n    let params = new HttpParams({\n      fromString: urlParts[1],\n      encoder: new UriEncoder(),\n    });\n    params = params.set('id_token_hint', idTokenHint);\n\n    const postLogoutRedirectUri = this.getPostLogoutRedirectUrl();\n\n    if (postLogoutRedirectUri) {\n      params = params.append('post_logout_redirect_uri', postLogoutRedirectUri);\n    }\n\n    return `${authorizationEndsessionUrl}?${params}`;\n  }\n\n  createRevocationEndpointBodyAccessToken(token: any): string {\n    const clientId = this.getClientId();\n\n    if (!clientId) {\n      return null;\n    }\n\n    return `client_id=${clientId}&token=${token}&token_type_hint=access_token`;\n  }\n\n  createRevocationEndpointBodyRefreshToken(token: any): string {\n    const clientId = this.getClientId();\n\n    if (!clientId) {\n      return null;\n    }\n\n    return `client_id=${clientId}&token=${token}&token_type_hint=refresh_token`;\n  }\n\n  getRevocationEndpointUrl(): string {\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    const revocationEndpoint = authWellKnownEndPoints?.revocationEndpoint;\n\n    if (!revocationEndpoint) {\n      return null;\n    }\n\n    const urlParts = revocationEndpoint.split('?');\n\n    const revocationEndpointUrl = urlParts[0];\n    return revocationEndpointUrl;\n  }\n\n  createBodyForCodeFlowCodeRequest(code: string, customTokenParams?: { [p: string]: string | number | boolean }): string {\n    const codeVerifier = this.flowsDataService.getCodeVerifier();\n    if (!codeVerifier) {\n      this.loggerService.logError(`CodeVerifier is not set `, codeVerifier);\n      return null;\n    }\n\n    const clientId = this.getClientId();\n\n    if (!clientId) {\n      return null;\n    }\n\n    let dataForBody = oneLineTrim`grant_type=authorization_code\n            &client_id=${clientId}\n            &code_verifier=${codeVerifier}\n            &code=${code}`;\n\n    if (customTokenParams) {\n      const customParamText = this.composeCustomParams({ ...customTokenParams });\n      dataForBody = oneLineTrim`${dataForBody}${customParamText}`;\n    }\n\n    const silentRenewUrl = this.getSilentRenewUrl();\n\n    if (this.flowsDataService.isSilentRenewRunning() && silentRenewUrl) {\n      return oneLineTrim`${dataForBody}&redirect_uri=${silentRenewUrl}`;\n    }\n\n    const redirectUrl = this.getRedirectUrl();\n\n    if (!redirectUrl) {\n      return null;\n    }\n\n    return oneLineTrim`${dataForBody}&redirect_uri=${redirectUrl}`;\n  }\n\n  createBodyForCodeFlowRefreshTokensRequest(refreshToken: string, customParams?: { [key: string]: string | number | boolean }): string {\n    const clientId = this.getClientId();\n\n    if (!clientId) {\n      return null;\n    }\n\n    let dataForBody = oneLineTrim`grant_type=refresh_token\n            &client_id=${clientId}\n            &refresh_token=${refreshToken}`;\n\n    if (customParams) {\n      const customParamText = this.composeCustomParams({ ...customParams });\n      dataForBody = `${dataForBody}${customParamText}`;\n    }\n\n    return dataForBody;\n  }\n\n  createBodyForParCodeFlowRequest(customParamsRequest?: { [key: string]: string | number | boolean }): string {\n    const redirectUrl = this.getRedirectUrl();\n\n    if (!redirectUrl) {\n      return null;\n    }\n\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\n    const nonce = this.flowsDataService.createNonce();\n    this.loggerService.logDebug('Authorize created. adding myautostate: ' + state);\n\n    // code_challenge with \"S256\"\n    const codeVerifier = this.flowsDataService.createCodeVerifier();\n    const codeChallenge = this.tokenValidationService.generateCodeChallenge(codeVerifier);\n\n    const { clientId, responseType, scope, hdParam, customParams } = this.configurationProvider.getOpenIDConfiguration();\n\n    let dataForBody = oneLineTrim`client_id=${clientId}\n            &redirect_uri=${redirectUrl}\n            &response_type=${responseType}\n            &scope=${scope}\n            &nonce=${nonce}\n            &state=${state}\n            &code_challenge=${codeChallenge}\n            &code_challenge_method=S256`;\n\n    if (hdParam) {\n      dataForBody = `${dataForBody}&hd=${hdParam}`;\n    }\n\n    if (customParams) {\n      const customParamText = this.composeCustomParams({ ...customParams });\n      dataForBody = `${dataForBody}${customParamText}`;\n    }\n\n    if (customParamsRequest) {\n      const customParamText = this.composeCustomParams({ ...customParamsRequest });\n      dataForBody = `${dataForBody}${customParamText}`;\n    }\n\n    return dataForBody;\n  }\n\n  private createAuthorizeUrl(\n    codeChallenge: string,\n    redirectUrl: string,\n    nonce: string,\n    state: string,\n    prompt?: string,\n    customRequestParams?: { [key: string]: string | number | boolean }\n  ): string {\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    const authorizationEndpoint = authWellKnownEndPoints?.authorizationEndpoint;\n\n    if (!authorizationEndpoint) {\n      this.loggerService.logError(`Can not create an authorize url when authorizationEndpoint is '${authorizationEndpoint}'`);\n      return null;\n    }\n\n    const { clientId, responseType, scope, hdParam, customParams } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!clientId) {\n      this.loggerService.logError(`createAuthorizeUrl could not add clientId because it was: `, clientId);\n      return null;\n    }\n\n    if (!responseType) {\n      this.loggerService.logError(`createAuthorizeUrl could not add responseType because it was: `, responseType);\n      return null;\n    }\n\n    if (!scope) {\n      this.loggerService.logError(`createAuthorizeUrl could not add scope because it was: `, scope);\n      return null;\n    }\n\n    const urlParts = authorizationEndpoint.split('?');\n    const authorizationUrl = urlParts[0];\n\n    let params = new HttpParams({\n      fromString: urlParts[1],\n      encoder: new UriEncoder(),\n    });\n\n    params = params.set('client_id', clientId);\n    params = params.append('redirect_uri', redirectUrl);\n    params = params.append('response_type', responseType);\n    params = params.append('scope', scope);\n    params = params.append('nonce', nonce);\n    params = params.append('state', state);\n\n    if (this.flowHelper.isCurrentFlowCodeFlow()) {\n      params = params.append('code_challenge', codeChallenge);\n      params = params.append('code_challenge_method', 'S256');\n    }\n\n    if (prompt) {\n      params = params.append('prompt', prompt);\n    }\n\n    if (hdParam) {\n      params = params.append('hd', hdParam);\n    }\n\n    if (customParams) {\n      for (const [key, value] of Object.entries({ ...customParams })) {\n        params = params.append(key, value.toString());\n      }\n    }\n\n    if (customRequestParams) {\n      for (const [key, value] of Object.entries({ ...customRequestParams })) {\n        params = params.append(key, value.toString());\n      }\n    }\n\n    return `${authorizationUrl}?${params}`;\n  }\n\n  private createUrlImplicitFlowWithSilentRenew(customParams?: { [key: string]: string | number | boolean }): string {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\n    const nonce = this.flowsDataService.createNonce();\n\n    const silentRenewUrl = this.getSilentRenewUrl();\n\n    if (!silentRenewUrl) {\n      return null;\n    }\n\n    this.loggerService.logDebug('RefreshSession created. adding myautostate: ', state);\n\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    if (authWellKnownEndPoints) {\n      return this.createAuthorizeUrl('', silentRenewUrl, nonce, state, 'none', customParams);\n    }\n\n    this.loggerService.logError('authWellKnownEndpoints is undefined');\n    return null;\n  }\n\n  private createUrlCodeFlowWithSilentRenew(customParams?: { [key: string]: string | number | boolean }): string {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\n    const nonce = this.flowsDataService.createNonce();\n\n    this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + state);\n\n    // code_challenge with \"S256\"\n    const codeVerifier = this.flowsDataService.createCodeVerifier();\n    const codeChallenge = this.tokenValidationService.generateCodeChallenge(codeVerifier);\n\n    const silentRenewUrl = this.getSilentRenewUrl();\n\n    if (!silentRenewUrl) {\n      return null;\n    }\n\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    if (authWellKnownEndPoints) {\n      return this.createAuthorizeUrl(codeChallenge, silentRenewUrl, nonce, state, 'none', customParams);\n    }\n\n    this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n    return null;\n  }\n\n  private createUrlImplicitFlowAuthorize(customParams?: { [key: string]: string | number | boolean }): string {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\n    const nonce = this.flowsDataService.createNonce();\n    this.loggerService.logDebug('Authorize created. adding myautostate: ' + state);\n\n    const redirectUrl = this.getRedirectUrl();\n\n    if (!redirectUrl) {\n      return null;\n    }\n\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    if (authWellKnownEndPoints) {\n      return this.createAuthorizeUrl('', redirectUrl, nonce, state, null, customParams);\n    }\n\n    this.loggerService.logError('authWellKnownEndpoints is undefined');\n    return null;\n  }\n\n  private createUrlCodeFlowAuthorize(customParams?: { [key: string]: string | number | boolean }): string {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\n    const nonce = this.flowsDataService.createNonce();\n    this.loggerService.logDebug('Authorize created. adding myautostate: ' + state);\n\n    const redirectUrl = this.getRedirectUrl();\n\n    if (!redirectUrl) {\n      return null;\n    }\n\n    // code_challenge with \"S256\"\n    const codeVerifier = this.flowsDataService.createCodeVerifier();\n    const codeChallenge = this.tokenValidationService.generateCodeChallenge(codeVerifier);\n\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    if (authWellKnownEndPoints) {\n      return this.createAuthorizeUrl(codeChallenge, redirectUrl, nonce, state, null, customParams);\n    }\n\n    this.loggerService.logError('authWellKnownEndpoints is undefined');\n    return null;\n  }\n\n  private getRedirectUrl(): string {\n    const { redirectUrl } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!redirectUrl) {\n      this.loggerService.logError(`could not get redirectUrl, was: `, redirectUrl);\n      return null;\n    }\n\n    return redirectUrl;\n  }\n\n  private getSilentRenewUrl(): string {\n    const { silentRenewUrl } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!silentRenewUrl) {\n      this.loggerService.logError(`could not get silentRenewUrl, was: `, silentRenewUrl);\n      return null;\n    }\n\n    return silentRenewUrl;\n  }\n\n  private getPostLogoutRedirectUrl(): string {\n    const { postLogoutRedirectUri } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!postLogoutRedirectUri) {\n      this.loggerService.logError(`could not get postLogoutRedirectUri, was: `, postLogoutRedirectUri);\n      return null;\n    }\n\n    return postLogoutRedirectUri;\n  }\n\n  private getClientId(): string {\n    const { clientId } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!clientId) {\n      this.loggerService.logError(`could not get clientId, was: `, clientId);\n      return null;\n    }\n\n    return clientId;\n  }\n\n  private composeCustomParams(customParams: { [key: string]: string | number | boolean }) {\n    let customParamText = '';\n\n    for (const [key, value] of Object.entries(customParams)) {\n      customParamText = customParamText.concat(`&${key}=${value.toString()}`);\n    }\n\n    return customParamText;\n  }\n}\n","import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError, timer } from 'rxjs';\nimport { catchError, mergeMap, retryWhen, switchMap } from 'rxjs/operators';\nimport { DataService } from '../../api/data.service';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistanceService } from '../../storage/storage-persistance.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { TokenValidationService } from '../../validation/token-validation.service';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\n\n@Injectable()\nexport class CodeFlowCallbackHandlerService {\n  constructor(\n    private readonly urlService: UrlService,\n    private readonly loggerService: LoggerService,\n    private readonly tokenValidationService: TokenValidationService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly storagePersistanceService: StoragePersistanceService,\n    private readonly dataService: DataService\n  ) {}\n\n  // STEP 1 Code Flow\n  codeFlowCallback(urlToCheck: string): Observable<CallbackContext> {\n    const code = this.urlService.getUrlParameter(urlToCheck, 'code');\n    const state = this.urlService.getUrlParameter(urlToCheck, 'state');\n    const sessionState = this.urlService.getUrlParameter(urlToCheck, 'session_state') || null;\n\n    if (!state) {\n      this.loggerService.logDebug('no state in url');\n      return throwError('no state in url');\n    }\n\n    if (!code) {\n      this.loggerService.logDebug('no code in url');\n      return throwError('no code in url');\n    }\n\n    this.loggerService.logDebug('running validation for callback', urlToCheck);\n\n    const initialCallbackContext = {\n      code,\n      refreshToken: null,\n      state,\n      sessionState,\n      authResult: null,\n      isRenewProcess: false,\n      jwtKeys: null,\n      validationResult: null,\n      existingIdToken: null,\n    };\n\n    return of(initialCallbackContext);\n  }\n\n  // STEP 2 Code Flow //  Code Flow Silent Renew starts here\n  codeFlowCodeRequest(callbackContext: CallbackContext): Observable<CallbackContext> {\n    const authStateControl = this.flowsDataService.getAuthStateControl();\n\n    const isStateCorrect = this.tokenValidationService.validateStateFromHashCallback(callbackContext.state, authStateControl);\n\n    if (!isStateCorrect) {\n      this.loggerService.logWarning('codeFlowCodeRequest incorrect state');\n      return throwError('codeFlowCodeRequest incorrect state');\n    }\n\n    const authWellKnown = this.storagePersistanceService.read('authWellKnownEndPoints');\n    const tokenEndpoint = authWellKnown?.tokenEndpoint;\n    if (!tokenEndpoint) {\n      return throwError('Token Endpoint not defined');\n    }\n\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n    const config = this.configurationProvider.getOpenIDConfiguration();\n\n    const bodyForCodeFlow = this.urlService.createBodyForCodeFlowCodeRequest(callbackContext.code, config?.customTokenParams);\n\n    return this.dataService.post(tokenEndpoint, bodyForCodeFlow, headers).pipe(\n      switchMap((response) => {\n        let authResult: any = new Object();\n        authResult = response;\n        authResult.state = callbackContext.state;\n        authResult.session_state = callbackContext.sessionState;\n\n        callbackContext.authResult = authResult;\n        return of(callbackContext);\n      }),\n      retryWhen((error) => this.handleRefreshRetry(error)),\n      catchError((error) => {\n        const { stsServer } = this.configurationProvider.getOpenIDConfiguration();\n        const errorMessage = `OidcService code request ${stsServer}`;\n        this.loggerService.logError(errorMessage, error);\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  private handleRefreshRetry(errors: Observable<any>): Observable<any> {\n    return errors.pipe(\n      mergeMap((error) => {\n        // retry token refresh if there is no internet connection\n        if (error && error instanceof HttpErrorResponse && error.error instanceof ProgressEvent && error.error.type === 'error') {\n          const { stsServer, refreshTokenRetryInSeconds } = this.configurationProvider.getOpenIDConfiguration();\n          const errorMessage = `OidcService code request ${stsServer} - no internet connection`;\n          this.loggerService.logWarning(errorMessage, error);\n          return timer(refreshTokenRetryInSeconds * 1000);\n        }\n        return throwError(error);\n      })\n    );\n  }\n}\n","/* eslint-disable no-shadow */\nexport enum AuthorizedState {\n  Authorized = 'Authorized',\n  Unauthorized = 'Unauthorized',\n  Unknown = 'Unknown',\n}\n","/* eslint-disable no-shadow */\nexport enum ValidationResult {\n  NotSet = 'NotSet',\n  StatesDoNotMatch = 'StatesDoNotMatch',\n  SignatureFailed = 'SignatureFailed',\n  IncorrectNonce = 'IncorrectNonce',\n  RequiredPropertyMissing = 'RequiredPropertyMissing',\n  MaxOffsetExpired = 'MaxOffsetExpired',\n  IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\n  NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\n  IncorrectAud = 'IncorrectAud',\n  IncorrectIdTokenClaimsAfterRefresh = 'IncorrectIdTokenClaimsAfterRefresh',\n  IncorrectAzp = 'IncorrectAzp',\n  TokenExpired = 'TokenExpired',\n  IncorrectAtHash = 'IncorrectAtHash',\n  Ok = 'Ok',\n  LoginRequired = 'LoginRequired',\n  SecureTokenServerError = 'SecureTokenServerError',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\nimport { map, retry, switchMap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\n\n@Injectable()\nexport class UserService {\n  private userDataInternal$ = new BehaviorSubject<any>(null);\n\n  get userData$() {\n    return this.userDataInternal$.asObservable();\n  }\n\n  constructor(\n    private oidcDataService: DataService,\n    private storagePersistanceService: StoragePersistanceService,\n    private eventService: PublicEventsService,\n    private loggerService: LoggerService,\n    private tokenHelperService: TokenHelperService,\n    private flowHelper: FlowHelper,\n    private configurationProvider: ConfigurationProvider\n  ) {}\n\n  // TODO CHECK PARAMETERS\n  //  validationResult.idToken can be the complete validationResult\n  getAndPersistUserDataInStore(isRenewProcess = false, idToken?: any, decodedIdToken?: any): Observable<any> {\n    idToken = idToken || this.storagePersistanceService.getIdToken();\n    decodedIdToken = decodedIdToken || this.tokenHelperService.getPayloadFromToken(idToken, false);\n\n    const existingUserDataFromStorage = this.getUserDataFromStore();\n    const haveUserData = !!existingUserDataFromStorage;\n    const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken();\n    const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow();\n\n    const accessToken = this.storagePersistanceService.getAccessToken();\n    if (!(isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow)) {\n      this.loggerService.logDebug('authorizedCallback id_token flow');\n      this.loggerService.logDebug('accessToken', accessToken);\n\n      this.setUserDataToStore(decodedIdToken);\n      return of(decodedIdToken);\n    }\n\n    const { renewUserInfoAfterTokenRenew } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!isRenewProcess || renewUserInfoAfterTokenRenew || !haveUserData) {\n      return this.getUserDataOidcFlowAndSave(decodedIdToken.sub).pipe(\n        switchMap((userData) => {\n          this.loggerService.logDebug('Received user data', userData);\n          if (!!userData) {\n            this.loggerService.logDebug('accessToken', accessToken);\n            return of(userData);\n          } else {\n            return throwError('no user data, request failed');\n          }\n        })\n      );\n    }\n\n    return of(existingUserDataFromStorage);\n  }\n\n  getUserDataFromStore(): any {\n    return this.storagePersistanceService.read('userData') || null;\n  }\n\n  publishUserDataIfExists() {\n    const userData = this.getUserDataFromStore();\n    if (userData) {\n      this.userDataInternal$.next(userData);\n      this.eventService.fireEvent(EventTypes.UserDataChanged, userData);\n    }\n  }\n\n  setUserDataToStore(value: any): void {\n    this.storagePersistanceService.write('userData', value);\n    this.userDataInternal$.next(value);\n    this.eventService.fireEvent(EventTypes.UserDataChanged, value);\n  }\n\n  resetUserDataInStore(): void {\n    this.storagePersistanceService.remove('userData');\n    this.eventService.fireEvent(EventTypes.UserDataChanged, null);\n    this.userDataInternal$.next(null);\n  }\n\n  private getUserDataOidcFlowAndSave(idTokenSub: any): Observable<any> {\n    return this.getIdentityUserData().pipe(\n      map((data: any) => {\n        if (this.validateUserDataSubIdToken(idTokenSub, data?.sub)) {\n          this.setUserDataToStore(data);\n          return data;\n        } else {\n          // something went wrong, userdata sub does not match that from id_token\n          this.loggerService.logWarning('authorizedCallback, User data sub does not match sub in id_token');\n          this.loggerService.logDebug('authorizedCallback, token(s) validation failed, resetting');\n          this.resetUserDataInStore();\n          return null;\n        }\n      })\n    );\n  }\n\n  private getIdentityUserData(): Observable<any> {\n    const token = this.storagePersistanceService.getAccessToken();\n\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n\n    if (!authWellKnownEndPoints) {\n      this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\n      return throwError('authWellKnownEndpoints is undefined');\n    }\n\n    const userinfoEndpoint = authWellKnownEndPoints.userinfoEndpoint;\n\n    if (!userinfoEndpoint) {\n      this.loggerService.logError(\n        'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\n      );\n      return throwError('authWellKnownEndpoints.userinfo_endpoint is undefined');\n    }\n\n    return this.oidcDataService.get(userinfoEndpoint, token).pipe(retry(2));\n  }\n\n  private validateUserDataSubIdToken(idTokenSub: any, userdataSub: any): boolean {\n    if (!idTokenSub) {\n      return false;\n    }\n\n    if (!userdataSub) {\n      return false;\n    }\n\n    if ((idTokenSub as string) !== (userdataSub as string)) {\n      this.loggerService.logDebug('validateUserDataSubIdToken failed', idTokenSub, userdataSub);\n      return false;\n    }\n\n    return true;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { UserService } from '../userData/user-service';\nimport { FlowsDataService } from './flows-data.service';\n\n@Injectable()\nexport class ResetAuthDataService {\n  constructor(\n    private readonly authStateService: AuthStateService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly userService: UserService\n  ) {}\n\n  resetAuthorizationData(): void {\n    this.userService.resetUserDataInStore();\n    this.flowsDataService.resetStorageFlowData();\n    this.authStateService.setUnauthorizedAndFireEvent();\n  }\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { JwtKeys } from '../validation/jwtkeys';\n\n@Injectable()\nexport class SigninKeyDataService {\n  constructor(\n    private storagePersistanceService: StoragePersistanceService,\n    private loggerService: LoggerService,\n    private dataService: DataService\n  ) {}\n\n  getSigningKeys() {\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    const jwksUri = authWellKnownEndPoints?.jwksUri;\n    if (!jwksUri) {\n      const error = `getSigningKeys: authWellKnownEndpoints.jwksUri is: '${jwksUri}'`;\n      this.loggerService.logWarning(error);\n      return throwError(error);\n    }\n\n    this.loggerService.logDebug('Getting signinkeys from ', jwksUri);\n\n    return this.dataService.get<JwtKeys>(jwksUri).pipe(retry(2), catchError(this.handleErrorGetSigningKeys));\n  }\n\n  private handleErrorGetSigningKeys(errorResponse: HttpResponse<any> | any) {\n    let errMsg = '';\n    if (errorResponse instanceof HttpResponse) {\n      const body = errorResponse.body || {};\n      const err = JSON.stringify(body);\n      const { status, statusText } = errorResponse;\n      errMsg = `${status || ''} - ${statusText || ''} ${err || ''}`;\n    } else {\n      const { message } = errorResponse;\n      errMsg = !!message ? message : `${errorResponse}`;\n    }\n    this.loggerService.logError(errMsg);\n    return throwError(new Error(errMsg));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { AuthStateService } from '../../authState/auth-state.service';\nimport { AuthorizedState } from '../../authState/authorized-state';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistanceService } from '../../storage/storage-persistance.service';\nimport { ValidationResult } from '../../validation/validation-result';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\nimport { ResetAuthDataService } from '../reset-auth-data.service';\nimport { SigninKeyDataService } from '../signin-key-data.service';\n\n@Injectable()\nexport class HistoryJwtKeysCallbackHandlerService {\n  constructor(\n    private readonly loggerService: LoggerService,\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly authStateService: AuthStateService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly signInKeyDataService: SigninKeyDataService,\n    private readonly storagePersistanceService: StoragePersistanceService,\n    private readonly resetAuthDataService: ResetAuthDataService\n  ) {}\n\n  // STEP 3 Code Flow, STEP 2 Implicit Flow, STEP 3 Refresh Token\n  callbackHistoryAndResetJwtKeys(callbackContext: CallbackContext): Observable<CallbackContext> {\n    this.storagePersistanceService.write('authnResult', callbackContext.authResult);\n\n    if (this.historyCleanUpTurnedOn() && !callbackContext.isRenewProcess) {\n      this.resetBrowserHistory();\n    } else {\n      this.loggerService.logDebug('history clean up inactive');\n    }\n\n    if (callbackContext.authResult.error) {\n      const errorMessage = `authorizedCallbackProcedure came with error: ${callbackContext.authResult.error}`;\n      this.loggerService.logDebug(errorMessage);\n      this.resetAuthDataService.resetAuthorizationData();\n      this.flowsDataService.setNonce('');\n      this.handleResultErrorFromCallback(callbackContext.authResult, callbackContext.isRenewProcess);\n      return throwError(errorMessage);\n    }\n\n    this.loggerService.logDebug(callbackContext.authResult);\n    this.loggerService.logDebug('authorizedCallback created, begin token validation');\n\n    return this.signInKeyDataService.getSigningKeys().pipe(\n      switchMap((jwtKeys) => {\n        if (jwtKeys) {\n          callbackContext.jwtKeys = jwtKeys;\n\n          return of(callbackContext);\n        }\n\n        const errorMessage = `Failed to retrieve signing key`;\n        this.loggerService.logWarning(errorMessage);\n        return throwError(errorMessage);\n      }),\n      catchError((err) => {\n        const errorMessage = `Failed to retrieve signing key with error: ${err}`;\n        this.loggerService.logWarning(errorMessage);\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  private handleResultErrorFromCallback(result: any, isRenewProcess: boolean) {\n    let validationResult = ValidationResult.SecureTokenServerError;\n\n    if ((result.error as string) === 'login_required') {\n      validationResult = ValidationResult.LoginRequired;\n    }\n\n    this.authStateService.updateAndPublishAuthState({\n      authorizationState: AuthorizedState.Unauthorized,\n      validationResult,\n      isRenewProcess,\n    });\n  }\n\n  private historyCleanUpTurnedOn() {\n    const { historyCleanupOff } = this.configurationProvider.getOpenIDConfiguration();\n    return !historyCleanupOff;\n  }\n\n  private resetBrowserHistory() {\n    window.history.replaceState({}, window.document.title, window.location.origin + window.location.pathname);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { LoggerService } from '../../logging/logger.service';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\nimport { ResetAuthDataService } from '../reset-auth-data.service';\n\n@Injectable()\nexport class ImplicitFlowCallbackHandlerService {\n  constructor(\n    private readonly resetAuthDataService: ResetAuthDataService,\n    private readonly loggerService: LoggerService,\n    private readonly flowsDataService: FlowsDataService,\n    @Inject(DOCUMENT) private readonly doc: any\n  ) {}\n\n  // STEP 1 Code Flow\n  // STEP 1 Implicit Flow\n  implicitFlowCallback(hash?: string): Observable<CallbackContext> {\n    const isRenewProcessData = this.flowsDataService.isSilentRenewRunning();\n\n    this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\n    if (!isRenewProcessData) {\n      this.resetAuthDataService.resetAuthorizationData();\n    }\n\n    hash = hash || this.doc.location.hash.substr(1);\n\n    const authResult: any = hash.split('&').reduce((resultData: any, item: string) => {\n      const parts = item.split('=');\n      resultData[parts.shift() as string] = parts.join('=');\n      return resultData;\n    }, {});\n\n    const callbackContext = {\n      code: null,\n      refreshToken: null,\n      state: null,\n      sessionState: null,\n      authResult,\n      isRenewProcess: isRenewProcessData,\n      jwtKeys: null,\n      validationResult: null,\n      existingIdToken: null,\n    };\n\n    return of(callbackContext);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { AuthStateService } from '../../authState/auth-state.service';\nimport { LoggerService } from '../../logging/logger.service';\nimport { TokenValidationService } from '../../validation/token-validation.service';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\n\n@Injectable()\nexport class RefreshSessionCallbackHandlerService {\n  constructor(\n    private readonly loggerService: LoggerService,\n    private readonly authStateService: AuthStateService,\n    private readonly flowsDataService: FlowsDataService\n  ) {}\n\n  // STEP 1 Refresh session\n  refreshSessionWithRefreshTokens(): Observable<CallbackContext> {\n    const stateData = this.flowsDataService.getExistingOrCreateAuthStateControl();\n    this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + stateData);\n    const refreshToken = this.authStateService.getRefreshToken();\n    const idToken = this.authStateService.getIdToken();\n\n    if (refreshToken) {\n      const callbackContext = {\n        code: null,\n        refreshToken,\n        state: stateData,\n        sessionState: null,\n        authResult: null,\n        isRenewProcess: true,\n        jwtKeys: null,\n        validationResult: null,\n        existingIdToken: idToken,\n      };\n\n      this.loggerService.logDebug('found refresh code, obtaining new credentials with refresh code');\n      // Nonce is not used with refresh tokens; but Keycloak may send it anyway\n      this.flowsDataService.setNonce(TokenValidationService.refreshTokenNoncePlaceholder);\n\n      return of(callbackContext);\n    } else {\n      const errorMessage = 'no refresh token found, please login';\n      this.loggerService.logError(errorMessage);\n      return throwError(errorMessage);\n    }\n  }\n}\n","import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError, timer } from 'rxjs';\nimport { catchError, mergeMap, retryWhen, switchMap } from 'rxjs/operators';\nimport { DataService } from '../../api/data.service';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistanceService } from '../../storage/storage-persistance.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { CallbackContext } from '../callback-context';\n\n@Injectable()\nexport class RefreshTokenCallbackHandlerService {\n  constructor(\n    private readonly urlService: UrlService,\n    private readonly loggerService: LoggerService,\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly dataService: DataService,\n    private readonly storagePersistanceService: StoragePersistanceService\n  ) {}\n\n  // STEP 2 Refresh Token\n  refreshTokensRequestTokens(\n    callbackContext: CallbackContext,\n    customParams?: { [key: string]: string | number | boolean }\n  ): Observable<CallbackContext> {\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n    const authWellKnown = this.storagePersistanceService.read('authWellKnownEndPoints');\n    const tokenEndpoint = authWellKnown?.tokenEndpoint;\n    if (!tokenEndpoint) {\n      return throwError('Token Endpoint not defined');\n    }\n\n    const data = this.urlService.createBodyForCodeFlowRefreshTokensRequest(callbackContext.refreshToken, customParams);\n\n    return this.dataService.post(tokenEndpoint, data, headers).pipe(\n      switchMap((response: any) => {\n        this.loggerService.logDebug('token refresh response: ', response);\n        let authResult: any = new Object();\n        authResult = response;\n        authResult.state = callbackContext.state;\n\n        callbackContext.authResult = authResult;\n        return of(callbackContext);\n      }),\n      retryWhen((error) => this.handleRefreshRetry(error)),\n      catchError((error) => {\n        const { stsServer } = this.configurationProvider.getOpenIDConfiguration();\n        const errorMessage = `OidcService code request ${stsServer}`;\n        this.loggerService.logError(errorMessage, error);\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  private handleRefreshRetry(errors: Observable<any>): Observable<any> {\n    return errors.pipe(\n      mergeMap((error) => {\n        // retry token refresh if there is no internet connection\n        if (error && error instanceof HttpErrorResponse && error.error instanceof ProgressEvent && error.error.type === 'error') {\n          const { stsServer, refreshTokenRetryInSeconds } = this.configurationProvider.getOpenIDConfiguration();\n          const errorMessage = `OidcService code request ${stsServer} - no internet connection`;\n          this.loggerService.logWarning(errorMessage, error);\n          return timer(refreshTokenRetryInSeconds * 1000);\n        }\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class EqualityService {\n  isStringEqualOrNonOrderedArrayEqual(value1: string | any[], value2: string | any[]) {\n    if (this.isNullOrUndefined(value1)) {\n      return false;\n    }\n\n    if (this.isNullOrUndefined(value2)) {\n      return false;\n    }\n\n    if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n      return false;\n    }\n\n    if (this.bothValuesAreStrings(value1, value2)) {\n      return value1 === value2;\n    }\n\n    if (this.bothValuesAreArrays(value1, value2)) {\n      return this.arraysHaveEqualContent(value1 as any[], value2 as any[]);\n    }\n\n    return false;\n  }\n\n  areEqual(value1: string | any[] | any | null | undefined, value2: string | any[] | any | null | undefined) {\n    if (!value1 || !value2) {\n      return false;\n    }\n\n    if (this.bothValuesAreArrays(value1, value2)) {\n      return this.arraysStrictEqual(value1 as any[], value2 as any[]);\n    }\n\n    if (this.bothValuesAreStrings(value1, value2)) {\n      return value1 === value2;\n    }\n\n    if (this.bothValuesAreObjects(value1, value2)) {\n      return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\n    }\n\n    if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n      if (Array.isArray(value1) && this.valueIsString(value2)) {\n        return value1[0] === value2;\n      }\n      if (Array.isArray(value2) && this.valueIsString(value1)) {\n        return value2[0] === value1;\n      }\n    }\n  }\n\n  private oneValueIsStringAndTheOtherIsArray(value1: string | any | any[], value2: string | any | any[]) {\n    return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));\n  }\n\n  private bothValuesAreObjects(value1: string | any | any[], value2: string | any | any[]) {\n    return this.valueIsObject(value1) && this.valueIsObject(value2);\n  }\n\n  private bothValuesAreStrings(value1: string | any | any[], value2: string | any | any[]) {\n    return this.valueIsString(value1) && this.valueIsString(value2);\n  }\n\n  private bothValuesAreArrays(value1: string | any | any[], value2: string | any | any[]) {\n    return Array.isArray(value1) && Array.isArray(value2);\n  }\n\n  private valueIsString(value: any) {\n    return typeof value === 'string' || value instanceof String;\n  }\n\n  private valueIsObject(value: any) {\n    return typeof value === 'object';\n  }\n\n  private arraysStrictEqual(arr1: Array<string>, arr2: Array<string>) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    for (let i = arr1.length; i--; ) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private arraysHaveEqualContent(arr1: Array<string>, arr2: Array<string>) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    return arr1.some((v) => arr2.includes(v));\n  }\n\n  private isNullOrUndefined(val: any) {\n    return val === null || val === undefined;\n  }\n}\n","import { ValidationResult } from './validation-result';\n\nexport class StateValidationResult {\n  constructor(\n    public accessToken = '',\n    public idToken = '',\n    public authResponseIsValid = false,\n    public decodedIdToken: any = {},\n    public state: ValidationResult = ValidationResult.NotSet\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { CallbackContext } from '../flows/callback-context';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { EqualityService } from '../utils/equality/equality.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\nimport { StateValidationResult } from './state-validation-result';\nimport { TokenValidationService } from './token-validation.service';\nimport { ValidationResult } from './validation-result';\n\n@Injectable()\nexport class StateValidationService {\n  constructor(\n    private storagePersistanceService: StoragePersistanceService,\n    private tokenValidationService: TokenValidationService,\n    private tokenHelperService: TokenHelperService,\n    private loggerService: LoggerService,\n    private configurationProvider: ConfigurationProvider,\n    private equalityService: EqualityService,\n    private flowHelper: FlowHelper\n  ) {}\n\n  getValidatedStateResult(callbackContext: CallbackContext): StateValidationResult {\n    if (!callbackContext) {\n      return new StateValidationResult('', '', false, {});\n    }\n\n    if (callbackContext.authResult.error) {\n      return new StateValidationResult('', '', false, {});\n    }\n\n    return this.validateState(callbackContext);\n  }\n\n  validateState(callbackContext): StateValidationResult {\n    const toReturn = new StateValidationResult();\n    const authStateControl = this.storagePersistanceService.read('authStateControl');\n\n    if (!this.tokenValidationService.validateStateFromHashCallback(callbackContext.authResult.state, authStateControl)) {\n      this.loggerService.logWarning('authorizedCallback incorrect state');\n      toReturn.state = ValidationResult.StatesDoNotMatch;\n      this.handleUnsuccessfulValidation();\n      return toReturn;\n    }\n\n    const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken();\n    const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow();\n\n    if (isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow) {\n      toReturn.accessToken = callbackContext.authResult.access_token;\n    }\n\n    if (callbackContext.authResult.id_token) {\n      const {\n        clientId,\n        issValidationOff,\n        maxIdTokenIatOffsetAllowedInSeconds,\n        disableIatOffsetValidation,\n        ignoreNonceAfterRefresh,\n      } = this.configurationProvider.getOpenIDConfiguration();\n\n      toReturn.idToken = callbackContext.authResult.id_token;\n\n      toReturn.decodedIdToken = this.tokenHelperService.getPayloadFromToken(toReturn.idToken, false);\n\n      if (!this.tokenValidationService.validateSignatureIdToken(toReturn.idToken, callbackContext.jwtKeys)) {\n        this.loggerService.logDebug('authorizedCallback Signature validation failed id_token');\n        toReturn.state = ValidationResult.SignatureFailed;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      const authNonce = this.storagePersistanceService.read('authNonce');\n\n      if (!this.tokenValidationService.validateIdTokenNonce(toReturn.decodedIdToken, authNonce, ignoreNonceAfterRefresh)) {\n        this.loggerService.logWarning('authorizedCallback incorrect nonce');\n        toReturn.state = ValidationResult.IncorrectNonce;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateRequiredIdToken(toReturn.decodedIdToken)) {\n        this.loggerService.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\n        toReturn.state = ValidationResult.RequiredPropertyMissing;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      if (\n        !this.tokenValidationService.validateIdTokenIatMaxOffset(\n          toReturn.decodedIdToken,\n          maxIdTokenIatOffsetAllowedInSeconds,\n          disableIatOffsetValidation\n        )\n      ) {\n        this.loggerService.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\n        toReturn.state = ValidationResult.MaxOffsetExpired;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n\n      if (authWellKnownEndPoints) {\n        if (issValidationOff) {\n          this.loggerService.logDebug('iss validation is turned off, this is not recommended!');\n        } else if (\n          !issValidationOff &&\n          !this.tokenValidationService.validateIdTokenIss(toReturn.decodedIdToken, authWellKnownEndPoints.issuer)\n        ) {\n          this.loggerService.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\n          toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\n          this.handleUnsuccessfulValidation();\n          return toReturn;\n        }\n      } else {\n        this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n        toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateIdTokenAud(toReturn.decodedIdToken, clientId)) {\n        this.loggerService.logWarning('authorizedCallback incorrect aud');\n        toReturn.state = ValidationResult.IncorrectAud;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateIdTokenAzpExistsIfMoreThanOneAud(toReturn.decodedIdToken)) {\n        this.loggerService.logWarning('authorizedCallback missing azp');\n        toReturn.state = ValidationResult.IncorrectAzp;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateIdTokenAzpValid(toReturn.decodedIdToken, clientId)) {\n        this.loggerService.logWarning('authorizedCallback incorrect azp');\n        toReturn.state = ValidationResult.IncorrectAzp;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      if (!this.isIdTokenAfterRefreshTokenRequestValid(callbackContext, toReturn.decodedIdToken)) {\n        this.loggerService.logWarning('authorizedCallback pre, post id_token claims do not match in refresh');\n        toReturn.state = ValidationResult.IncorrectIdTokenClaimsAfterRefresh;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateIdTokenExpNotExpired(toReturn.decodedIdToken)) {\n        this.loggerService.logWarning('authorizedCallback id token expired');\n        toReturn.state = ValidationResult.TokenExpired;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n    } else {\n      this.loggerService.logDebug('No id_token found, skipping id_token validation');\n    }\n\n    // flow id_token\n    if (!isCurrentFlowImplicitFlowWithAccessToken && !isCurrentFlowCodeFlow) {\n      toReturn.authResponseIsValid = true;\n      toReturn.state = ValidationResult.Ok;\n      this.handleSuccessfulValidation();\n      this.handleUnsuccessfulValidation();\n      return toReturn;\n    }\n\n    // only do check if id_token returned, no always the case when using refresh tokens\n    if (callbackContext.authResult.id_token) {\n      const idTokenHeader = this.tokenHelperService.getHeaderFromToken(toReturn.idToken, false);\n\n      // The at_hash is optional for the code flow\n      if (isCurrentFlowCodeFlow && !(toReturn.decodedIdToken.at_hash as string)) {\n        this.loggerService.logDebug('Code Flow active, and no at_hash in the id_token, skipping check!');\n      } else if (\n        !this.tokenValidationService.validateIdTokenAtHash(\n          toReturn.accessToken,\n          toReturn.decodedIdToken.at_hash,\n          idTokenHeader.alg // 'RSA256'\n        ) ||\n        !toReturn.accessToken\n      ) {\n        this.loggerService.logWarning('authorizedCallback incorrect at_hash');\n        toReturn.state = ValidationResult.IncorrectAtHash;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n    }\n\n    toReturn.authResponseIsValid = true;\n    toReturn.state = ValidationResult.Ok;\n    this.handleSuccessfulValidation();\n    return toReturn;\n  }\n\n  private isIdTokenAfterRefreshTokenRequestValid(callbackContext: CallbackContext, newIdToken: any): boolean {\n    const { useRefreshToken, disableRefreshIdTokenAuthTimeValidation } = this.configurationProvider.getOpenIDConfiguration();\n    if (!useRefreshToken) {\n      return true;\n    }\n\n    if (!callbackContext.existingIdToken) {\n      return true;\n    }\n    const decodedIdToken = this.tokenHelperService.getPayloadFromToken(callbackContext.existingIdToken, false);\n\n    // Upon successful validation of the Refresh Token, the response body is the Token Response of Section 3.1.3.3\n    // except that it might not contain an id_token.\n\n    // If an ID Token is returned as a result of a token refresh request, the following requirements apply:\n\n    // its iss Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n    if (decodedIdToken.iss !== newIdToken.iss) {\n      this.loggerService.logDebug(`iss do not match: ${decodedIdToken.iss} ${newIdToken.iss}`);\n      return false;\n    }\n    // its azp Claim Value MUST be the same as in the ID Token issued when the original authentication occurred;\n    //   if no azp Claim was present in the original ID Token, one MUST NOT be present in the new ID Token, and\n    // otherwise, the same rules apply as apply when issuing an ID Token at the time of the original authentication.\n    if (decodedIdToken.azp !== newIdToken.azp) {\n      this.loggerService.logDebug(`azp do not match: ${decodedIdToken.azp} ${newIdToken.azp}`);\n      return false;\n    }\n    // its sub Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n    if (decodedIdToken.sub !== newIdToken.sub) {\n      this.loggerService.logDebug(`sub do not match: ${decodedIdToken.sub} ${newIdToken.sub}`);\n      return false;\n    }\n\n    // its aud Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n    if (!this.equalityService.isStringEqualOrNonOrderedArrayEqual(decodedIdToken?.aud, newIdToken?.aud)) {\n      this.loggerService.logDebug(`aud in new id_token is not valid: '${decodedIdToken?.aud}' '${newIdToken.aud}'`);\n      return false;\n    }\n\n    if (disableRefreshIdTokenAuthTimeValidation) {\n      return true;\n    }\n\n    // its iat Claim MUST represent the time that the new ID Token is issued,\n    // if the ID Token contains an auth_time Claim, its value MUST represent the time of the original authentication\n    // - not the time that the new ID token is issued,\n    if (decodedIdToken.auth_time !== newIdToken.auth_time) {\n      this.loggerService.logDebug(`auth_time do not match: ${decodedIdToken.auth_time} ${newIdToken.auth_time}`);\n      return false;\n    }\n\n    return true;\n  }\n\n  private handleSuccessfulValidation(): void {\n    const { autoCleanStateAfterAuthentication } = this.configurationProvider.getOpenIDConfiguration();\n    this.storagePersistanceService.write('authNonce', '');\n\n    if (autoCleanStateAfterAuthentication) {\n      this.storagePersistanceService.write('authStateControl', '');\n    }\n    this.loggerService.logDebug('AuthorizedCallback token(s) validated, continue');\n  }\n\n  private handleUnsuccessfulValidation(): void {\n    const { autoCleanStateAfterAuthentication } = this.configurationProvider.getOpenIDConfiguration();\n    this.storagePersistanceService.write('authNonce', '');\n\n    if (autoCleanStateAfterAuthentication) {\n      this.storagePersistanceService.write('authStateControl', '');\n    }\n    this.loggerService.logDebug('AuthorizedCallback token(s) invalid');\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { AuthStateService } from '../../authState/auth-state.service';\nimport { AuthorizedState } from '../../authState/authorized-state';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StateValidationResult } from '../../validation/state-validation-result';\nimport { StateValidationService } from '../../validation/state-validation.service';\nimport { CallbackContext } from '../callback-context';\nimport { ResetAuthDataService } from '../reset-auth-data.service';\n\n@Injectable()\nexport class StateValidationCallbackHandlerService {\n  constructor(\n    private readonly loggerService: LoggerService,\n    private readonly stateValidationService: StateValidationService,\n    private readonly authStateService: AuthStateService,\n    private readonly resetAuthDataService: ResetAuthDataService,\n    @Inject(DOCUMENT) private readonly doc: any\n  ) {}\n\n  // STEP 4 All flows\n\n  callbackStateValidation(callbackContext: CallbackContext): Observable<CallbackContext> {\n    const validationResult = this.stateValidationService.getValidatedStateResult(callbackContext);\n    callbackContext.validationResult = validationResult;\n\n    if (validationResult.authResponseIsValid) {\n      this.authStateService.setAuthorizationData(validationResult.accessToken, callbackContext.authResult);\n      return of(callbackContext);\n    } else {\n      const errorMessage = `authorizedCallback, token(s) validation failed, resetting. Hash: ${this.doc.location.hash}`;\n      this.loggerService.logWarning(errorMessage);\n      this.resetAuthDataService.resetAuthorizationData();\n      this.publishUnauthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n      return throwError(errorMessage);\n    }\n  }\n\n  private publishUnauthorizedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean) {\n    this.authStateService.updateAndPublishAuthState({\n      authorizationState: AuthorizedState.Unauthorized,\n      validationResult: stateValidationResult.state,\n      isRenewProcess,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { AuthStateService } from '../../authState/auth-state.service';\nimport { AuthorizedState } from '../../authState/authorized-state';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { UserService } from '../../userData/user-service';\nimport { StateValidationResult } from '../../validation/state-validation-result';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\nimport { ResetAuthDataService } from '../reset-auth-data.service';\n\n@Injectable()\nexport class UserCallbackHandlerService {\n  constructor(\n    private readonly loggerService: LoggerService,\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly authStateService: AuthStateService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly userService: UserService,\n    private readonly resetAuthDataService: ResetAuthDataService\n  ) {}\n\n  // STEP 5 userData\n  callbackUser(callbackContext: CallbackContext): Observable<CallbackContext> {\n    const { isRenewProcess, validationResult, authResult, refreshToken } = callbackContext;\n    const { autoUserinfo, renewUserInfoAfterTokenRenew } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!autoUserinfo) {\n      if (!isRenewProcess || renewUserInfoAfterTokenRenew) {\n        // userData is set to the id_token decoded, auto get user data set to false\n        if (validationResult.decodedIdToken) {\n          this.userService.setUserDataToStore(validationResult.decodedIdToken);\n        }\n      }\n\n      if (!isRenewProcess && !refreshToken) {\n        this.flowsDataService.setSessionState(authResult.session_state);\n      }\n\n      this.publishAuthorizedState(validationResult, isRenewProcess);\n      return of(callbackContext);\n    }\n\n    return this.userService.getAndPersistUserDataInStore(isRenewProcess, validationResult.idToken, validationResult.decodedIdToken).pipe(\n      switchMap((userData) => {\n        if (!!userData) {\n          if (!refreshToken) {\n            this.flowsDataService.setSessionState(authResult.session_state);\n          }\n\n          this.publishAuthorizedState(validationResult, isRenewProcess);\n\n          return of(callbackContext);\n        } else {\n          this.resetAuthDataService.resetAuthorizationData();\n          this.publishUnauthorizedState(validationResult, isRenewProcess);\n          const errorMessage = `Called for userData but they were ${userData}`;\n          this.loggerService.logWarning(errorMessage);\n          return throwError(errorMessage);\n        }\n      }),\n      catchError((err) => {\n        const errorMessage = `Failed to retrieve user info with error:  ${err}`;\n        this.loggerService.logWarning(errorMessage);\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  private publishAuthorizedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean) {\n    this.authStateService.updateAndPublishAuthState({\n      authorizationState: AuthorizedState.Authorized,\n      validationResult: stateValidationResult.state,\n      isRenewProcess,\n    });\n  }\n\n  private publishUnauthorizedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean) {\n    this.authStateService.updateAndPublishAuthState({\n      authorizationState: AuthorizedState.Unauthorized,\n      validationResult: stateValidationResult.state,\n      isRenewProcess,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { switchMap } from 'rxjs/operators';\nimport { CallbackContext } from './callback-context';\nimport { CodeFlowCallbackHandlerService } from './callback-handling/code-flow-callback-handler.service';\nimport { HistoryJwtKeysCallbackHandlerService } from './callback-handling/history-jwt-keys-callback-handler.service';\nimport { ImplicitFlowCallbackHandlerService } from './callback-handling/implicit-flow-callback-handler.service';\nimport { RefreshSessionCallbackHandlerService } from './callback-handling/refresh-session-callback-handler.service';\nimport { RefreshTokenCallbackHandlerService } from './callback-handling/refresh-token-callback-handler.service';\nimport { StateValidationCallbackHandlerService } from './callback-handling/state-validation-callback-handler.service';\nimport { UserCallbackHandlerService } from './callback-handling/user-callback-handler.service';\n\n@Injectable()\nexport class FlowsService {\n  constructor(\n    private readonly codeFlowCallbackHandlerService: CodeFlowCallbackHandlerService,\n    private readonly implicitFlowCallbackHandlerService: ImplicitFlowCallbackHandlerService,\n    private readonly historyJwtKeysCallbackHandlerService: HistoryJwtKeysCallbackHandlerService,\n    private readonly userHandlerService: UserCallbackHandlerService,\n    private readonly stateValidationCallbackHandlerService: StateValidationCallbackHandlerService,\n    private readonly refreshSessionCallbackHandlerService: RefreshSessionCallbackHandlerService,\n    private readonly refreshTokenCallbackHandlerService: RefreshTokenCallbackHandlerService\n  ) {}\n\n  processCodeFlowCallback(urlToCheck: string) {\n    return this.codeFlowCallbackHandlerService.codeFlowCallback(urlToCheck).pipe(\n      switchMap((callbackContext) => this.codeFlowCallbackHandlerService.codeFlowCodeRequest(callbackContext)),\n      switchMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext)),\n      switchMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext)),\n      switchMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext))\n    );\n  }\n\n  processSilentRenewCodeFlowCallback(firstContext: CallbackContext) {\n    return this.codeFlowCallbackHandlerService.codeFlowCodeRequest(firstContext).pipe(\n      switchMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext)),\n      switchMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext)),\n      switchMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext))\n    );\n  }\n\n  processImplicitFlowCallback(hash?: string) {\n    return this.implicitFlowCallbackHandlerService.implicitFlowCallback(hash).pipe(\n      switchMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext)),\n      switchMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext)),\n      switchMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext))\n    );\n  }\n\n  processRefreshToken(customParams?: { [key: string]: string | number | boolean }) {\n    return this.refreshSessionCallbackHandlerService.refreshSessionWithRefreshTokens().pipe(\n      switchMap((callbackContext) => this.refreshTokenCallbackHandlerService.refreshTokensRequestTokens(callbackContext, customParams)),\n      switchMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext)),\n      switchMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext)),\n      switchMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext))\n    );\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class IntervallService {\n  runTokenValidationRunning: Subscription = null;\n\n  constructor(private zone: NgZone) {}\n\n  stopPeriodicallTokenCheck(): void {\n    if (this.runTokenValidationRunning) {\n      this.runTokenValidationRunning.unsubscribe();\n      this.runTokenValidationRunning = null;\n    }\n  }\n\n  startPeriodicTokenCheck(repeatAfterSeconds: number) {\n    const millisecondsDelayBetweenTokenCheck = repeatAfterSeconds * 1000;\n\n    return new Observable((subscriber) => {\n      let intervalId;\n      this.zone.runOutsideAngular(() => {\n        intervalId = setInterval(() => subscriber.next(), millisecondsDelayBetweenTokenCheck);\n      });\n\n      return () => {\n        clearInterval(intervalId);\n      };\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { FlowsService } from '../flows/flows.service';\nimport { IntervallService } from './intervall.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ImplicitFlowCallbackService {\n  constructor(\n    private flowsService: FlowsService,\n    private configurationProvider: ConfigurationProvider,\n    private router: Router,\n    private flowsDataService: FlowsDataService,\n    private intervalService: IntervallService\n  ) {}\n\n  authorizedImplicitFlowCallback(hash?: string) {\n    const isRenewProcess = this.flowsDataService.isSilentRenewRunning();\n    const { triggerAuthorizationResultEvent, postLoginRoute, unauthorizedRoute } = this.configurationProvider.getOpenIDConfiguration();\n\n    return this.flowsService.processImplicitFlowCallback(hash).pipe(\n      tap((callbackContext) => {\n        if (!triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\n          this.router.navigate([postLoginRoute]);\n        }\n      }),\n      catchError((error) => {\n        this.flowsDataService.resetSilentRenewRunning();\n        this.intervalService.stopPeriodicallTokenCheck();\n        if (!triggerAuthorizationResultEvent && !isRenewProcess) {\n          this.router.navigate([unauthorizedRoute]);\n        }\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { FlowsService } from '../flows/flows.service';\nimport { IntervallService } from './intervall.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CodeFlowCallbackService {\n  constructor(\n    private flowsService: FlowsService,\n    private flowsDataService: FlowsDataService,\n    private intervallService: IntervallService,\n    private configurationProvider: ConfigurationProvider,\n    private router: Router\n  ) {}\n\n  authorizedCallbackWithCode(urlToCheck: string) {\n    const isRenewProcess = this.flowsDataService.isSilentRenewRunning();\n    const { triggerAuthorizationResultEvent, postLoginRoute, unauthorizedRoute } = this.configurationProvider.getOpenIDConfiguration();\n\n    return this.flowsService.processCodeFlowCallback(urlToCheck).pipe(\n      tap((callbackContext) => {\n        if (!triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\n          this.router.navigate([postLoginRoute]);\n        }\n      }),\n      catchError((error) => {\n        this.flowsDataService.resetSilentRenewRunning();\n        this.intervallService.stopPeriodicallTokenCheck();\n        if (!triggerAuthorizationResultEvent && !isRenewProcess) {\n          this.router.navigate([unauthorizedRoute]);\n        }\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CallbackContext } from '../flows/callback-context';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { UrlService } from '../utils/url/url.service';\nimport { CodeFlowCallbackService } from './code-flow-callback.service';\nimport { ImplicitFlowCallbackService } from './implicit-flow-callback.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CallbackService {\n  private stsCallbackInternal$ = new Subject();\n\n  get stsCallback$() {\n    return this.stsCallbackInternal$.asObservable();\n  }\n\n  constructor(\n    private urlService: UrlService,\n    private flowHelper: FlowHelper,\n    private implicitFlowCallbackService: ImplicitFlowCallbackService,\n    private codeFlowCallbackService: CodeFlowCallbackService\n  ) {}\n\n  isCallback(currentUrl: string): boolean {\n    return this.urlService.isCallbackFromSts(currentUrl);\n  }\n\n  handleCallbackAndFireEvents(currentCallbackUrl: string): Observable<CallbackContext> {\n    let callback$: Observable<any>;\n\n    if (this.flowHelper.isCurrentFlowCodeFlow()) {\n      callback$ = this.codeFlowCallbackService.authorizedCallbackWithCode(currentCallbackUrl);\n    } else if (this.flowHelper.isCurrentFlowAnyImplicitFlow()) {\n      callback$ = this.implicitFlowCallbackService.authorizedImplicitFlowCallback();\n    }\n\n    return callback$.pipe(tap(() => this.stsCallbackInternal$.next()));\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { LoggerService } from '../logging/logger.service';\n\n@Injectable()\nexport class IFrameService {\n  constructor(@Inject(DOCUMENT) private readonly doc: any, private loggerService: LoggerService) {}\n\n  getExistingIFrame(identifier: string): HTMLIFrameElement | null {\n    const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\n    if (this.isIFrameElement(iFrameOnParent)) {\n      return iFrameOnParent;\n    }\n\n    const iFrameOnSelf = this.getIFrameFromWindow(identifier);\n    if (this.isIFrameElement(iFrameOnSelf)) {\n      return iFrameOnSelf;\n    }\n    return null;\n  }\n\n  addIFrameToWindowBody(identifier: string): HTMLIFrameElement {\n    const sessionIframe = this.doc.createElement('iframe');\n    sessionIframe.id = identifier;\n    sessionIframe.title = identifier;\n    this.loggerService.logDebug(sessionIframe);\n    sessionIframe.style.display = 'none';\n    this.doc.body.appendChild(sessionIframe);\n    return sessionIframe;\n  }\n\n  private getIFrameFromParentWindow(identifier: string): HTMLIFrameElement | null {\n    try {\n      const iFrameElement = this.doc.defaultView.parent.document.getElementById(identifier);\n      if (this.isIFrameElement(iFrameElement)) {\n        return iFrameElement;\n      }\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  private getIFrameFromWindow(identifier: string): HTMLIFrameElement | null {\n    const iFrameElement = this.doc.getElementById(identifier);\n    if (this.isIFrameElement(iFrameElement)) {\n      return iFrameElement;\n    }\n    return null;\n  }\n\n  private isIFrameElement(element: HTMLElement | null): element is HTMLIFrameElement {\n    return !!element && element instanceof HTMLIFrameElement;\n  }\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { of, Subject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { AuthorizedState } from '../authState/authorized-state';\nimport { ImplicitFlowCallbackService } from '../callback/implicit-flow-callback.service';\nimport { IntervallService } from '../callback/intervall.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { CallbackContext } from '../flows/callback-context';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { FlowsService } from '../flows/flows.service';\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { ValidationResult } from '../validation/validation-result';\nimport { IFrameService } from './existing-iframe.service';\n\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\n\n@Injectable()\nexport class SilentRenewService {\n  private refreshSessionWithIFrameCompletedInternal$ = new Subject<CallbackContext>();\n\n  get refreshSessionWithIFrameCompleted$() {\n    return this.refreshSessionWithIFrameCompletedInternal$.asObservable();\n  }\n\n  constructor(\n    private configurationProvider: ConfigurationProvider,\n    private iFrameService: IFrameService,\n    private flowsService: FlowsService,\n    private resetAuthDataService: ResetAuthDataService,\n    private flowsDataService: FlowsDataService,\n    private authStateService: AuthStateService,\n    private loggerService: LoggerService,\n    private flowHelper: FlowHelper,\n    private implicitFlowCallbackService: ImplicitFlowCallbackService,\n    private intervalService: IntervallService\n  ) {}\n\n  getOrCreateIframe(): HTMLIFrameElement {\n    const existingIframe = this.getExistingIframe();\n\n    if (!existingIframe) {\n      return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n    }\n\n    return existingIframe;\n  }\n\n  isSilentRenewConfigured() {\n    const { useRefreshToken, silentRenew } = this.configurationProvider.getOpenIDConfiguration();\n    return !useRefreshToken && silentRenew;\n  }\n\n  codeFlowCallbackSilentRenewIframe(urlParts) {\n    const params = new HttpParams({\n      fromString: urlParts[1],\n    });\n\n    const error = params.get('error');\n\n    if (error) {\n      this.authStateService.updateAndPublishAuthState({\n        authorizationState: AuthorizedState.Unauthorized,\n        validationResult: ValidationResult.LoginRequired,\n        isRenewProcess: true,\n      });\n      this.resetAuthDataService.resetAuthorizationData();\n      this.flowsDataService.setNonce('');\n      this.intervalService.stopPeriodicallTokenCheck();\n      return throwError(error);\n    }\n\n    const code = params.get('code');\n    const state = params.get('state');\n    const sessionState = params.get('session_state');\n\n    const callbackContext = {\n      code,\n      refreshToken: null,\n      state,\n      sessionState,\n      authResult: null,\n      isRenewProcess: true,\n      jwtKeys: null,\n      validationResult: null,\n      existingIdToken: null,\n    };\n\n    return this.flowsService.processSilentRenewCodeFlowCallback(callbackContext).pipe(\n      catchError((errorFromFlow) => {\n        this.intervalService.stopPeriodicallTokenCheck();\n        this.resetAuthDataService.resetAuthorizationData();\n        return throwError(errorFromFlow);\n      })\n    );\n  }\n\n  silentRenewEventHandler(e: CustomEvent) {\n    this.loggerService.logDebug('silentRenewEventHandler');\n    if (!e.detail) {\n      return;\n    }\n\n    let callback$ = of(null);\n\n    const isCodeFlow = this.flowHelper.isCurrentFlowCodeFlow();\n\n    if (isCodeFlow) {\n      const urlParts = e.detail.toString().split('?');\n      callback$ = this.codeFlowCallbackSilentRenewIframe(urlParts);\n    } else {\n      callback$ = this.implicitFlowCallbackService.authorizedImplicitFlowCallback(e.detail);\n    }\n\n    callback$.subscribe(\n      (callbackContext) => {\n        this.refreshSessionWithIFrameCompletedInternal$.next(callbackContext);\n        this.flowsDataService.resetSilentRenewRunning();\n      },\n      (err: any) => {\n        this.loggerService.logError('Error: ' + err);\n        this.refreshSessionWithIFrameCompletedInternal$.next(null);\n        this.flowsDataService.resetSilentRenewRunning();\n      }\n    );\n  }\n\n  private getExistingIframe() {\n    return this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, Renderer2, RendererFactory2 } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { LoggerService } from '../logging/logger.service';\nimport { UrlService } from '../utils/url/url.service';\nimport { SilentRenewService } from './silent-renew.service';\n\n@Injectable({ providedIn: 'root' })\nexport class RefreshSessionIframeService {\n  private renderer: Renderer2;\n\n  constructor(\n    @Inject(DOCUMENT) private readonly doc: any,\n    private loggerService: LoggerService,\n    private urlService: UrlService,\n    private silentRenewService: SilentRenewService,\n    rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  refreshSessionWithIframe(customParams?: { [key: string]: string | number | boolean }): Observable<boolean> {\n    this.loggerService.logDebug('BEGIN refresh session Authorize Iframe renew');\n    const url = this.urlService.getRefreshSessionSilentRenewUrl(customParams);\n    return this.sendAuthorizeRequestUsingSilentRenew(url);\n  }\n\n  private sendAuthorizeRequestUsingSilentRenew(url: string): Observable<boolean> {\n    const sessionIframe = this.silentRenewService.getOrCreateIframe();\n    this.initSilentRenewRequest();\n    this.loggerService.logDebug('sendAuthorizeRequestUsingSilentRenew for URL:' + url);\n\n    return new Observable((observer) => {\n      const onLoadHandler = () => {\n        sessionIframe.removeEventListener('load', onLoadHandler);\n        this.loggerService.logDebug('removed event listener from IFrame');\n        observer.next(true);\n        observer.complete();\n      };\n      sessionIframe.addEventListener('load', onLoadHandler);\n      sessionIframe.contentWindow.location.replace(url);\n    });\n  }\n\n  private initSilentRenewRequest() {\n    const instanceId = Math.random();\n\n    const initDestroyHandler = this.renderer.listen('window', 'oidc-silent-renew-init', (e: CustomEvent) => {\n      if (e.detail !== instanceId) {\n        initDestroyHandler();\n        renewDestroyHandler();\n      }\n    });\n    const renewDestroyHandler = this.renderer.listen('window', 'oidc-silent-renew-message', (e) =>\n      this.silentRenewService.silentRenewEventHandler(e)\n    );\n\n    this.doc.defaultView.dispatchEvent(\n      new CustomEvent('oidc-silent-renew-init', {\n        detail: instanceId,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { FlowsService } from '../flows/flows.service';\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { IntervallService } from './intervall.service';\n\n@Injectable({ providedIn: 'root' })\nexport class RefreshSessionRefreshTokenService {\n  constructor(\n    private loggerService: LoggerService,\n    private resetAuthDataService: ResetAuthDataService,\n    private flowsService: FlowsService,\n    private intervalService: IntervallService\n  ) {}\n\n  refreshSessionWithRefreshTokens(customParams?: { [key: string]: string | number | boolean }) {\n    this.loggerService.logDebug('BEGIN refresh session Authorize');\n\n    return this.flowsService.processRefreshToken(customParams).pipe(\n      catchError((error) => {\n        this.intervalService.stopPeriodicallTokenCheck();\n        this.resetAuthDataService.resetAuthorizationData();\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\nimport { RefreshSessionIframeService } from '../iframe/refresh-session-iframe.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { UserService } from '../userData/user-service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { IntervallService } from './intervall.service';\nimport { RefreshSessionRefreshTokenService } from './refresh-session-refresh-token.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PeriodicallyTokenCheckService {\n  constructor(\n    private resetAuthDataService: ResetAuthDataService,\n    private flowHelper: FlowHelper,\n    private configurationProvider: ConfigurationProvider,\n    private flowsDataService: FlowsDataService,\n    private loggerService: LoggerService,\n    private userService: UserService,\n    private authStateService: AuthStateService,\n    private refreshSessionIframeService: RefreshSessionIframeService,\n    private refreshSessionRefreshTokenService: RefreshSessionRefreshTokenService,\n    private intervalService: IntervallService,\n    private storagePersistanceService: StoragePersistanceService\n  ) {}\n\n  startTokenValidationPeriodically(repeatAfterSeconds: number) {\n    const { silentRenew } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!!this.intervalService.runTokenValidationRunning || !silentRenew) {\n      return;\n    }\n\n    this.loggerService.logDebug(`starting token validation check every ${repeatAfterSeconds}s`);\n\n    const periodicallyCheck$ = this.intervalService.startPeriodicTokenCheck(repeatAfterSeconds).pipe(\n      switchMap(() => {\n        const idToken = this.authStateService.getIdToken();\n        const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning();\n        const userDataFromStore = this.userService.getUserDataFromStore();\n\n        this.loggerService.logDebug(\n          `Checking: silentRenewRunning: ${isSilentRenewRunning} id_token: ${!!idToken} userData: ${!!userDataFromStore}`\n        );\n\n        const shouldBeExecuted = userDataFromStore && !isSilentRenewRunning && idToken;\n\n        if (!shouldBeExecuted) {\n          return of(null);\n        }\n\n        const idTokenHasExpired = this.authStateService.hasIdTokenExpired();\n        const accessTokenHasExpired = this.authStateService.hasAccessTokenExpiredIfExpiryExists();\n\n        if (!idTokenHasExpired && !accessTokenHasExpired) {\n          return of(null);\n        }\n\n        const config = this.configurationProvider.getOpenIDConfiguration();\n\n        if (!config?.silentRenew) {\n          this.resetAuthDataService.resetAuthorizationData();\n          return of(null);\n        }\n\n        this.loggerService.logDebug('starting silent renew...');\n\n        this.flowsDataService.setSilentRenewRunning();\n\n        // Retrieve Dynamically Set Custom Params\n        const customParams: { [key: string]: string | number | boolean } = this.storagePersistanceService.read(\n          'storageCustomRequestParams'\n        );\n\n        if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens()) {\n          // Refresh Session using Refresh tokens\n          return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(customParams);\n        }\n\n        return this.refreshSessionIframeService.refreshSessionWithIframe(customParams);\n      })\n    );\n\n    this.intervalService.runTokenValidationRunning = periodicallyCheck$\n      .pipe(\n        catchError(() => {\n          this.flowsDataService.resetSilentRenewRunning();\n          return throwError('periodically check failed');\n        })\n      )\n      .subscribe(\n        () => {\n          this.loggerService.logDebug('silent renew, periodic check finished!');\n          if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens()) {\n            this.flowsDataService.resetSilentRenewRunning();\n          }\n        },\n        (err) => {\n          this.loggerService.logError('silent renew failed!', err);\n        }\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { map, retry } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\n\nconst WELL_KNOWN_SUFFIX = `/.well-known/openid-configuration`;\n\n@Injectable()\nexport class AuthWellKnownDataService {\n  constructor(private readonly http: DataService) {}\n\n  getWellKnownEndPointsFromUrl(authWellknownEndpoint: string) {\n    return this.getWellKnownDocument(authWellknownEndpoint).pipe(\n      map(\n        (wellKnownEndpoints) =>\n          ({\n            issuer: wellKnownEndpoints.issuer,\n            jwksUri: wellKnownEndpoints.jwks_uri,\n            authorizationEndpoint: wellKnownEndpoints.authorization_endpoint,\n            tokenEndpoint: wellKnownEndpoints.token_endpoint,\n            userinfoEndpoint: wellKnownEndpoints.userinfo_endpoint,\n            endSessionEndpoint: wellKnownEndpoints.end_session_endpoint,\n            checkSessionIframe: wellKnownEndpoints.check_session_iframe,\n            revocationEndpoint: wellKnownEndpoints.revocation_endpoint,\n            introspectionEndpoint: wellKnownEndpoints.introspection_endpoint,\n            parEndpoint: wellKnownEndpoints.pushed_authorization_request_endpoint,\n          } as AuthWellKnownEndpoints)\n      )\n    );\n  }\n\n  private getWellKnownDocument(wellKnownEndpoint: string) {\n    let url = wellKnownEndpoint;\n\n    if (!wellKnownEndpoint.includes(WELL_KNOWN_SUFFIX)) {\n      url = `${wellKnownEndpoint}${WELL_KNOWN_SUFFIX}`;\n    }\n\n    return this.http.get<any>(url).pipe(retry(2));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { AuthWellKnownDataService } from './auth-well-known-data.service';\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\nimport { PublicConfiguration } from './public-configuration';\n\n@Injectable()\nexport class AuthWellKnownService {\n  constructor(\n    private publicEventsService: PublicEventsService,\n    private dataService: AuthWellKnownDataService,\n    private storagePersistanceService: StoragePersistanceService\n  ) {}\n\n  getAuthWellKnownEndPoints(authWellknownEndpointUrl: string) {\n    const alreadySavedWellKnownEndpoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    if (!!alreadySavedWellKnownEndpoints) {\n      return of(alreadySavedWellKnownEndpoints);\n    }\n\n    return this.getWellKnownEndPointsFromUrl(authWellknownEndpointUrl).pipe(\n      tap((mappedWellKnownEndpoints) => this.storeWellKnownEndpoints(mappedWellKnownEndpoints)),\n      catchError((error) => {\n        this.publicEventsService.fireEvent<PublicConfiguration>(EventTypes.ConfigLoadingFailed, null);\n        return throwError(error);\n      })\n    );\n  }\n\n  storeWellKnownEndpoints(mappedWellKnownEndpoints: AuthWellKnownEndpoints) {\n    this.storagePersistanceService.write('authWellKnownEndPoints', mappedWellKnownEndpoints);\n  }\n\n  private getWellKnownEndPointsFromUrl(authWellknownEndpoint: string) {\n    return this.dataService.getWellKnownEndPointsFromUrl(authWellknownEndpoint);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { forkJoin, Observable, of, throwError, TimeoutError, timer } from 'rxjs';\nimport { map, mergeMap, retryWhen, switchMap, take, timeout } from 'rxjs/operators';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { AuthWellKnownService } from '../config/auth-well-known.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { RefreshSessionIframeService } from '../iframe/refresh-session-iframe.service';\nimport { SilentRenewService } from '../iframe/silent-renew.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { RefreshSessionRefreshTokenService } from './refresh-session-refresh-token.service';\n\nexport const MAX_RETRY_ATTEMPTS = 3;\n@Injectable({ providedIn: 'root' })\nexport class RefreshSessionService {\n  constructor(\n    private flowHelper: FlowHelper,\n    private configurationProvider: ConfigurationProvider,\n    private flowsDataService: FlowsDataService,\n    private loggerService: LoggerService,\n    private silentRenewService: SilentRenewService,\n    private authStateService: AuthStateService,\n    private authWellKnownService: AuthWellKnownService,\n    private refreshSessionIframeService: RefreshSessionIframeService,\n    private refreshSessionRefreshTokenService: RefreshSessionRefreshTokenService\n  ) {}\n\n  forceRefreshSession(customParams?: { [key: string]: string | number | boolean }) {\n    if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens()) {\n      return this.startRefreshSession(customParams).pipe(\n        map(() => {\n          const isAuthenticated = this.authStateService.areAuthStorageTokensValid();\n          if (isAuthenticated) {\n            return {\n              idToken: this.authStateService.getIdToken(),\n              accessToken: this.authStateService.getAccessToken(),\n            };\n          }\n\n          return null;\n        })\n      );\n    }\n\n    const { silentRenewTimeoutInSeconds } = this.configurationProvider.getOpenIDConfiguration();\n    const timeOutTime = silentRenewTimeoutInSeconds * 1000;\n\n    return forkJoin([\n      this.startRefreshSession(customParams),\n      this.silentRenewService.refreshSessionWithIFrameCompleted$.pipe(take(1)),\n    ]).pipe(\n      timeout(timeOutTime),\n      retryWhen(this.timeoutRetryStrategy.bind(this)),\n      map(([_, callbackContext]) => {\n        const isAuthenticated = this.authStateService.areAuthStorageTokensValid();\n        if (isAuthenticated) {\n          return {\n            idToken: callbackContext?.authResult?.id_token,\n            accessToken: callbackContext?.authResult?.access_token,\n          };\n        }\n\n        return null;\n      })\n    );\n  }\n\n  private startRefreshSession(customParams?: { [key: string]: string | number | boolean }) {\n    const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning();\n    this.loggerService.logDebug(`Checking: silentRenewRunning: ${isSilentRenewRunning}`);\n    const shouldBeExecuted = !isSilentRenewRunning;\n\n    if (!shouldBeExecuted) {\n      return of(null);\n    }\n\n    const { authWellknownEndpoint } = this.configurationProvider.getOpenIDConfiguration() || {};\n\n    if (!authWellknownEndpoint) {\n      this.loggerService.logError('no authwellknownendpoint given!');\n      return of(null);\n    }\n\n    return this.authWellKnownService.getAuthWellKnownEndPoints(authWellknownEndpoint).pipe(\n      switchMap(() => {\n        this.flowsDataService.setSilentRenewRunning();\n\n        if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens()) {\n          // Refresh Session using Refresh tokens\n          return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(customParams);\n        }\n\n        return this.refreshSessionIframeService.refreshSessionWithIframe(customParams);\n      })\n    );\n  }\n\n  private timeoutRetryStrategy(errorAttempts: Observable<any>) {\n    return errorAttempts.pipe(\n      mergeMap((error, index) => {\n        const scalingDuration = 1000;\n        const currentAttempt = index + 1;\n\n        if (!(error instanceof TimeoutError) || currentAttempt > MAX_RETRY_ATTEMPTS) {\n          return throwError(error);\n        }\n\n        this.loggerService.logDebug(`forceRefreshSession timeout. Attempt #${currentAttempt}`);\n\n        this.flowsDataService.resetSilentRenewRunning();\n        return timer(currentAttempt * scalingDuration);\n      })\n    );\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { IFrameService } from './existing-iframe.service';\n\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\n\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\n\n@Injectable()\nexport class CheckSessionService {\n  private checkSessionReceived = false;\n  private scheduledHeartBeatRunning: any;\n  private lastIFrameRefresh = 0;\n  private outstandingMessages = 0;\n  private heartBeatInterval = 3000;\n  private iframeRefreshInterval = 60000;\n  private checkSessionChangedInternal$ = new BehaviorSubject<boolean>(false);\n\n  get checkSessionChanged$() {\n    return this.checkSessionChangedInternal$.asObservable();\n  }\n\n  constructor(\n    private storagePersistanceService: StoragePersistanceService,\n    private loggerService: LoggerService,\n    private iFrameService: IFrameService,\n    private eventService: PublicEventsService,\n    private configurationProvider: ConfigurationProvider,\n    private zone: NgZone\n  ) {}\n\n  isCheckSessionConfigured() {\n    const { startCheckSession } = this.configurationProvider.getOpenIDConfiguration();\n    return startCheckSession;\n  }\n\n  start(): void {\n    if (!!this.scheduledHeartBeatRunning) {\n      return;\n    }\n\n    const { clientId } = this.configurationProvider.getOpenIDConfiguration();\n    this.pollServerSession(clientId);\n  }\n\n  stop(): void {\n    if (!this.scheduledHeartBeatRunning) {\n      return;\n    }\n\n    this.clearScheduledHeartBeat();\n    this.checkSessionReceived = false;\n  }\n\n  serverStateChanged() {\n    const { startCheckSession } = this.configurationProvider.getOpenIDConfiguration();\n    return startCheckSession && this.checkSessionReceived;\n  }\n\n  getExistingIframe() {\n    return this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n  }\n\n  private init(): Observable<any> {\n    if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\n      return of(undefined);\n    }\n\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n\n    if (!authWellKnownEndPoints) {\n      this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined. Returning.');\n      return of();\n    }\n\n    const existingIframe = this.getOrCreateIframe();\n    const checkSessionIframe = authWellKnownEndPoints.checkSessionIframe;\n\n    if (checkSessionIframe) {\n      existingIframe.contentWindow.location.replace(checkSessionIframe);\n    } else {\n      this.loggerService.logWarning('init check session: checkSessionIframe is not configured to run');\n    }\n\n    return new Observable((observer) => {\n      existingIframe.onload = () => {\n        this.lastIFrameRefresh = Date.now();\n        observer.next();\n        observer.complete();\n      };\n    });\n  }\n\n  private pollServerSession(clientId: string) {\n    this.outstandingMessages = 0;\n    const pollServerSessionRecur = () => {\n      this.init()\n        .pipe(take(1))\n        .subscribe(() => {\n          const existingIframe = this.getExistingIframe();\n          if (existingIframe && clientId) {\n            this.loggerService.logDebug(existingIframe);\n            const sessionState = this.storagePersistanceService.read('session_state');\n            const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n\n            if (sessionState && authWellKnownEndPoints?.checkSessionIframe) {\n              const iframeOrigin = new URL(authWellKnownEndPoints.checkSessionIframe)?.origin;\n              this.outstandingMessages++;\n              existingIframe.contentWindow.postMessage(clientId + ' ' + sessionState, iframeOrigin);\n            } else {\n              this.loggerService.logDebug(`OidcSecurityCheckSession pollServerSession session_state is '${sessionState}'`);\n              this.loggerService.logDebug(`AuthWellKnownEndPoints is '${JSON.stringify(authWellKnownEndPoints)}'`);\n              this.checkSessionChangedInternal$.next(true);\n            }\n          } else {\n            this.loggerService.logWarning('OidcSecurityCheckSession pollServerSession checkSession IFrame does not exist');\n            this.loggerService.logDebug(clientId);\n            this.loggerService.logDebug(existingIframe);\n          }\n\n          // after sending three messages with no response, fail.\n          if (this.outstandingMessages > 3) {\n            this.loggerService.logError(\n              `OidcSecurityCheckSession not receiving check session response messages.\n                            Outstanding messages: ${this.outstandingMessages}. Server unreachable?`\n            );\n          }\n\n          this.zone.runOutsideAngular(() => {\n            this.scheduledHeartBeatRunning = setTimeout(() => this.zone.run(pollServerSessionRecur), this.heartBeatInterval);\n          });\n        });\n    };\n\n    pollServerSessionRecur();\n  }\n\n  private clearScheduledHeartBeat() {\n    clearTimeout(this.scheduledHeartBeatRunning);\n    this.scheduledHeartBeatRunning = null;\n  }\n\n  private messageHandler(e: any) {\n    const existingIFrame = this.getExistingIframe();\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    const startsWith = !!authWellKnownEndPoints?.checkSessionIframe?.startsWith(e.origin);\n    this.outstandingMessages = 0;\n    if (existingIFrame && startsWith && e.source === existingIFrame.contentWindow) {\n      if (e.data === 'error') {\n        this.loggerService.logWarning('error from checksession messageHandler');\n      } else if (e.data === 'changed') {\n        this.loggerService.logDebug(e);\n        this.checkSessionReceived = true;\n        this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\n        this.checkSessionChangedInternal$.next(true);\n      } else {\n        this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\n        this.loggerService.logDebug(e.data + ' from checksession messageHandler');\n      }\n    }\n  }\n\n  private bindMessageEventToIframe() {\n    const iframeMessageEvent = this.messageHandler.bind(this);\n    window.addEventListener('message', iframeMessageEvent, false);\n  }\n\n  private getOrCreateIframe() {\n    const existingIframe = this.getExistingIframe();\n\n    if (!existingIframe) {\n      const frame = this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n      this.bindMessageEventToIframe();\n      return frame;\n    }\n\n    return existingIframe;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { PopupOptions } from './popup-options';\n\n@Injectable({ providedIn: 'root' })\nexport class PopUpService {\n  private STORAGE_IDENTIFIER = 'popupauth';\n  private popUp: Window;\n  private receivedUrlInternal$ = new Subject<string>();\n\n  get receivedUrl$(): Observable<string> {\n    return this.receivedUrlInternal$.asObservable();\n  }\n\n  isCurrentlyInPopup(): boolean {\n    const popup = sessionStorage.getItem(this.STORAGE_IDENTIFIER);\n    return !!window.opener && window.opener !== window && !!popup;\n  }\n\n  openPopUp(url: string, popupOptions?: PopupOptions): void {\n    const optionsToPass = this.getOptions(popupOptions);\n    this.popUp = window.open(url, '_blank', optionsToPass);\n    this.popUp.sessionStorage.setItem(this.STORAGE_IDENTIFIER, 'true');\n\n    const listener = (event: MessageEvent): void => {\n      if (!event?.data || typeof event.data !== 'string') {\n        return;\n      }\n\n      this.receivedUrlInternal$.next(event.data);\n\n      this.cleanUp(listener);\n    };\n\n    window.addEventListener('message', listener, false);\n  }\n\n  sendMessageToMainWindow(url: string): void {\n    if (window.opener) {\n      this.sendMessage(url, window.location.href);\n    }\n  }\n\n  private cleanUp(listener: any): void {\n    window.removeEventListener('message', listener, false);\n\n    if (this.popUp) {\n      this.popUp.sessionStorage.removeItem(this.STORAGE_IDENTIFIER);\n      this.popUp.close();\n      this.popUp = null;\n    }\n  }\n\n  private sendMessage(url: string, href: string): void {\n    window.opener.postMessage(url, href);\n  }\n\n  private getOptions(popupOptions?: PopupOptions): string {\n    const popupDefaultOptions = { width: 500, height: 500, left: 50, top: 50 };\n\n    const options = { ...popupDefaultOptions, ...(popupOptions || {}) };\n\n    return Object.entries(options)\n      .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n      .join(',');\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\nimport { AuthStateService } from './authState/auth-state.service';\nimport { AutoLoginService } from './auto-login/auto-login-service';\nimport { CallbackService } from './callback/callback.service';\nimport { PeriodicallyTokenCheckService } from './callback/periodically-token-check.service';\nimport { RefreshSessionService } from './callback/refresh-session.service';\nimport { ConfigurationProvider } from './config/config.provider';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { SilentRenewService } from './iframe/silent-renew.service';\nimport { LoggerService } from './logging/logger.service';\nimport { PopUpService } from './login/popup/popup.service';\nimport { UserService } from './userData/user-service';\n\n@Injectable()\nexport class CheckAuthService {\n  constructor(\n    @Inject(DOCUMENT) private readonly doc: any,\n    private checkSessionService: CheckSessionService,\n    private silentRenewService: SilentRenewService,\n    private userService: UserService,\n    private loggerService: LoggerService,\n    private configurationProvider: ConfigurationProvider,\n    private authStateService: AuthStateService,\n    private callbackService: CallbackService,\n    private refreshSessionService: RefreshSessionService,\n    private periodicallyTokenCheckService: PeriodicallyTokenCheckService,\n    private popupService: PopUpService,\n    private autoLoginService: AutoLoginService,\n    private router: Router\n  ) {}\n\n  checkAuth(url?: string): Observable<boolean> {\n    if (!this.configurationProvider.hasValidConfig()) {\n      this.loggerService.logError('Please provide a configuration before setting up the module');\n      return of(false);\n    }\n\n    const { stsServer } = this.configurationProvider.getOpenIDConfiguration();\n\n    this.loggerService.logDebug('STS server: ', stsServer);\n\n    const currentUrl = url || this.doc.defaultView.location.toString();\n\n    if (this.popupService.isCurrentlyInPopup()) {\n      this.popupService.sendMessageToMainWindow(currentUrl);\n      return of(null);\n    }\n\n    const isCallback = this.callbackService.isCallback(currentUrl);\n\n    this.loggerService.logDebug('currentUrl to check auth with: ', currentUrl);\n\n    const callback$ = isCallback ? this.callbackService.handleCallbackAndFireEvents(currentUrl) : of(null);\n\n    return callback$.pipe(\n      map(() => {\n        const isAuthenticated = this.authStateService.areAuthStorageTokensValid();\n        if (isAuthenticated) {\n          this.startCheckSessionAndValidation();\n\n          if (!isCallback) {\n            this.authStateService.setAuthorizedAndFireEvent();\n            this.userService.publishUserDataIfExists();\n          }\n        }\n\n        this.loggerService.logDebug('checkAuth completed fired events, auth: ' + isAuthenticated);\n\n        return isAuthenticated;\n      }),\n      tap(() => {\n        const savedRouteForRedirect = this.autoLoginService.getStoredRedirectRoute();\n        if (savedRouteForRedirect) {\n          this.autoLoginService.deleteStoredRedirectRoute();\n          this.router.navigate([savedRouteForRedirect]);\n        }\n      }),\n      catchError((error) => {\n        this.loggerService.logError(error);\n        return of(false);\n      })\n    );\n  }\n\n  checkAuthIncludingServer(): Observable<boolean> {\n    return this.checkAuth().pipe(\n      switchMap((isAuthenticated) => {\n        if (isAuthenticated) {\n          return of(isAuthenticated);\n        }\n\n        return this.refreshSessionService.forceRefreshSession().pipe(\n          map((result) => !!result?.idToken && !!result?.accessToken),\n          switchMap((isAuth) => {\n            if (isAuth) {\n              this.startCheckSessionAndValidation();\n            }\n\n            return of(isAuth);\n          })\n        );\n      })\n    );\n  }\n\n  private startCheckSessionAndValidation() {\n    if (this.checkSessionService.isCheckSessionConfigured()) {\n      this.checkSessionService.start();\n    }\n\n    const { tokenRefreshInSeconds } = this.configurationProvider.getOpenIDConfiguration();\n\n    this.periodicallyTokenCheckService.startTokenValidationPeriodically(tokenRefreshInSeconds);\n\n    if (this.silentRenewService.isSilentRenewConfigured()) {\n      this.silentRenewService.getOrCreateIframe();\n    }\n  }\n}\n","import { OpenIdConfiguration } from '../config/openid-configuration';\n\nexport interface Rule {\n  validate(passedConfig: OpenIdConfiguration): RuleValidationResult;\n}\n\nexport interface RuleValidationResult {\n  result: boolean;\n  messages: string[];\n  level: Level;\n}\n\nexport const POSITIVE_VALIDATION_RESULT = {\n  result: true,\n  messages: [],\n  level: null,\n};\n\nexport type Level = 'warning' | 'error';\n","import { OpenIdConfiguration } from '../../config/openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureClientId = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  if (!passedConfig.clientId) {\n    return {\n      result: false,\n      messages: ['The clientId is required and missing from your config!'],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../config/openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureRedirectRule = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  if (!passedConfig.redirectUrl) {\n    return {\n      result: false,\n      messages: ['The redirectURL is required and missing from your config'],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../config/openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureSilentRenewUrlWhenNoRefreshTokenUsed = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  const usesSilentRenew = passedConfig.silentRenew;\n  const usesRefreshToken = passedConfig.useRefreshToken;\n  const hasSilentRenewUrl = passedConfig.silentRenewUrl;\n\n  if (usesSilentRenew && !usesRefreshToken && !hasSilentRenewUrl) {\n    return {\n      result: false,\n      messages: ['Please provide a silent renew URL if using renew and not refresh tokens'],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../config/openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureStsServer = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  if (!passedConfig.stsServer) {\n    return {\n      result: false,\n      messages: ['The STS URL MUST be provided in the configuration!'],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../config/openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const useOfflineScopeWithSilentRenew = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  const hasRefreshToken = passedConfig.useRefreshToken;\n  const hasSilentRenew = passedConfig.silentRenew;\n  const scope = passedConfig.scope || '';\n  const hasOfflineScope = scope.split(' ').includes('offline_access');\n\n  if (hasRefreshToken && hasSilentRenew && !hasOfflineScope) {\n    return {\n      result: false,\n      messages: ['When using silent renew and refresh tokens please set the `offline_access` scope'],\n      level: 'warning',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { ensureClientId } from './ensure-clientId.rule';\nimport { ensureRedirectRule } from './ensure-redirect-url.rule';\nimport { ensureSilentRenewUrlWhenNoRefreshTokenUsed } from './ensure-silentRenewUrl-with-no-refreshtokens.rule';\nimport { ensureStsServer } from './ensure-sts-server.rule';\nimport { useOfflineScopeWithSilentRenew } from './use-offline-scope-with-silent-renew.rule';\n\nexport const allRules = [\n  ensureStsServer,\n  useOfflineScopeWithSilentRenew,\n  ensureRedirectRule,\n  ensureClientId,\n  ensureSilentRenewUrlWhenNoRefreshTokenUsed,\n];\n","import { Injectable } from '@angular/core';\nimport { OpenIdConfiguration } from '../angular-auth-oidc-client';\nimport { LoggerService } from '../logging/logger.service';\nimport { Level, RuleValidationResult } from './rule';\nimport { allRules } from './rules';\n\n@Injectable()\nexport class ConfigValidationService {\n  constructor(private loggerService: LoggerService) {}\n\n  validateConfig(passedConfig: OpenIdConfiguration): boolean {\n    const allValidationResults = allRules.map((rule) => rule(passedConfig));\n\n    const allMessages = allValidationResults.filter((x) => x.messages.length > 0);\n\n    const allErrorMessages = this.getAllMessagesOfType('error', allMessages);\n    const allWarnings = this.getAllMessagesOfType('warning', allMessages);\n    allErrorMessages.map((message) => this.loggerService.logError(message));\n    allWarnings.map((message) => this.loggerService.logWarning(message));\n\n    return allErrorMessages.length === 0;\n  }\n\n  private getAllMessagesOfType(type: Level, results: RuleValidationResult[]) {\n    const allMessages = results.filter((x) => x.level === type).map((result) => result.messages);\n    return allMessages.reduce((acc, val) => acc.concat(val), []);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { ConfigValidationService } from '../config-validation/config-validation.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\nimport { AuthWellKnownService } from './auth-well-known.service';\nimport { OpenIdConfiguration } from './openid-configuration';\nimport { PublicConfiguration } from './public-configuration';\n\n@Injectable()\nexport class OidcConfigService {\n  constructor(\n    private loggerService: LoggerService,\n    private publicEventsService: PublicEventsService,\n    private configurationProvider: ConfigurationProvider,\n    private authWellKnownService: AuthWellKnownService,\n    private storagePersistanceService: StoragePersistanceService,\n    private configValidationService: ConfigValidationService\n  ) {}\n\n  withConfig(passedConfig: OpenIdConfiguration, passedAuthWellKnownEndpoints?: AuthWellKnownEndpoints): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!this.configValidationService.validateConfig(passedConfig)) {\n        this.loggerService.logError('Validation of config rejected with errors. Config is NOT set.');\n        resolve();\n      }\n\n      if (!passedConfig.authWellknownEndpoint) {\n        passedConfig.authWellknownEndpoint = passedConfig.stsServer;\n      }\n\n      const usedConfig = this.configurationProvider.setConfig(passedConfig);\n\n      const alreadyExistingAuthWellKnownEndpoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n      if (!!alreadyExistingAuthWellKnownEndpoints) {\n        this.publicEventsService.fireEvent<PublicConfiguration>(EventTypes.ConfigLoaded, {\n          configuration: passedConfig,\n          wellknown: alreadyExistingAuthWellKnownEndpoints,\n        });\n\n        resolve();\n      }\n\n      if (!!passedAuthWellKnownEndpoints) {\n        this.authWellKnownService.storeWellKnownEndpoints(passedAuthWellKnownEndpoints);\n        this.publicEventsService.fireEvent<PublicConfiguration>(EventTypes.ConfigLoaded, {\n          configuration: passedConfig,\n          wellknown: passedAuthWellKnownEndpoints,\n        });\n\n        resolve();\n      }\n      if (usedConfig.eagerLoadAuthWellKnownEndpoints) {\n        this.authWellKnownService\n          .getAuthWellKnownEndPoints(usedConfig.authWellknownEndpoint)\n          .pipe(\n            catchError((error) => {\n              this.loggerService.logError('Getting auth well known endpoints failed on start', error);\n              return throwError(error);\n            }),\n            tap((wellknownEndPoints) =>\n              this.publicEventsService.fireEvent<PublicConfiguration>(EventTypes.ConfigLoaded, {\n                configuration: passedConfig,\n                wellknown: wellknownEndPoints,\n              })\n            )\n          )\n          .subscribe(\n            () => resolve(),\n            () => reject()\n          );\n      } else {\n        this.publicEventsService.fireEvent<PublicConfiguration>(EventTypes.ConfigLoaded, {\n          configuration: passedConfig,\n          wellknown: null,\n        });\n        resolve();\n      }\n    });\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class RedirectService {\n  constructor(@Inject(DOCUMENT) private readonly doc: any) {}\n\n  redirectTo(url) {\n    this.doc.location.href = url;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\nimport { FlowHelper } from '../../utils/flowHelper/flow-helper.service';\n\n@Injectable()\nexport class ResponseTypeValidationService {\n  constructor(private loggerService: LoggerService, private flowHelper: FlowHelper) {}\n\n  hasConfigValidResponseType(): boolean {\n    if (this.flowHelper.isCurrentFlowAnyImplicitFlow()) {\n      return true;\n    }\n\n    if (this.flowHelper.isCurrentFlowCodeFlow()) {\n      return true;\n    }\n\n    this.loggerService.logWarning('module configured incorrectly, invalid response_type. Check the responseType in the config');\n    return false;\n  }\n}\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map, retry } from 'rxjs/operators';\nimport { DataService } from '../../api/data.service';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistanceService } from '../../storage/storage-persistance.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { ParResponse } from './par-response';\n\n@Injectable()\nexport class ParService {\n  constructor(\n    private loggerService: LoggerService,\n    private urlService: UrlService,\n    private dataService: DataService,\n    private storagePersistanceService: StoragePersistanceService\n  ) {}\n\n  postParRequest(customParams?: { [key: string]: string | number | boolean }): Observable<ParResponse> {\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n    const authWellKnown = this.storagePersistanceService.read('authWellKnownEndPoints');\n\n    if (!authWellKnown) {\n      return throwError('Could not read PAR endpoint because authWellKnownEndPoints are not given');\n    }\n\n    const parEndpoint = authWellKnown.parEndpoint;\n    if (!parEndpoint) {\n      return throwError('Could not read PAR endpoint from authWellKnownEndpoints');\n    }\n\n    const data = this.urlService.createBodyForParCodeFlowRequest(customParams);\n\n    return this.dataService.post(parEndpoint, data, headers).pipe(\n      retry(2),\n      map((response: any) => {\n        this.loggerService.logDebug('par response: ', response);\n\n        return {\n          expiresIn: response.expires_in,\n          requestUri: response.request_uri,\n        };\n      }),\n      catchError((error) => {\n        const errorMessage = `There was an error on ParService postParRequest`;\n        this.loggerService.logError(errorMessage, error);\n        return throwError(errorMessage);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AuthStateService } from '../../authState/auth-state.service';\nimport { CheckAuthService } from '../../check-auth.service';\nimport { AuthWellKnownService } from '../../config/auth-well-known.service';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { UserService } from '../../userData/user-service';\nimport { RedirectService } from '../../utils/redirect/redirect.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { AuthOptions } from '../auth-options';\nimport { LoginResponse } from '../login-response';\nimport { PopupOptions } from '../popup/popup-options';\nimport { PopUpService } from '../popup/popup.service';\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\nimport { ParResponse } from './par-response';\nimport { ParService } from './par.service';\n\n@Injectable()\nexport class ParLoginService {\n  constructor(\n    private loggerService: LoggerService,\n    private responseTypeValidationService: ResponseTypeValidationService,\n    private urlService: UrlService,\n    private redirectService: RedirectService,\n    private configurationProvider: ConfigurationProvider,\n    private authWellKnownService: AuthWellKnownService,\n    private popupService: PopUpService,\n    private checkAuthService: CheckAuthService,\n    private userService: UserService,\n    private authStateService: AuthStateService,\n    private parService: ParService\n  ) {}\n\n  loginPar(authOptions?: AuthOptions): void {\n    if (!this.responseTypeValidationService.hasConfigValidResponseType()) {\n      this.loggerService.logError('Invalid response type!');\n      return;\n    }\n\n    const { authWellknownEndpoint } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!authWellknownEndpoint) {\n      this.loggerService.logError('no authWellknownEndpoint given!');\n      return;\n    }\n\n    this.loggerService.logDebug('BEGIN Authorize OIDC Flow, no auth data');\n\n    const { urlHandler, customParams } = authOptions || {};\n\n    this.authWellKnownService\n      .getAuthWellKnownEndPoints(authWellknownEndpoint)\n      .pipe(switchMap(() => this.parService.postParRequest(customParams)))\n      .subscribe((response) => {\n        this.loggerService.logDebug('par response: ', response);\n\n        const url = this.urlService.getAuthorizeParUrl(response.requestUri);\n\n        this.loggerService.logDebug('par request url: ', url);\n\n        if (!url) {\n          this.loggerService.logError(`Could not create url with param ${response.requestUri}: '${url}'`);\n          return;\n        }\n\n        if (urlHandler) {\n          urlHandler(url);\n        } else {\n          this.redirectService.redirectTo(url);\n        }\n      });\n  }\n\n  loginWithPopUpPar(authOptions?: AuthOptions, popupOptions?: PopupOptions): Observable<LoginResponse> {\n    if (!this.responseTypeValidationService.hasConfigValidResponseType()) {\n      const errorMessage = 'Invalid response type!';\n      this.loggerService.logError(errorMessage);\n      return throwError(errorMessage);\n    }\n\n    const { authWellknownEndpoint } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!authWellknownEndpoint) {\n      const errorMessage = 'no authWellknownEndpoint given!';\n      this.loggerService.logError(errorMessage);\n      return throwError(errorMessage);\n    }\n\n    this.loggerService.logDebug('BEGIN Authorize OIDC Flow with popup, no auth data');\n\n    const { customParams } = authOptions || {};\n\n    return this.authWellKnownService.getAuthWellKnownEndPoints(authWellknownEndpoint).pipe(\n      switchMap(() => this.parService.postParRequest(customParams)),\n      switchMap((response: ParResponse) => {\n        this.loggerService.logDebug('par response: ', response);\n\n        const url = this.urlService.getAuthorizeParUrl(response.requestUri);\n\n        this.loggerService.logDebug('par request url: ', url);\n\n        if (!url) {\n          const errorMessage = `Could not create url with param ${response.requestUri}: 'url'`;\n          this.loggerService.logError(errorMessage);\n          return throwError(errorMessage);\n        }\n\n        this.popupService.openPopUp(url, popupOptions);\n\n        return this.popupService.receivedUrl$.pipe(\n          take(1),\n          switchMap((receivedUrl: string) => this.checkAuthService.checkAuth(receivedUrl)),\n          map((isAuthenticated) => ({\n            isAuthenticated,\n            userData: this.userService.getUserDataFromStore(),\n            accessToken: this.authStateService.getAccessToken(),\n          }))\n        );\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AuthStateService } from '../../authState/auth-state.service';\nimport { CheckAuthService } from '../../check-auth.service';\nimport { AuthWellKnownService } from '../../config/auth-well-known.service';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { UserService } from '../../userData/user-service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { AuthOptions } from '../auth-options';\nimport { LoginResponse } from '../login-response';\nimport { PopupOptions } from '../popup/popup-options';\nimport { PopUpService } from '../popup/popup.service';\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\n\n@Injectable()\nexport class PopUpLoginService {\n  constructor(\n    private loggerService: LoggerService,\n    private responseTypeValidationService: ResponseTypeValidationService,\n    private urlService: UrlService,\n    private configurationProvider: ConfigurationProvider,\n    private authWellKnownService: AuthWellKnownService,\n    private popupService: PopUpService,\n    private checkAuthService: CheckAuthService,\n    private userService: UserService,\n    private authStateService: AuthStateService\n  ) {}\n\n  loginWithPopUpStandard(authOptions?: AuthOptions, popupOptions?: PopupOptions): Observable<LoginResponse> {\n    if (!this.responseTypeValidationService.hasConfigValidResponseType()) {\n      const errorMessage = 'Invalid response type!';\n      this.loggerService.logError(errorMessage);\n      return throwError(errorMessage);\n    }\n\n    const { authWellknownEndpoint } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!authWellknownEndpoint) {\n      const errorMessage = 'no authWellknownEndpoint given!';\n      this.loggerService.logError(errorMessage);\n      return throwError(errorMessage);\n    }\n\n    this.loggerService.logDebug('BEGIN Authorize OIDC Flow with popup, no auth data');\n\n    return this.authWellKnownService.getAuthWellKnownEndPoints(authWellknownEndpoint).pipe(\n      switchMap(() => {\n        const { customParams } = authOptions || {};\n\n        const authUrl = this.urlService.getAuthorizeUrl(customParams);\n\n        this.popupService.openPopUp(authUrl, popupOptions);\n\n        return this.popupService.receivedUrl$.pipe(\n          take(1),\n          switchMap((url: string) => this.checkAuthService.checkAuth(url)),\n          map((isAuthenticated) => ({\n            isAuthenticated,\n            userData: this.userService.getUserDataFromStore(),\n            accessToken: this.authStateService.getAccessToken(),\n          }))\n        );\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthWellKnownService } from '../../config/auth-well-known.service';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { RedirectService } from '../../utils/redirect/redirect.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { AuthOptions } from '../auth-options';\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\n\n@Injectable()\nexport class StandardLoginService {\n  constructor(\n    private loggerService: LoggerService,\n    private responseTypeValidationService: ResponseTypeValidationService,\n    private urlService: UrlService,\n    private redirectService: RedirectService,\n    private configurationProvider: ConfigurationProvider,\n    private authWellKnownService: AuthWellKnownService\n  ) {}\n\n  loginStandard(authOptions?: AuthOptions): void {\n    if (!this.responseTypeValidationService.hasConfigValidResponseType()) {\n      this.loggerService.logError('Invalid response type!');\n      return;\n    }\n\n    const { authWellknownEndpoint } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!authWellknownEndpoint) {\n      this.loggerService.logError('no authWellknownEndpoint given!');\n      return;\n    }\n\n    this.loggerService.logDebug('BEGIN Authorize OIDC Flow, no auth data');\n\n    this.authWellKnownService.getAuthWellKnownEndPoints(authWellknownEndpoint).subscribe(() => {\n      const { urlHandler, customParams } = authOptions || {};\n\n      const url = this.urlService.getAuthorizeUrl(customParams);\n\n      if (!url) {\n        this.loggerService.logError('Could not create url', url);\n        return;\n      }\n\n      if (urlHandler) {\n        urlHandler(url);\n      } else {\n        this.redirectService.redirectTo(url);\n      }\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { AuthOptions } from './auth-options';\nimport { LoginResponse } from './login-response';\nimport { ParLoginService } from './par/par-login.service';\nimport { PopUpLoginService } from './popup/popup-login.service';\nimport { PopupOptions } from './popup/popup-options';\nimport { StandardLoginService } from './standard/standard-login.service';\n\n@Injectable()\nexport class LoginService {\n  constructor(\n    private configurationProvider: ConfigurationProvider,\n    private parLoginService: ParLoginService,\n    private popUpLoginService: PopUpLoginService,\n    private standardLoginService: StandardLoginService\n  ) {}\n\n  login(authOptions?: AuthOptions): void {\n    const { usePushedAuthorisationRequests } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (usePushedAuthorisationRequests) {\n      return this.parLoginService.loginPar(authOptions);\n    } else {\n      return this.standardLoginService.loginStandard(authOptions);\n    }\n  }\n\n  loginWithPopUp(authOptions?: AuthOptions, popupOptions?: PopupOptions): Observable<LoginResponse> {\n    const { usePushedAuthorisationRequests } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (usePushedAuthorisationRequests) {\n      return this.parLoginService.loginWithPopUpPar(authOptions, popupOptions);\n    } else {\n      return this.popUpLoginService.loginWithPopUpStandard(authOptions, popupOptions);\n    }\n  }\n}\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError, retry, switchMap, tap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\nimport { CheckSessionService } from '../iframe/check-session.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { RedirectService } from '../utils/redirect/redirect.service';\nimport { UrlService } from '../utils/url/url.service';\n\n@Injectable()\nexport class LogoffRevocationService {\n  constructor(\n    private dataService: DataService,\n    private storagePersistanceService: StoragePersistanceService,\n    private loggerService: LoggerService,\n    private urlService: UrlService,\n    private checkSessionService: CheckSessionService,\n    private resetAuthDataService: ResetAuthDataService,\n    private redirectService: RedirectService\n  ) {}\n\n  // Logs out on the server and the local client.\n  // If the server state has changed, checksession, then only a local logout.\n  logoff(urlHandler?: (url: string) => any) {\n    this.loggerService.logDebug('logoff, remove auth ');\n    const endSessionUrl = this.getEndSessionUrl();\n    this.resetAuthDataService.resetAuthorizationData();\n\n    if (!endSessionUrl) {\n      this.loggerService.logDebug('only local login cleaned up, no end_session_endpoint');\n      return;\n    }\n\n    if (this.checkSessionService.serverStateChanged()) {\n      this.loggerService.logDebug('only local login cleaned up, server session has changed');\n    } else if (urlHandler) {\n      urlHandler(endSessionUrl);\n    } else {\n      this.redirectService.redirectTo(endSessionUrl);\n    }\n  }\n\n  logoffLocal() {\n    this.resetAuthDataService.resetAuthorizationData();\n    this.checkSessionService.stop();\n  }\n\n  // The refresh token and and the access token are revoked on the server. If the refresh token does not exist\n  // only the access token is revoked. Then the logout run.\n  logoffAndRevokeTokens(urlHandler?: (url: string) => any) {\n    if (!this.storagePersistanceService.read('authWellKnownEndPoints')?.revocationEndpoint) {\n      this.loggerService.logDebug('revocation endpoint not supported');\n      this.logoff(urlHandler);\n    }\n\n    if (this.storagePersistanceService.getRefreshToken()) {\n      return this.revokeRefreshToken().pipe(\n        switchMap((result) => this.revokeAccessToken(result)),\n        catchError((error) => {\n          const errorMessage = `revoke token failed`;\n          this.loggerService.logError(errorMessage, error);\n          return throwError(errorMessage);\n        }),\n        tap(() => this.logoff(urlHandler))\n      );\n    } else {\n      return this.revokeAccessToken().pipe(\n        catchError((error) => {\n          const errorMessage = `revoke access token failed`;\n          this.loggerService.logError(errorMessage, error);\n          return throwError(errorMessage);\n        }),\n        tap(() => this.logoff(urlHandler))\n      );\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc7009\n  // revokes an access token on the STS. If no token is provided, then the token from\n  // the storage is revoked. You can pass any token to revoke. This makes it possible to\n  // manage your own tokens. The is a public API.\n  revokeAccessToken(accessToken?: any) {\n    const accessTok = accessToken || this.storagePersistanceService.getAccessToken();\n    const body = this.urlService.createRevocationEndpointBodyAccessToken(accessTok);\n    const url = this.urlService.getRevocationEndpointUrl();\n\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.dataService.post(url, body, headers).pipe(\n      retry(2),\n      switchMap((response: any) => {\n        this.loggerService.logDebug('revocation endpoint post response: ', response);\n        return of(response);\n      }),\n      catchError((error) => {\n        const errorMessage = `Revocation request failed`;\n        this.loggerService.logError(errorMessage, error);\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  // https://tools.ietf.org/html/rfc7009\n  // revokes an refresh token on the STS. This is only required in the code flow with refresh tokens.\n  // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n  // This makes it possible to manage your own tokens.\n  revokeRefreshToken(refreshToken?: any) {\n    const refreshTok = refreshToken || this.storagePersistanceService.getRefreshToken();\n    const body = this.urlService.createRevocationEndpointBodyRefreshToken(refreshTok);\n    const url = this.urlService.getRevocationEndpointUrl();\n\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.dataService.post(url, body, headers).pipe(\n      retry(2),\n      switchMap((response: any) => {\n        this.loggerService.logDebug('revocation endpoint post response: ', response);\n        return of(response);\n      }),\n      catchError((error) => {\n        const errorMessage = `Revocation request failed`;\n        this.loggerService.logError(errorMessage, error);\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  getEndSessionUrl(): string | null {\n    const idToken = this.storagePersistanceService.getIdToken();\n    return this.urlService.createEndSessionUrl(idToken);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthStateService } from './authState/auth-state.service';\nimport { CallbackService } from './callback/callback.service';\nimport { RefreshSessionService } from './callback/refresh-session.service';\nimport { CheckAuthService } from './check-auth.service';\nimport { ConfigurationProvider } from './config/config.provider';\nimport { PublicConfiguration } from './config/public-configuration';\nimport { FlowsDataService } from './flows/flows-data.service';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { AuthOptions } from './login/auth-options';\nimport { LoginService } from './login/login.service';\nimport { LogoffRevocationService } from './logoffRevoke/logoff-revocation.service';\nimport { StoragePersistanceService } from './storage/storage-persistance.service';\nimport { UserService } from './userData/user-service';\nimport { TokenHelperService } from './utils/tokenHelper/oidc-token-helper.service';\n\n@Injectable()\nexport class OidcSecurityService {\n  get configuration(): PublicConfiguration {\n    const openIDConfiguration = this.configurationProvider.getOpenIDConfiguration();\n\n    return {\n      configuration: openIDConfiguration,\n      wellknown: this.storagePersistanceService.read('authWellKnownEndPoints'),\n    };\n  }\n\n  get userData$() {\n    return this.userService.userData$;\n  }\n\n  get isAuthenticated$() {\n    return this.authStateService.authorized$;\n  }\n\n  get checkSessionChanged$() {\n    return this.checkSessionService.checkSessionChanged$;\n  }\n\n  get stsCallback$() {\n    return this.callbackService.stsCallback$;\n  }\n\n  constructor(\n    private checkSessionService: CheckSessionService,\n    private checkAuthService: CheckAuthService,\n    private userService: UserService,\n    private tokenHelperService: TokenHelperService,\n    private configurationProvider: ConfigurationProvider,\n    private authStateService: AuthStateService,\n    private flowsDataService: FlowsDataService,\n    private callbackService: CallbackService,\n    private logoffRevocationService: LogoffRevocationService,\n    private loginService: LoginService,\n    private storagePersistanceService: StoragePersistanceService,\n    private refreshSessionService: RefreshSessionService\n  ) {}\n\n  checkAuth(url?: string): Observable<boolean> {\n    return this.checkAuthService.checkAuth(url);\n  }\n\n  checkAuthIncludingServer(): Observable<boolean> {\n    return this.checkAuthService.checkAuthIncludingServer();\n  }\n\n  getToken(): string {\n    return this.authStateService.getAccessToken();\n  }\n\n  getIdToken(): string {\n    return this.authStateService.getIdToken();\n  }\n\n  getRefreshToken(): string {\n    return this.authStateService.getRefreshToken();\n  }\n\n  getPayloadFromIdToken(encode = false): any {\n    const token = this.getIdToken();\n    return this.tokenHelperService.getPayloadFromToken(token, encode);\n  }\n\n  setState(state: string): void {\n    this.flowsDataService.setAuthStateControl(state);\n  }\n\n  getState(): string {\n    return this.flowsDataService.getAuthStateControl();\n  }\n\n  // Code Flow with PCKE or Implicit Flow\n  authorize(authOptions?: AuthOptions) {\n    if (authOptions?.customParams) {\n      this.storagePersistanceService.write('storageCustomRequestParams', authOptions.customParams);\n    }\n\n    this.loginService.login(authOptions);\n  }\n\n  authorizeWithPopUp(authOptions?: AuthOptions) {\n    if (authOptions?.customParams) {\n      this.storagePersistanceService.write('storageCustomRequestParams', authOptions.customParams);\n    }\n\n    return this.loginService.loginWithPopUp(authOptions);\n  }\n\n  forceRefreshSession(customParams?: { [key: string]: string | number | boolean }) {\n    if (customParams) {\n      this.storagePersistanceService.write('storageCustomRequestParams', customParams);\n    }\n\n    return this.refreshSessionService.forceRefreshSession(customParams);\n  }\n\n  // The refresh token and and the access token are revoked on the server. If the refresh token does not exist\n  // only the access token is revoked. Then the logout run.\n  logoffAndRevokeTokens(urlHandler?: (url: string) => any) {\n    return this.logoffRevocationService.logoffAndRevokeTokens(urlHandler);\n  }\n\n  // Logs out on the server and the local client.\n  // If the server state has changed, checksession, then only a local logout.\n  logoff(urlHandler?: (url: string) => any) {\n    return this.logoffRevocationService.logoff(urlHandler);\n  }\n\n  logoffLocal() {\n    return this.logoffRevocationService.logoffLocal();\n  }\n\n  // https://tools.ietf.org/html/rfc7009\n  // revokes an access token on the STS. This is only required in the code flow with refresh tokens.\n  // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n  // This makes it possible to manage your own tokens.\n  revokeAccessToken(accessToken?: any) {\n    return this.logoffRevocationService.revokeAccessToken(accessToken);\n  }\n\n  // https://tools.ietf.org/html/rfc7009\n  // revokes a refresh token on the STS. This is only required in the code flow with refresh tokens.\n  // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n  // This makes it possible to manage your own tokens.\n  revokeRefreshToken(refreshToken?: any) {\n    return this.logoffRevocationService.revokeRefreshToken(refreshToken);\n  }\n\n  getEndSessionUrl(): string | null {\n    return this.logoffRevocationService.getEndSessionUrl();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { AbstractSecurityStorage } from './abstract-security-storage';\n\n@Injectable()\nexport class BrowserStorageService implements AbstractSecurityStorage {\n  constructor(private configProvider: ConfigurationProvider, private loggerService: LoggerService) {}\n\n  read(key: string): any {\n    if (!this.hasStorage()) {\n      this.loggerService.logDebug(`Wanted to read '${key}' but Storage was undefined`);\n      return false;\n    }\n\n    const item = this.getStorage()?.getItem(key);\n\n    if (!item) {\n      this.loggerService.logDebug(`Wanted to read '${key}' but nothing was found`);\n      return null;\n    }\n\n    return JSON.parse(item);\n  }\n\n  write(key: string, value: any): boolean {\n    if (!this.hasStorage()) {\n      this.loggerService.logDebug(`Wanted to write '${key}/${value}' but Storage was falsy`);\n      return false;\n    }\n\n    const storage = this.getStorage();\n    if (!storage) {\n      this.loggerService.logDebug(`Wanted to write '${key}/${value}' but Storage was falsy`);\n      return false;\n    }\n\n    value = value || null;\n\n    storage.setItem(`${key}`, JSON.stringify(value));\n    return true;\n  }\n\n  remove(key: string): boolean {\n    if (!this.hasStorage()) {\n      this.loggerService.logDebug(`Wanted to remove '${key}' but Storage was falsy`);\n      return false;\n    }\n\n    const storage = this.getStorage();\n    if (!storage) {\n      this.loggerService.logDebug(`Wanted to write '${key}' but Storage was falsy`);\n      return false;\n    }\n\n    storage.removeItem(`${key}`);\n    return true;\n  }\n\n  private getStorage() {\n    const config = this.configProvider.getOpenIDConfiguration();\n    if (!config) {\n      return null;\n    }\n\n    return config.storage;\n  }\n\n  private hasStorage() {\n    return typeof Storage !== 'undefined';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { DataService } from './api/data.service';\nimport { HttpBaseService } from './api/http-base.service';\nimport { AuthStateService } from './authState/auth-state.service';\nimport { AutoLoginService } from './auto-login/auto-login-service';\nimport { ImplicitFlowCallbackService } from './callback/implicit-flow-callback.service';\nimport { CheckAuthService } from './check-auth.service';\nimport { ConfigValidationService } from './config-validation/config-validation.service';\nimport { AuthWellKnownDataService } from './config/auth-well-known-data.service';\nimport { AuthWellKnownService } from './config/auth-well-known.service';\nimport { ConfigurationProvider } from './config/config.provider';\nimport { OidcConfigService } from './config/config.service';\nimport { CodeFlowCallbackHandlerService } from './flows/callback-handling/code-flow-callback-handler.service';\nimport { HistoryJwtKeysCallbackHandlerService } from './flows/callback-handling/history-jwt-keys-callback-handler.service';\nimport { ImplicitFlowCallbackHandlerService } from './flows/callback-handling/implicit-flow-callback-handler.service';\nimport { RefreshSessionCallbackHandlerService } from './flows/callback-handling/refresh-session-callback-handler.service';\nimport { RefreshTokenCallbackHandlerService } from './flows/callback-handling/refresh-token-callback-handler.service';\nimport { StateValidationCallbackHandlerService } from './flows/callback-handling/state-validation-callback-handler.service';\nimport { UserCallbackHandlerService } from './flows/callback-handling/user-callback-handler.service';\nimport { FlowsDataService } from './flows/flows-data.service';\nimport { FlowsService } from './flows/flows.service';\nimport { RandomService } from './flows/random/random.service';\nimport { ResetAuthDataService } from './flows/reset-auth-data.service';\nimport { SigninKeyDataService } from './flows/signin-key-data.service';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { IFrameService } from './iframe/existing-iframe.service';\nimport { SilentRenewService } from './iframe/silent-renew.service';\nimport { LoggerService } from './logging/logger.service';\nimport { LoginService } from './login/login.service';\nimport { ParLoginService } from './login/par/par-login.service';\nimport { ParService } from './login/par/par.service';\nimport { PopUpLoginService } from './login/popup/popup-login.service';\nimport { ResponseTypeValidationService } from './login/response-type-validation/response-type-validation.service';\nimport { StandardLoginService } from './login/standard/standard-login.service';\nimport { LogoffRevocationService } from './logoffRevoke/logoff-revocation.service';\nimport { OidcSecurityService } from './oidc.security.service';\nimport { PublicEventsService } from './public-events/public-events.service';\nimport { AbstractSecurityStorage } from './storage/abstract-security-storage';\nimport { BrowserStorageService } from './storage/browser-storage.service';\nimport { StoragePersistanceService } from './storage/storage-persistance.service';\nimport { UserService } from './userData/user-service';\nimport { EqualityService } from './utils/equality/equality.service';\nimport { FlowHelper } from './utils/flowHelper/flow-helper.service';\nimport { PlatformProvider } from './utils/platform-provider/platform.provider';\nimport { TokenHelperService } from './utils/tokenHelper/oidc-token-helper.service';\nimport { UrlService } from './utils/url/url.service';\nimport { StateValidationService } from './validation/state-validation.service';\nimport { TokenValidationService } from './validation/token-validation.service';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [],\n  exports: [],\n})\nexport class AuthModule {\n  static forRoot(token: Token = {}) {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        OidcConfigService,\n        PublicEventsService,\n        FlowHelper,\n        OidcSecurityService,\n        TokenValidationService,\n        PlatformProvider,\n        CheckSessionService,\n        FlowsDataService,\n        FlowsService,\n        SilentRenewService,\n        ConfigurationProvider,\n        LogoffRevocationService,\n        UserService,\n        RandomService,\n        HttpBaseService,\n        UrlService,\n        AuthStateService,\n        SigninKeyDataService,\n        StoragePersistanceService,\n        TokenHelperService,\n        LoggerService,\n        IFrameService,\n        EqualityService,\n        LoginService,\n        ParService,\n        AuthWellKnownDataService,\n        AuthWellKnownService,\n        DataService,\n        StateValidationService,\n        ConfigValidationService,\n        CheckAuthService,\n        ResetAuthDataService,\n        ImplicitFlowCallbackService,\n        HistoryJwtKeysCallbackHandlerService,\n        ResponseTypeValidationService,\n        UserCallbackHandlerService,\n        StateValidationCallbackHandlerService,\n        RefreshSessionCallbackHandlerService,\n        RefreshTokenCallbackHandlerService,\n        CodeFlowCallbackHandlerService,\n        ImplicitFlowCallbackHandlerService,\n        ParLoginService,\n        PopUpLoginService,\n        StandardLoginService,\n        AutoLoginService,\n        {\n          provide: AbstractSecurityStorage,\n          useClass: token.storage || BrowserStorageService,\n        },\n      ],\n    };\n  }\n}\n\nexport type Type<T> = new (...args: any[]) => T;\n\nexport interface Token {\n  storage?: Type<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, CanLoad, Route, Router, RouterStateSnapshot, UrlSegment } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { concatMap, map } from 'rxjs/operators';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { AutoLoginService } from '../auto-login/auto-login-service';\nimport { CheckAuthService } from '../check-auth.service';\nimport { LoginService } from '../login/login.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AutoLoginGuard implements CanActivate, CanLoad {\n  constructor(\n    private autoLoginService: AutoLoginService,\n    private authStateService: AuthStateService,\n    private checkAuthService: CheckAuthService,\n    private loginService: LoginService,\n    private router: Router\n  ) {}\n\n  canLoad(route: Route, segments: UrlSegment[]): Observable<boolean> {\n    return this.checkAuth(route.path);\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.checkAuth(state.url);\n  }\n\n  private checkAuth(url: string) {\n    return this.authStateService.authorized$.pipe(\n      concatMap((isAuthenticatedAlready) => (isAuthenticatedAlready ? of(isAuthenticatedAlready) : this.checkAuthService.checkAuth())),\n\n      map((isAuthorized) => {\n        const storedRoute = this.autoLoginService.getStoredRedirectRoute();\n\n        if (isAuthorized) {\n          if (storedRoute) {\n            this.autoLoginService.deleteStoredRedirectRoute();\n            this.router.navigate([storedRoute]);\n          }\n          return true;\n        }\n\n        this.autoLoginService.saveStoredRedirectRoute(url);\n        this.loginService.login();\n        return false;\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from './../logging/logger.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(\n    private authStateService: AuthStateService,\n    private configurationProvider: ConfigurationProvider,\n    private loggerService: LoggerService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Ensure we send the token only to routes which are secured\n    const { secureRoutes } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!secureRoutes) {\n      this.loggerService.logDebug(`No routes to check configured`);\n      return next.handle(req);\n    }\n\n    const matchingRoute = secureRoutes.find((x) => req.url.startsWith(x));\n\n    if (!matchingRoute) {\n      this.loggerService.logDebug(`Did not find matching route for ${req.url}`);\n      return next.handle(req);\n    }\n\n    this.loggerService.logDebug(`'${req.url}' matches configured route '${matchingRoute}'`);\n\n    const token = this.authStateService.getAccessToken();\n\n    if (!token) {\n      this.loggerService.logDebug(`Wanted to add token to ${req.url} but found no token: '${token}'`);\n      return next.handle(req);\n    }\n\n    this.loggerService.logDebug(`'${req.url}' matches configured route '${matchingRoute}', adding token`);\n    req = req.clone({\n      headers: req.headers.set('Authorization', 'Bearer ' + token),\n    });\n\n    return next.handle(req);\n  }\n}\n","// Public classes.\n\nexport * from './auth.module';\nexport * from './authState/authorization-result';\nexport * from './authState/authorized-state';\nexport * from './auto-login/auto-login.guard';\nexport * from './config/auth-well-known-endpoints';\nexport * from './config/config.service';\nexport * from './config/openid-configuration';\nexport * from './config/public-configuration';\nexport * from './interceptor/auth.interceptor';\nexport * from './logging/log-level';\nexport * from './logging/logger.service';\nexport * from './oidc.security.service';\nexport * from './public-events/event-types';\nexport * from './public-events/notification';\nexport * from './public-events/public-events.service';\nexport * from './storage/abstract-security-storage';\nexport * from './utils/tokenHelper/oidc-token-helper.service';\nexport * from './validation/jwtkeys';\nexport * from './validation/state-validation-result';\nexport * from './validation/token-validation.service';\nexport * from './validation/validation-result';\n","/*\n * Public API Surface of angular-auth-oidc-client\n */\n\nexport * from './lib/angular-auth-oidc-client';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {DataService as ɵe} from './lib/api/data.service';\nexport {HttpBaseService as ɵf} from './lib/api/http-base.service';\nexport {AuthStateService as ɵu} from './lib/authState/auth-state.service';\nexport {AutoLoginService as ɵbn} from './lib/auto-login/auto-login-service';\nexport {CallbackService as ɵbg} from './lib/callback/callback.service';\nexport {CodeFlowCallbackService as ɵbh} from './lib/callback/code-flow-callback.service';\nexport {ImplicitFlowCallbackService as ɵbe} from './lib/callback/implicit-flow-callback.service';\nexport {IntervallService as ɵbf} from './lib/callback/intervall.service';\nexport {PeriodicallyTokenCheckService as ɵbl} from './lib/callback/periodically-token-check.service';\nexport {RefreshSessionRefreshTokenService as ɵbk} from './lib/callback/refresh-session-refresh-token.service';\nexport {RefreshSessionService as ɵbi} from './lib/callback/refresh-session.service';\nexport {CheckAuthService as ɵl} from './lib/check-auth.service';\nexport {ConfigValidationService as ɵh} from './lib/config-validation/config-validation.service';\nexport {AuthWellKnownDataService as ɵd} from './lib/config/auth-well-known-data.service';\nexport {AuthWellKnownService as ɵc} from './lib/config/auth-well-known.service';\nexport {ConfigurationProvider as ɵa} from './lib/config/config.provider';\nexport {CodeFlowCallbackHandlerService as ɵo} from './lib/flows/callback-handling/code-flow-callback-handler.service';\nexport {HistoryJwtKeysCallbackHandlerService as ɵw} from './lib/flows/callback-handling/history-jwt-keys-callback-handler.service';\nexport {ImplicitFlowCallbackHandlerService as ɵs} from './lib/flows/callback-handling/implicit-flow-callback-handler.service';\nexport {RefreshSessionCallbackHandlerService as ɵbc} from './lib/flows/callback-handling/refresh-session-callback-handler.service';\nexport {RefreshTokenCallbackHandlerService as ɵbd} from './lib/flows/callback-handling/refresh-token-callback-handler.service';\nexport {StateValidationCallbackHandlerService as ɵz} from './lib/flows/callback-handling/state-validation-callback-handler.service';\nexport {UserCallbackHandlerService as ɵy} from './lib/flows/callback-handling/user-callback-handler.service';\nexport {FlowsDataService as ɵq} from './lib/flows/flows-data.service';\nexport {FlowsService as ɵn} from './lib/flows/flows.service';\nexport {RandomService as ɵr} from './lib/flows/random/random.service';\nexport {ResetAuthDataService as ɵt} from './lib/flows/reset-auth-data.service';\nexport {SigninKeyDataService as ɵx} from './lib/flows/signin-key-data.service';\nexport {CheckSessionService as ɵj} from './lib/iframe/check-session.service';\nexport {IFrameService as ɵk} from './lib/iframe/existing-iframe.service';\nexport {RefreshSessionIframeService as ɵbj} from './lib/iframe/refresh-session-iframe.service';\nexport {SilentRenewService as ɵm} from './lib/iframe/silent-renew.service';\nexport {LoginService as ɵbq} from './lib/login/login.service';\nexport {ParLoginService as ɵbr} from './lib/login/par/par-login.service';\nexport {ParService as ɵbt} from './lib/login/par/par.service';\nexport {PopUpLoginService as ɵbu} from './lib/login/popup/popup-login.service';\nexport {PopUpService as ɵbm} from './lib/login/popup/popup.service';\nexport {ResponseTypeValidationService as ɵbs} from './lib/login/response-type-validation/response-type-validation.service';\nexport {StandardLoginService as ɵbv} from './lib/login/standard/standard-login.service';\nexport {LogoffRevocationService as ɵbo} from './lib/logoffRevoke/logoff-revocation.service';\nexport {BrowserStorageService as ɵbw} from './lib/storage/browser-storage.service';\nexport {StoragePersistanceService as ɵg} from './lib/storage/storage-persistance.service';\nexport {UserService as ɵv} from './lib/userData/user-service';\nexport {EqualityService as ɵbb} from './lib/utils/equality/equality.service';\nexport {FlowHelper as ɵi} from './lib/utils/flowHelper/flow-helper.service';\nexport {PlatformProvider as ɵb} from './lib/utils/platform-provider/platform.provider';\nexport {RedirectService as ɵbp} from './lib/utils/redirect/redirect.service';\nexport {UrlService as ɵp} from './lib/utils/url/url.service';\nexport {StateValidationService as ɵba} from './lib/validation/state-validation.service';"]}