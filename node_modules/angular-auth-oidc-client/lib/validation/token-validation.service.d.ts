import { Observable } from 'rxjs';
import { LoggerService } from '../logging/logger.service';
import { TokenHelperService } from '../utils/tokenHelper/token-helper.service';
import { JwtWindowCryptoService } from './jwt-window-crypto.service';
import * as i0 from "@angular/core";
export declare class TokenValidationService {
    private tokenHelperService;
    private loggerService;
    private jwtWindowCryptoService;
    static refreshTokenNoncePlaceholder: string;
    keyAlgorithms: string[];
    private cyptoObj;
    constructor(tokenHelperService: TokenHelperService, loggerService: LoggerService, jwtWindowCryptoService: JwtWindowCryptoService);
    hasIdTokenExpired(token: string, configId: string, offsetSeconds?: number): boolean;
    validateIdTokenExpNotExpired(decodedIdToken: string, configId: string, offsetSeconds?: number): boolean;
    validateAccessTokenNotExpired(accessTokenExpiresAt: Date, configId: string, offsetSeconds?: number): boolean;
    validateRequiredIdToken(dataIdToken: any, configId: string): boolean;
    validateIdTokenIatMaxOffset(dataIdToken: any, maxOffsetAllowedInSeconds: number, disableIatOffsetValidation: boolean, configId: string): boolean;
    validateIdTokenNonce(dataIdToken: any, localNonce: any, ignoreNonceAfterRefresh: boolean, configId: string): boolean;
    validateIdTokenIss(dataIdToken: any, authWellKnownEndpointsIssuer: any, configId: string): boolean;
    validateIdTokenAud(dataIdToken: any, aud: any, configId: string): boolean;
    validateIdTokenAzpExistsIfMoreThanOneAud(dataIdToken: any): boolean;
    validateIdTokenAzpValid(dataIdToken: any, clientId: string): boolean;
    validateStateFromHashCallback(state: any, localState: any, configId: string): boolean;
    validateSignatureIdToken(idToken: string, jwtkeys: any, configId: string): Observable<boolean>;
    private getImportAlg;
    private getVerifyAlg;
    private alg2kty;
    validateIdTokenAtHash(accessToken: string, atHash: string, idTokenAlg: string, configId: string): Observable<boolean>;
    private millisToMinutesAndSeconds;
    static ɵfac: i0.ɵɵFactoryDeclaration<TokenValidationService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TokenValidationService>;
}
