{"version":3,"file":"token-validation.service.d.ts","sources":["token-validation.service.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,AACA","sourcesContent":["import { LoggerService } from '../logging/logger.service';\r\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\r\nexport declare class TokenValidationService {\r\n    private tokenHelperService;\r\n    private loggerService;\r\n    static refreshTokenNoncePlaceholder: string;\r\n    keyAlgorithms: string[];\r\n    constructor(tokenHelperService: TokenHelperService, loggerService: LoggerService);\r\n    hasIdTokenExpired(token: string, offsetSeconds?: number): boolean;\r\n    validateIdTokenExpNotExpired(decodedIdToken: string, offsetSeconds?: number): boolean;\r\n    validateAccessTokenNotExpired(accessTokenExpiresAt: Date, offsetSeconds?: number): boolean;\r\n    validateRequiredIdToken(dataIdToken: any): boolean;\r\n    validateIdTokenIatMaxOffset(dataIdToken: any, maxOffsetAllowedInSeconds: number, disableIatOffsetValidation: boolean): boolean;\r\n    validateIdTokenNonce(dataIdToken: any, localNonce: any, ignoreNonceAfterRefresh: boolean): boolean;\r\n    validateIdTokenIss(dataIdToken: any, authWellKnownEndpointsIssuer: any): boolean;\r\n    validateIdTokenAud(dataIdToken: any, aud: any): boolean;\r\n    validateIdTokenAzpExistsIfMoreThanOneAud(dataIdToken: any): boolean;\r\n    validateIdTokenAzpValid(dataIdToken: any, clientId: string): boolean;\r\n    validateStateFromHashCallback(state: any, localState: any): boolean;\r\n    validateSignatureIdToken(idToken: any, jwtkeys: any): boolean;\r\n    validateIdTokenAtHash(accessToken: any, atHash: any, idTokenAlg: string): boolean;\r\n    generateCodeChallenge(codeVerifier: any): string;\r\n    private generateAtHash;\r\n}\r\n"]}