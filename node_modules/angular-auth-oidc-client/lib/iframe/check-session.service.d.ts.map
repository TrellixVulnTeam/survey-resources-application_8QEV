{"version":3,"file":"check-session.service.d.ts","sources":["check-session.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,AACA","sourcesContent":["import { NgZone } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ConfigurationProvider } from '../config/config.provider';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\r\nimport { IFrameService } from './existing-iframe.service';\r\nexport declare class CheckSessionService {\r\n    private storagePersistanceService;\r\n    private loggerService;\r\n    private iFrameService;\r\n    private eventService;\r\n    private configurationProvider;\r\n    private zone;\r\n    private checkSessionReceived;\r\n    private scheduledHeartBeatRunning;\r\n    private lastIFrameRefresh;\r\n    private outstandingMessages;\r\n    private heartBeatInterval;\r\n    private iframeRefreshInterval;\r\n    private checkSessionChangedInternal$;\r\n    get checkSessionChanged$(): Observable<boolean>;\r\n    constructor(storagePersistanceService: StoragePersistanceService, loggerService: LoggerService, iFrameService: IFrameService, eventService: PublicEventsService, configurationProvider: ConfigurationProvider, zone: NgZone);\r\n    isCheckSessionConfigured(): boolean;\r\n    start(): void;\r\n    stop(): void;\r\n    serverStateChanged(): boolean;\r\n    getExistingIframe(): HTMLIFrameElement;\r\n    private init;\r\n    private pollServerSession;\r\n    private clearScheduledHeartBeat;\r\n    private messageHandler;\r\n    private bindMessageEventToIframe;\r\n    private getOrCreateIframe;\r\n}\r\n"]}