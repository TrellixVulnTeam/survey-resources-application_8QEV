{"version":3,"file":"silent-renew.service.d.ts","sources":["silent-renew.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AuthStateService } from '../authState/auth-state.service';\r\nimport { ImplicitFlowCallbackService } from '../callback/implicit-flow-callback.service';\r\nimport { IntervallService } from '../callback/intervall.service';\r\nimport { ConfigurationProvider } from '../config/config.provider';\r\nimport { CallbackContext } from '../flows/callback-context';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { FlowsService } from '../flows/flows.service';\r\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { IFrameService } from './existing-iframe.service';\r\nexport declare class SilentRenewService {\r\n    private configurationProvider;\r\n    private iFrameService;\r\n    private flowsService;\r\n    private resetAuthDataService;\r\n    private flowsDataService;\r\n    private authStateService;\r\n    private loggerService;\r\n    private flowHelper;\r\n    private implicitFlowCallbackService;\r\n    private intervalService;\r\n    private refreshSessionWithIFrameCompletedInternal$;\r\n    get refreshSessionWithIFrameCompleted$(): import(\"rxjs\").Observable<CallbackContext>;\r\n    constructor(configurationProvider: ConfigurationProvider, iFrameService: IFrameService, flowsService: FlowsService, resetAuthDataService: ResetAuthDataService, flowsDataService: FlowsDataService, authStateService: AuthStateService, loggerService: LoggerService, flowHelper: FlowHelper, implicitFlowCallbackService: ImplicitFlowCallbackService, intervalService: IntervallService);\r\n    getOrCreateIframe(): HTMLIFrameElement;\r\n    isSilentRenewConfigured(): boolean;\r\n    codeFlowCallbackSilentRenewIframe(urlParts: any): import(\"rxjs\").Observable<CallbackContext>;\r\n    silentRenewEventHandler(e: CustomEvent): void;\r\n    private getExistingIframe;\r\n}\r\n"]}