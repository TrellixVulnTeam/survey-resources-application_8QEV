{"version":3,"file":"auth-state.service.d.ts","sources":["auth-state.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ConfigurationProvider } from '../config/config.provider';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\r\nimport { TokenValidationService } from '../validation/token-validation.service';\r\nimport { AuthorizationResult } from './authorization-result';\r\nexport declare class AuthStateService {\r\n    private storagePersistanceService;\r\n    private loggerService;\r\n    private publicEventsService;\r\n    private configurationProvider;\r\n    private tokenValidationService;\r\n    private authorizedInternal$;\r\n    get authorized$(): import(\"rxjs\").Observable<boolean>;\r\n    private get isAuthorized();\r\n    constructor(storagePersistanceService: StoragePersistanceService, loggerService: LoggerService, publicEventsService: PublicEventsService, configurationProvider: ConfigurationProvider, tokenValidationService: TokenValidationService);\r\n    setAuthorizedAndFireEvent(): void;\r\n    setUnauthorizedAndFireEvent(): void;\r\n    updateAndPublishAuthState(authorizationResult: AuthorizationResult): void;\r\n    setAuthorizationData(accessToken: any, authResult: any): void;\r\n    getAccessToken(): string;\r\n    getIdToken(): string;\r\n    getRefreshToken(): string;\r\n    areAuthStorageTokensValid(): boolean;\r\n    hasIdTokenExpired(): boolean;\r\n    hasAccessTokenExpiredIfExpiryExists(): boolean;\r\n    private decodeURIComponentSafely;\r\n    private persistAccessTokenExpirationTime;\r\n}\r\n"]}