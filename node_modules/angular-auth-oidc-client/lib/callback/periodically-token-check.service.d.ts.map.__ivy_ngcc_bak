{"version":3,"file":"periodically-token-check.service.d.ts","sources":["periodically-token-check.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { AuthStateService } from '../authState/auth-state.service';\r\nimport { ConfigurationProvider } from '../config/config.provider';\r\nimport { FlowsDataService } from '../flows/flows-data.service';\r\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\r\nimport { RefreshSessionIframeService } from '../iframe/refresh-session-iframe.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\r\nimport { UserService } from '../userData/user-service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { IntervallService } from './intervall.service';\r\nimport { RefreshSessionRefreshTokenService } from './refresh-session-refresh-token.service';\r\nexport declare class PeriodicallyTokenCheckService {\r\n    private resetAuthDataService;\r\n    private flowHelper;\r\n    private configurationProvider;\r\n    private flowsDataService;\r\n    private loggerService;\r\n    private userService;\r\n    private authStateService;\r\n    private refreshSessionIframeService;\r\n    private refreshSessionRefreshTokenService;\r\n    private intervalService;\r\n    private storagePersistanceService;\r\n    constructor(resetAuthDataService: ResetAuthDataService, flowHelper: FlowHelper, configurationProvider: ConfigurationProvider, flowsDataService: FlowsDataService, loggerService: LoggerService, userService: UserService, authStateService: AuthStateService, refreshSessionIframeService: RefreshSessionIframeService, refreshSessionRefreshTokenService: RefreshSessionRefreshTokenService, intervalService: IntervallService, storagePersistanceService: StoragePersistanceService);\r\n    startTokenValidationPeriodically(repeatAfterSeconds: number): void;\r\n}\r\n"]}