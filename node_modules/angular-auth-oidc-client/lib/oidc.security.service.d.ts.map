{"version":3,"file":"oidc.security.service.d.ts","sources":["oidc.security.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,AACA","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { AuthStateService } from './authState/auth-state.service';\r\nimport { CallbackService } from './callback/callback.service';\r\nimport { RefreshSessionService } from './callback/refresh-session.service';\r\nimport { CheckAuthService } from './check-auth.service';\r\nimport { ConfigurationProvider } from './config/config.provider';\r\nimport { PublicConfiguration } from './config/public-configuration';\r\nimport { FlowsDataService } from './flows/flows-data.service';\r\nimport { CheckSessionService } from './iframe/check-session.service';\r\nimport { AuthOptions } from './login/auth-options';\r\nimport { LoginService } from './login/login.service';\r\nimport { LogoffRevocationService } from './logoffRevoke/logoff-revocation.service';\r\nimport { StoragePersistanceService } from './storage/storage-persistance.service';\r\nimport { UserService } from './userData/user-service';\r\nimport { TokenHelperService } from './utils/tokenHelper/oidc-token-helper.service';\r\nexport declare class OidcSecurityService {\r\n    private checkSessionService;\r\n    private checkAuthService;\r\n    private userService;\r\n    private tokenHelperService;\r\n    private configurationProvider;\r\n    private authStateService;\r\n    private flowsDataService;\r\n    private callbackService;\r\n    private logoffRevocationService;\r\n    private loginService;\r\n    private storagePersistanceService;\r\n    private refreshSessionService;\r\n    get configuration(): PublicConfiguration;\r\n    get userData$(): Observable<any>;\r\n    get isAuthenticated$(): Observable<boolean>;\r\n    get checkSessionChanged$(): Observable<boolean>;\r\n    get stsCallback$(): Observable<unknown>;\r\n    constructor(checkSessionService: CheckSessionService, checkAuthService: CheckAuthService, userService: UserService, tokenHelperService: TokenHelperService, configurationProvider: ConfigurationProvider, authStateService: AuthStateService, flowsDataService: FlowsDataService, callbackService: CallbackService, logoffRevocationService: LogoffRevocationService, loginService: LoginService, storagePersistanceService: StoragePersistanceService, refreshSessionService: RefreshSessionService);\r\n    checkAuth(url?: string): Observable<boolean>;\r\n    checkAuthIncludingServer(): Observable<boolean>;\r\n    getToken(): string;\r\n    getIdToken(): string;\r\n    getRefreshToken(): string;\r\n    getPayloadFromIdToken(encode?: boolean): any;\r\n    setState(state: string): void;\r\n    getState(): string;\r\n    authorize(authOptions?: AuthOptions): void;\r\n    authorizeWithPopUp(authOptions?: AuthOptions): Observable<import(\"./login/login-response\").LoginResponse>;\r\n    forceRefreshSession(customParams?: {\r\n        [key: string]: string | number | boolean;\r\n    }): Observable<{\r\n        idToken: string;\r\n        accessToken: string;\r\n    }>;\r\n    logoffAndRevokeTokens(urlHandler?: (url: string) => any): Observable<any>;\r\n    logoff(urlHandler?: (url: string) => any): void;\r\n    logoffLocal(): void;\r\n    revokeAccessToken(accessToken?: any): Observable<any>;\r\n    revokeRefreshToken(refreshToken?: any): Observable<any>;\r\n    getEndSessionUrl(): string | null;\r\n}\r\n"]}