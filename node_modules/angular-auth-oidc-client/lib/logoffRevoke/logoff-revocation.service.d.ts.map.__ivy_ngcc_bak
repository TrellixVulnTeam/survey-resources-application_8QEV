{"version":3,"file":"logoff-revocation.service.d.ts","sources":["logoff-revocation.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { DataService } from '../api/data.service';\r\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\r\nimport { CheckSessionService } from '../iframe/check-session.service';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\r\nimport { RedirectService } from '../utils/redirect/redirect.service';\r\nimport { UrlService } from '../utils/url/url.service';\r\nexport declare class LogoffRevocationService {\r\n    private dataService;\r\n    private storagePersistanceService;\r\n    private loggerService;\r\n    private urlService;\r\n    private checkSessionService;\r\n    private resetAuthDataService;\r\n    private redirectService;\r\n    constructor(dataService: DataService, storagePersistanceService: StoragePersistanceService, loggerService: LoggerService, urlService: UrlService, checkSessionService: CheckSessionService, resetAuthDataService: ResetAuthDataService, redirectService: RedirectService);\r\n    logoff(urlHandler?: (url: string) => any): void;\r\n    logoffLocal(): void;\r\n    logoffAndRevokeTokens(urlHandler?: (url: string) => any): import(\"rxjs\").Observable<any>;\r\n    revokeAccessToken(accessToken?: any): import(\"rxjs\").Observable<any>;\r\n    revokeRefreshToken(refreshToken?: any): import(\"rxjs\").Observable<any>;\r\n    getEndSessionUrl(): string | null;\r\n}\r\n"]}