{"version":3,"file":"user-service.d.ts","sources":["user-service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,AACA","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { DataService } from '../api/data.service';\r\nimport { ConfigurationProvider } from '../config/config.provider';\r\nimport { LoggerService } from '../logging/logger.service';\r\nimport { PublicEventsService } from '../public-events/public-events.service';\r\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\r\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\r\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\r\nexport declare class UserService {\r\n    private oidcDataService;\r\n    private storagePersistanceService;\r\n    private eventService;\r\n    private loggerService;\r\n    private tokenHelperService;\r\n    private flowHelper;\r\n    private configurationProvider;\r\n    private userDataInternal$;\r\n    get userData$(): Observable<any>;\r\n    constructor(oidcDataService: DataService, storagePersistanceService: StoragePersistanceService, eventService: PublicEventsService, loggerService: LoggerService, tokenHelperService: TokenHelperService, flowHelper: FlowHelper, configurationProvider: ConfigurationProvider);\r\n    getAndPersistUserDataInStore(isRenewProcess?: boolean, idToken?: any, decodedIdToken?: any): Observable<any>;\r\n    getUserDataFromStore(): any;\r\n    publishUserDataIfExists(): void;\r\n    setUserDataToStore(value: any): void;\r\n    resetUserDataInStore(): void;\r\n    private getUserDataOidcFlowAndSave;\r\n    private getIdentityUserData;\r\n    private validateUserDataSubIdToken;\r\n}\r\n"]}