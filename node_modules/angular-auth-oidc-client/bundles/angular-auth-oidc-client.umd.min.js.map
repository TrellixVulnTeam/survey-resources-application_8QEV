{"version":3,"sources":["../projects/angular-auth-oidc-client/src/lib/logging/log-level.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/utils/platform-provider/platform.provider.ts","../projects/angular-auth-oidc-client/src/lib/config/default-config.ts","../projects/angular-auth-oidc-client/src/lib/config/config.provider.ts","../projects/angular-auth-oidc-client/src/lib/api/http-base.service.ts","../projects/angular-auth-oidc-client/src/lib/api/data.service.ts","../../../node_modules/tslib/tslib.es6.js","../projects/angular-auth-oidc-client/src/lib/public-events/event-types.ts","../projects/angular-auth-oidc-client/src/lib/logging/logger.service.ts","../projects/angular-auth-oidc-client/src/lib/public-events/public-events.service.ts","../projects/angular-auth-oidc-client/src/lib/storage/abstract-security-storage.ts","../projects/angular-auth-oidc-client/src/lib/storage/storage-persistance.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/utils/tokenHelper/oidc-token-helper.service.ts","../projects/angular-auth-oidc-client/src/lib/validation/token-validation.service.ts","../projects/angular-auth-oidc-client/src/lib/authState/auth-state.service.ts","../projects/angular-auth-oidc-client/src/lib/auto-login/auto-login-service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/random/random.service.ts","../projects/angular-auth-oidc-client/src/lib/flows/flows-data.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/utils/flowHelper/flow-helper.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/utils/url/uri-encoder.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/utils/url/url.service.ts","../projects/angular-auth-oidc-client/src/lib/authState/authorized-state.ts","../projects/angular-auth-oidc-client/src/lib/validation/validation-result.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/callback-handling/code-flow-callback-handler.service.ts","../projects/angular-auth-oidc-client/src/lib/userData/user-service.ts","../projects/angular-auth-oidc-client/src/lib/flows/reset-auth-data.service.ts","../projects/angular-auth-oidc-client/src/lib/flows/signin-key-data.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/callback-handling/history-jwt-keys-callback-handler.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/callback-handling/implicit-flow-callback-handler.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/callback-handling/refresh-session-callback-handler.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/callback-handling/refresh-token-callback-handler.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/utils/equality/equality.service.ts","../projects/angular-auth-oidc-client/src/lib/validation/state-validation-result.ts","../projects/angular-auth-oidc-client/src/lib/validation/state-validation.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/callback-handling/state-validation-callback-handler.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/flows/callback-handling/user-callback-handler.service.ts","../projects/angular-auth-oidc-client/src/lib/flows/flows.service.ts","../projects/angular-auth-oidc-client/src/lib/callback/intervall.service.ts","../projects/angular-auth-oidc-client/src/lib/callback/implicit-flow-callback.service.ts","../projects/angular-auth-oidc-client/src/lib/callback/code-flow-callback.service.ts","../projects/angular-auth-oidc-client/src/lib/callback/callback.service.ts","../projects/angular-auth-oidc-client/src/lib/iframe/existing-iframe.service.ts","../projects/angular-auth-oidc-client/src/lib/iframe/silent-renew.service.ts","../projects/angular-auth-oidc-client/src/lib/iframe/refresh-session-iframe.service.ts","../projects/angular-auth-oidc-client/src/lib/callback/refresh-session-refresh-token.service.ts","../projects/angular-auth-oidc-client/src/lib/callback/periodically-token-check.service.ts","../projects/angular-auth-oidc-client/src/lib/config/auth-well-known-data.service.ts","../projects/angular-auth-oidc-client/src/lib/config/auth-well-known.service.ts","../projects/angular-auth-oidc-client/src/lib/callback/refresh-session.service.ts","../projects/angular-auth-oidc-client/src/lib/iframe/check-session.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/login/popup/popup.service.ts","../../projects/angular-auth-oidc-client/src/lib/check-auth.service.ts","../projects/angular-auth-oidc-client/src/lib/config-validation/rule.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/config-validation/rules/index.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/config-validation/rules/ensure-sts-server.rule.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/config-validation/rules/use-offline-scope-with-silent-renew.rule.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/config-validation/rules/ensure-redirect-url.rule.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/config-validation/rules/ensure-clientId.rule.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/config-validation/rules/ensure-silentRenewUrl-with-no-refreshtokens.rule.ts","../projects/angular-auth-oidc-client/src/lib/config-validation/config-validation.service.ts","../projects/angular-auth-oidc-client/src/lib/config/config.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/utils/redirect/redirect.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/login/response-type-validation/response-type-validation.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/login/par/par.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/login/par/par-login.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/login/popup/popup-login.service.ts","../esm2015/projects/angular-auth-oidc-client/src/lib/login/standard/standard-login.service.ts","../projects/angular-auth-oidc-client/src/lib/login/login.service.ts","../projects/angular-auth-oidc-client/src/lib/logoffRevoke/logoff-revocation.service.ts","../../projects/angular-auth-oidc-client/src/lib/oidc.security.service.ts","../projects/angular-auth-oidc-client/src/lib/storage/browser-storage.service.ts","../../projects/angular-auth-oidc-client/src/lib/auth.module.ts","../projects/angular-auth-oidc-client/src/lib/auto-login/auto-login.guard.ts","../projects/angular-auth-oidc-client/src/lib/interceptor/auth.interceptor.ts"],"names":["LogLevel","PlatformProvider","platformId","this","Object","defineProperty","prototype","isPlatformBrowser","Injectable","Inject","args","PLATFORM_ID","DEFAULT_CONFIG","stsServer","authWellknownEndpoint","redirectUrl","clientId","responseType","scope","hdParam","postLogoutRedirectUri","startCheckSession","silentRenew","silentRenewUrl","silentRenewTimeoutInSeconds","renewTimeBeforeTokenExpiresInSeconds","useRefreshToken","usePushedAuthorisationRequests","ignoreNonceAfterRefresh","postLoginRoute","forbiddenRoute","unauthorizedRoute","autoUserinfo","autoCleanStateAfterAuthentication","triggerAuthorizationResultEvent","logLevel","Warn","issValidationOff","historyCleanupOff","maxIdTokenIatOffsetAllowedInSeconds","disableIatOffsetValidation","storage","Storage","sessionStorage","customParams","eagerLoadAuthWellKnownEndpoints","disableRefreshIdTokenAuthTimeValidation","tokenRefreshInSeconds","refreshTokenRetryInSeconds","ngswBypass","ConfigurationProvider","platformProvider","hasValidConfig","openIdConfigurationInternal","getOpenIDConfiguration","setConfig","configuration","assign","console","warn","setSpecialCases","currentConfig","isBrowser","HttpBaseService","http","get","url","params","post","body","HttpClient","NGSW_CUSTOM_PARAM","DataService","httpClient","configurationProvider","token","headers","prepareHeaders","HttpParams","set","headersParams","HttpHeaders","decodeURIComponent","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","__makeTemplateObject","cooked","raw","EventTypes","LoggerService","logError","message","_i","loggingIsTurnedOff","apply","logWarning","logLevelIsSet","currentLogLevelIsEqualOrSmallerThan","logDebug","Debug","log","logLevelToCompare","undefined","None","PublicEventsService","notify","ReplaySubject","fireEvent","type","registerForEvents","asObservable","StoragePersistanceService","oidcSecurityStorage","read","key","keyToRead","createKeyWithPrefix","write","keyToStore","remove","resetStorageFlowData","resetAuthStateInStorage","getAccessToken","getIdToken","_a","id_token","getRefreshToken","refresh_token","config","AbstractSecurityStorage","TokenHelperService","loggerService","getTokenExpirationDate","dataIdToken","hasOwnProperty","Date","toUTCString","date","setUTCSeconds","exp","getHeaderFromToken","encoded","tokenIsValid","getPartOfToken","getPayloadFromToken","getSignatureFromToken","index","partOfToken","extractPartOfToken","result","urlBase64Decode","JSON","parse","str","output","replace","Error","decoded","window","atob","Buffer","from","toString","split","map","c","charCodeAt","slice","join","err","includes","TokenValidationService","tokenHelperService","keyAlgorithms","hasIdTokenExpired","offsetSeconds","validateIdTokenExpNotExpired","decodedIdToken","tokenExpirationDate","tokenExpirationValue","valueOf","nowWithOffset","tokenNotExpired","validateAccessTokenNotExpired","accessTokenExpiresAt","accessTokenExpirationValue","validateRequiredIdToken","validated","validateIdTokenIatMaxOffset","maxOffsetAllowedInSeconds","dateTimeIatIdToken","iat","diff","maxOffsetAllowedInMilliseconds","validateIdTokenNonce","localNonce","nonce","refreshTokenNoncePlaceholder","validateIdTokenIss","authWellKnownEndpointsIssuer","iss","validateIdTokenAud","aud","Array","isArray","validateIdTokenAzpExistsIfMoreThanOneAud","azp","validateIdTokenAzpValid","validateStateFromHashCallback","state","localState","validateSignatureIdToken","idToken","jwtkeys","keys","headerData","constructor","kid","alg","jwtKtyToUse","charAt","isValid","_h","_j","publicKey","KEYUTIL","getKey","KJUR","jws","JWS","verify","amountOfMatchingKeys","_d","_e","kty","use","_f","_g","publickey","validateIdTokenAtHash","accessToken","atHash","idTokenAlg","sha","testData","generateAtHash","testValue","generateCodeChallenge","codeVerifier","hash","crypto","Util","hashString","hextob64u","first128bits","substr","AuthStateService","storagePersistanceService","publicEventsService","tokenValidationService","authorizedInternal$","BehaviorSubject","setAuthorizedAndFireEvent","setUnauthorizedAndFireEvent","updateAndPublishAuthState","authorizationResult","NewAuthorizationResult","setAuthorizationData","authResult","persistAccessTokenExpirationTime","isAuthorized","decodeURIComponentSafely","areAuthStorageTokensValid","hasAccessTokenExpiredIfExpiryExists","tokenToCheck","idTokenExpired","IdTokenExpired","accessTokenExpiresIn","hasExpired","TokenExpired","expires_in","accessTokenExpiryTime","STORAGE_KEY","AutoLoginService","getStoredRedirectRoute","localStorage","getItem","saveStoredRedirectRoute","setItem","deleteStoredRedirectRoute","removeItem","RandomService","doc","createRandom","requiredLength","arr","Uint8Array","getCrypto","getRandomValues","toHex","randomString","dec","characters","values","Uint32Array","defaultView","msCrypto","DOCUMENT","FlowsDataService","randomService","createNonce","setNonce","getAuthStateControl","setAuthStateControl","authStateControl","getExistingOrCreateAuthStateControl","setSessionState","sessionState","getCodeVerifier","createCodeVerifier","isSilentRenewRunning","storageObject","timeOutInMilliseconds","dateOfLaunchedProcessUtc","currentDateUtc","toISOString","Math","abs","resetSilentRenewRunning","setSilentRenewRunning","stringify","FlowHelper","isCurrentFlowCodeFlow","currentFlowIs","isCurrentFlowAnyImplicitFlow","isCurrentFlowImplicitFlowWithAccessToken","isCurrentFlowImplicitFlowWithoutAccessToken","isCurrentFlowCodeFlowWithRefreshTokens","flowTypes","some","x","UriEncoder","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeValue","CALLBACK_PARAMS_TO_CHECK","UrlService","flowsDataService","flowHelper","getUrlParameter","urlToCheck","name","results","RegExp","exec","isCallbackFromSts","currentUrl","_this","getRefreshSessionSilentRenewUrl","createUrlCodeFlowWithSilentRenew","createUrlImplicitFlowWithSilentRenew","getAuthorizeParUrl","requestUri","authWellKnownEndPoints","authorizationEndpoint","urlParts","authorizationUrl","fromString","encoder","append","getAuthorizeUrl","createUrlCodeFlowAuthorize","createUrlImplicitFlowAuthorize","createEndSessionUrl","idTokenHint","endSessionEndpoint","authorizationEndsessionUrl","getPostLogoutRedirectUrl","createRevocationEndpointBodyAccessToken","getClientId","createRevocationEndpointBodyRefreshToken","getRevocationEndpointUrl","revocationEndpoint","createBodyForCodeFlowCodeRequest","code","customTokenParams","dataForBody","oneLineTrim","templateObject_1","customParamText","composeCustomParams","templateObject_2","getSilentRenewUrl","templateObject_3","getRedirectUrl","templateObject_4","createBodyForCodeFlowRefreshTokensRequest","refreshToken","templateObject_5","createBodyForParCodeFlowRequest","customParamsRequest","codeChallenge","templateObject_6","createAuthorizeUrl","prompt","customRequestParams","_c","entries","_b","AuthorizedState","ValidationResult","CodeFlowCallbackHandlerService","urlService","dataService","codeFlowCallback","throwError","initialCallbackContext","isRenewProcess","jwtKeys","validationResult","existingIdToken","of","codeFlowCodeRequest","callbackContext","authWellKnown","tokenEndpoint","bodyForCodeFlow","pipe","switchMap","response","session_state","retryWhen","handleRefreshRetry","catchError","errorMessage","errors","mergeMap","HttpErrorResponse","ProgressEvent","timer","UserService","oidcDataService","eventService","userDataInternal$","getAndPersistUserDataInStore","existingUserDataFromStorage","getUserDataFromStore","haveUserData","setUserDataToStore","renewUserInfoAfterTokenRenew","getUserDataOidcFlowAndSave","sub","userData","publishUserDataIfExists","UserDataChanged","resetUserDataInStore","idTokenSub","getIdentityUserData","data","validateUserDataSubIdToken","userinfoEndpoint","retry","userdataSub","ResetAuthDataService","authStateService","userService","resetAuthorizationData","SigninKeyDataService","getSigningKeys","jwksUri","handleErrorGetSigningKeys","errorResponse","errMsg","HttpResponse","status","statusText","HistoryJwtKeysCallbackHandlerService","signInKeyDataService","resetAuthDataService","callbackHistoryAndResetJwtKeys","historyCleanUpTurnedOn","resetBrowserHistory","handleResultErrorFromCallback","SecureTokenServerError","LoginRequired","authorizationState","Unauthorized","history","replaceState","document","title","location","origin","pathname","ImplicitFlowCallbackHandlerService","implicitFlowCallback","isRenewProcessData","reduce","resultData","item","parts","shift","RefreshSessionCallbackHandlerService","refreshSessionWithRefreshTokens","stateData","RefreshTokenCallbackHandlerService","refreshTokensRequestTokens","EqualityService","isStringEqualOrNonOrderedArrayEqual","value1","value2","isNullOrUndefined","oneValueIsStringAndTheOtherIsArray","bothValuesAreStrings","bothValuesAreArrays","arraysHaveEqualContent","areEqual","arraysStrictEqual","bothValuesAreObjects","toLowerCase","valueIsString","valueIsObject","String","arr1","arr2","v","val","authResponseIsValid","NotSet","StateValidationService","equalityService","getValidatedStateResult","StateValidationResult","validateState","toReturn","StatesDoNotMatch","handleUnsuccessfulValidation","access_token","SignatureFailed","authNonce","IncorrectNonce","RequiredPropertyMissing","MaxOffsetExpired","NoAuthWellKnownEndPoints","issuer","IssDoesNotMatchIssuer","IncorrectAud","IncorrectAzp","isIdTokenAfterRefreshTokenRequestValid","IncorrectIdTokenClaimsAfterRefresh","Ok","handleSuccessfulValidation","idTokenHeader","at_hash","IncorrectAtHash","newIdToken","auth_time","StateValidationCallbackHandlerService","stateValidationService","callbackStateValidation","publishUnauthorizedState","stateValidationResult","UserCallbackHandlerService","callbackUser","publishAuthorizedState","Authorized","FlowsService","codeFlowCallbackHandlerService","implicitFlowCallbackHandlerService","historyJwtKeysCallbackHandlerService","userHandlerService","stateValidationCallbackHandlerService","refreshSessionCallbackHandlerService","refreshTokenCallbackHandlerService","processCodeFlowCallback","processSilentRenewCodeFlowCallback","firstContext","processImplicitFlowCallback","processRefreshToken","IntervallService","zone","runTokenValidationRunning","stopPeriodicallTokenCheck","unsubscribe","startPeriodicTokenCheck","repeatAfterSeconds","millisecondsDelayBetweenTokenCheck","Observable","subscriber","intervalId","runOutsideAngular","setInterval","clearInterval","providedIn","NgZone","ImplicitFlowCallbackService","flowsService","router","intervalService","authorizedImplicitFlowCallback","tap","navigate","Router","CodeFlowCallbackService","intervallService","authorizedCallbackWithCode","CallbackService","implicitFlowCallbackService","codeFlowCallbackService","stsCallbackInternal$","Subject","isCallback","handleCallbackAndFireEvents","currentCallbackUrl","callback$","IFrameService","getExistingIFrame","identifier","iFrameOnParent","getIFrameFromParentWindow","isIFrameElement","iFrameOnSelf","getIFrameFromWindow","addIFrameToWindowBody","sessionIframe","createElement","id","style","display","appendChild","iFrameElement","parent","getElementById","element","HTMLIFrameElement","IFRAME_FOR_SILENT_RENEW_IDENTIFIER","SilentRenewService","iFrameService","refreshSessionWithIFrameCompletedInternal$","getOrCreateIframe","existingIframe","getExistingIframe","isSilentRenewConfigured","codeFlowCallbackSilentRenewIframe","errorFromFlow","silentRenewEventHandler","detail","subscribe","RefreshSessionIframeService","silentRenewService","rendererFactory","renderer","createRenderer","refreshSessionWithIframe","sendAuthorizeRequestUsingSilentRenew","initSilentRenewRequest","observer","onLoadHandler","removeEventListener","complete","addEventListener","contentWindow","instanceId","random","initDestroyHandler","listen","renewDestroyHandler","dispatchEvent","CustomEvent","RendererFactory2","RefreshSessionRefreshTokenService","PeriodicallyTokenCheckService","refreshSessionIframeService","refreshSessionRefreshTokenService","startTokenValidationPeriodically","periodicallyCheck$","userDataFromStore","idTokenHasExpired","accessTokenHasExpired","WELL_KNOWN_SUFFIX","AuthWellKnownDataService","getWellKnownEndPointsFromUrl","getWellKnownDocument","wellKnownEndpoints","jwks_uri","authorization_endpoint","token_endpoint","userinfo_endpoint","end_session_endpoint","checkSessionIframe","check_session_iframe","revocation_endpoint","introspectionEndpoint","introspection_endpoint","parEndpoint","pushed_authorization_request_endpoint","wellKnownEndpoint","AuthWellKnownService","getAuthWellKnownEndPoints","authWellknownEndpointUrl","alreadySavedWellKnownEndpoints","mappedWellKnownEndpoints","storeWellKnownEndpoints","ConfigLoadingFailed","RefreshSessionService","authWellKnownService","forceRefreshSession","startRefreshSession","timeOutTime","forkJoin","refreshSessionWithIFrameCompleted$","take","timeout","timeoutRetryStrategy","bind","errorAttempts","currentAttempt","TimeoutError","IFRAME_FOR_CHECK_SESSION_IDENTIFIER","CheckSessionService","checkSessionReceived","lastIFrameRefresh","outstandingMessages","heartBeatInterval","iframeRefreshInterval","checkSessionChangedInternal$","isCheckSessionConfigured","start","scheduledHeartBeatRunning","pollServerSession","stop","clearScheduledHeartBeat","serverStateChanged","init","now","onload","pollServerSessionRecur","iframeOrigin","URL","postMessage","setTimeout","run","clearTimeout","messageHandler","existingIFrame","startsWith","source","CheckSessionReceived","bindMessageEventToIframe","iframeMessageEvent","frame","PopUpService","STORAGE_IDENTIFIER","receivedUrlInternal$","isCurrentlyInPopup","popup","opener","openPopUp","popupOptions","optionsToPass","getOptions","popUp","open","listener","event","cleanUp","sendMessageToMainWindow","sendMessage","href","close","options","width","height","left","top","CheckAuthService","checkSessionService","callbackService","refreshSessionService","periodicallyTokenCheckService","popupService","autoLoginService","checkAuth","isAuthenticated","startCheckSessionAndValidation","savedRouteForRedirect","checkAuthIncludingServer","isAuth","POSITIVE_VALIDATION_RESULT","messages","level","allRules","passedConfig","hasRefreshToken","hasSilentRenew","hasOfflineScope","usesSilentRenew","usesRefreshToken","hasSilentRenewUrl","ConfigValidationService","validateConfig","allMessages","rule","filter","allErrorMessages","getAllMessagesOfType","allWarnings","acc","OidcConfigService","configValidationService","withConfig","passedAuthWellKnownEndpoints","Promise","resolve","reject","usedConfig","alreadyExistingAuthWellKnownEndpoints","ConfigLoaded","wellknown","wellknownEndPoints","RedirectService","redirectTo","ResponseTypeValidationService","hasConfigValidResponseType","ParService","postParRequest","expiresIn","request_uri","ParLoginService","responseTypeValidationService","redirectService","checkAuthService","parService","loginPar","authOptions","urlHandler","loginWithPopUpPar","receivedUrl$","receivedUrl","PopUpLoginService","loginWithPopUpStandard","authUrl","StandardLoginService","loginStandard","LoginService","parLoginService","popUpLoginService","standardLoginService","login","loginWithPopUp","LogoffRevocationService","logoff","endSessionUrl","getEndSessionUrl","logoffLocal","logoffAndRevokeTokens","revokeRefreshToken","revokeAccessToken","accessTok","refreshTok","OidcSecurityService","logoffRevocationService","loginService","userData$","authorized$","checkSessionChanged$","stsCallback$","getToken","getPayloadFromIdToken","encode","setState","getState","authorize","authorizeWithPopUp","BrowserStorageService","configProvider","hasStorage","getStorage","AuthModule","forRoot","ngModule","providers","provide","useClass","NgModule","imports","CommonModule","HttpClientModule","declarations","exports","AutoLoginGuard","canLoad","route","segments","path","canActivate","concatMap","isAuthenticatedAlready","storedRoute","AuthInterceptor","intercept","req","secureRoutes","handle","matchingRoute","find","clone"],"mappings":"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","sourcesContent":["// eslint-disable-next-line no-shadow\nexport enum LogLevel {\n  None,\n  Debug,\n  Warn,\n  Error,\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n\n@Injectable()\nexport class PlatformProvider {\n  get isBrowser() {\n    return isPlatformBrowser(this.platformId);\n  }\n  constructor(@Inject(PLATFORM_ID) private platformId: string) {}\n}\n","import { LogLevel } from '../logging/log-level';\nimport { OpenIdConfiguration } from './openid-configuration';\n\nexport const DEFAULT_CONFIG: OpenIdConfiguration = {\n  stsServer: 'https://please_set',\n  authWellknownEndpoint: '',\n  redirectUrl: 'https://please_set',\n  clientId: 'please_set',\n  responseType: 'code',\n  scope: 'openid email profile',\n  hdParam: '',\n  postLogoutRedirectUri: 'https://please_set',\n  startCheckSession: false,\n  silentRenew: false,\n  silentRenewUrl: 'https://please_set',\n  silentRenewTimeoutInSeconds: 20,\n  renewTimeBeforeTokenExpiresInSeconds: 0,\n  useRefreshToken: false,\n  usePushedAuthorisationRequests: false,\n  ignoreNonceAfterRefresh: false,\n  postLoginRoute: '/',\n  forbiddenRoute: '/forbidden',\n  unauthorizedRoute: '/unauthorized',\n  autoUserinfo: true,\n  autoCleanStateAfterAuthentication: true,\n  triggerAuthorizationResultEvent: false,\n  logLevel: LogLevel.Warn,\n  issValidationOff: false,\n  historyCleanupOff: false,\n  maxIdTokenIatOffsetAllowedInSeconds: 120,\n  disableIatOffsetValidation: false,\n  storage: typeof Storage !== 'undefined' ? sessionStorage : null,\n  customParams: {},\n  eagerLoadAuthWellKnownEndpoints: true,\n  disableRefreshIdTokenAuthTimeValidation: false,\n  tokenRefreshInSeconds: 4,\n  refreshTokenRetryInSeconds: 3,\n  ngswBypass: false,\n};\n","import { Injectable } from '@angular/core';\nimport { PlatformProvider } from '../utils/platform-provider/platform.provider';\nimport { DEFAULT_CONFIG } from './default-config';\nimport { OpenIdConfiguration } from './openid-configuration';\n\n@Injectable()\nexport class ConfigurationProvider {\n  private openIdConfigurationInternal: OpenIdConfiguration;\n\n  constructor(private platformProvider: PlatformProvider) {}\n\n  hasValidConfig() {\n    return !!this.openIdConfigurationInternal;\n  }\n\n  getOpenIDConfiguration(): OpenIdConfiguration {\n    return this.openIdConfigurationInternal || null;\n  }\n\n  setConfig(configuration: OpenIdConfiguration) {\n    this.openIdConfigurationInternal = { ...DEFAULT_CONFIG, ...configuration };\n\n    if (configuration?.storage) {\n      console.warn(\n        `PLEASE NOTE: The storage in the config will be deprecated in future versions:\n                Please pass the custom storage in forRoot() as documented`\n      );\n    }\n\n    this.setSpecialCases(this.openIdConfigurationInternal);\n\n    return this.openIdConfigurationInternal;\n  }\n\n  private setSpecialCases(currentConfig: OpenIdConfiguration) {\n    if (!this.platformProvider.isBrowser) {\n      currentConfig.startCheckSession = false;\n      currentConfig.silentRenew = false;\n      currentConfig.useRefreshToken = false;\n      currentConfig.usePushedAuthorisationRequests = false;\n    }\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class HttpBaseService {\n  constructor(private http: HttpClient) {}\n\n  get<T>(url: string, params?: { [key: string]: any }): Observable<T> {\n    return this.http.get<T>(url, params);\n  }\n\n  post<T>(url: string, body: any, params?: { [key: string]: any }): Observable<T> {\n    return this.http.post<T>(url, body, params);\n  }\n}\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { HttpBaseService } from './http-base.service';\n\nconst NGSW_CUSTOM_PARAM = 'ngsw-bypass';\n\n@Injectable()\nexport class DataService {\n  constructor(private httpClient: HttpBaseService, private readonly configurationProvider: ConfigurationProvider) {}\n\n  get<T>(url: string, token?: string): Observable<T> {\n    const headers = this.prepareHeaders(token);\n    let params = new HttpParams();\n\n    const { ngswBypass } = this.configurationProvider.getOpenIDConfiguration();\n    if (ngswBypass) {\n      params = params.set(NGSW_CUSTOM_PARAM, '');\n    }\n    return this.httpClient.get<T>(url, {\n      headers,\n      params,\n    });\n  }\n\n  post<T>(url: string, body: any, headersParams?: HttpHeaders) {\n    const headers = headersParams || this.prepareHeaders();\n    let params = new HttpParams();\n\n    const { ngswBypass } = this.configurationProvider.getOpenIDConfiguration();\n    if (ngswBypass) {\n      params = params.set(NGSW_CUSTOM_PARAM, '');\n    }\n\n    return this.httpClient.post<T>(url, body, { headers, params });\n  }\n\n  private prepareHeaders(token?: string) {\n    let headers = new HttpHeaders();\n    headers = headers.set('Accept', 'application/json');\n\n    if (!!token) {\n      headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\n    }\n\n    return headers;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","// eslint-disable-next-line no-shadow\nexport enum EventTypes {\n  /**\n   *  This only works in the AppModule Constructor\n   */\n  ConfigLoaded,\n  ConfigLoadingFailed,\n  CheckSessionReceived,\n  UserDataChanged,\n  NewAuthorizationResult,\n  TokenExpired,\n  IdTokenExpired,\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LogLevel } from './log-level';\n\n@Injectable()\nexport class LoggerService {\n  constructor(private configurationProvider: ConfigurationProvider) {}\n\n  logError(message: any, ...args: any[]) {\n    if (this.loggingIsTurnedOff()) {\n      return;\n    }\n\n    if (!!args && args.length) {\n      console.error(message, ...args);\n    } else {\n      console.error(message);\n    }\n  }\n\n  logWarning(message: any, ...args: any[]) {\n    if (!this.logLevelIsSet()) {\n      return;\n    }\n\n    if (this.loggingIsTurnedOff()) {\n      return;\n    }\n\n    if (!this.currentLogLevelIsEqualOrSmallerThan(LogLevel.Warn)) {\n      return;\n    }\n\n    if (!!args && args.length) {\n      console.warn(message, ...args);\n    } else {\n      console.warn(message);\n    }\n  }\n\n  logDebug(message: any, ...args: any[]) {\n    if (!this.logLevelIsSet()) {\n      return;\n    }\n\n    if (this.loggingIsTurnedOff()) {\n      return;\n    }\n\n    if (!this.currentLogLevelIsEqualOrSmallerThan(LogLevel.Debug)) {\n      return;\n    }\n\n    if (!!args && args.length) {\n      console.log(message, ...args);\n    } else {\n      console.log(message);\n    }\n  }\n\n  private currentLogLevelIsEqualOrSmallerThan(logLevelToCompare: LogLevel) {\n    const { logLevel } = this.configurationProvider.getOpenIDConfiguration() || {};\n    return logLevel <= logLevelToCompare;\n  }\n\n  private logLevelIsSet() {\n    const { logLevel } = this.configurationProvider.getOpenIDConfiguration() || {};\n\n    if (logLevel === null) {\n      return false;\n    }\n\n    if (logLevel === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private loggingIsTurnedOff() {\n    const { logLevel } = this.configurationProvider.getOpenIDConfiguration() || {};\n\n    return logLevel === LogLevel.None;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { EventTypes } from './event-types';\nimport { OidcClientNotification } from './notification';\n\n@Injectable()\nexport class PublicEventsService {\n  private notify = new ReplaySubject<OidcClientNotification<any>>(1);\n\n  fireEvent<T>(type: EventTypes, value?: T) {\n    this.notify.next({ type, value });\n  }\n\n  registerForEvents() {\n    return this.notify.asObservable();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Implement this class-interface to create a custom storage.\n */\n@Injectable()\nexport abstract class AbstractSecurityStorage {\n  /**\n   * This method must contain the logic to read the storage.\n   *\n   * @return The value of the given key\n   */\n  public abstract read(key: string): any;\n\n  /**\n   * This method must contain the logic to write the storage.\n   *\n   * @param value The value for the given key\n   */\n  public abstract write(key: string, value: any): void;\n\n  /**\n   * This method must contain the logic to remove an item from the storage.\n   *\n   * @param key The value for the key to be removed\n   */\n  public abstract remove(key: string): void;\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { AbstractSecurityStorage } from './abstract-security-storage';\n\nexport type StorageKeys =\n  | 'authnResult'\n  | 'authzData'\n  | 'access_token_expires_at'\n  | 'authWellKnownEndPoints'\n  | 'userData'\n  | 'authNonce'\n  | 'codeVerifier'\n  | 'authStateControl'\n  | 'session_state'\n  | 'storageSilentRenewRunning'\n  | 'storageCustomRequestParams';\n\n@Injectable()\nexport class StoragePersistanceService {\n  constructor(\n    private readonly oidcSecurityStorage: AbstractSecurityStorage,\n    private readonly configurationProvider: ConfigurationProvider\n  ) {}\n\n  read(key: StorageKeys) {\n    const keyToRead = this.createKeyWithPrefix(key);\n    return this.oidcSecurityStorage.read(keyToRead);\n  }\n\n  write(key: StorageKeys, value: any) {\n    const keyToStore = this.createKeyWithPrefix(key);\n    this.oidcSecurityStorage.write(keyToStore, value);\n  }\n\n  remove(key: StorageKeys) {\n    const keyToStore = this.createKeyWithPrefix(key);\n    this.oidcSecurityStorage.remove(keyToStore);\n  }\n\n  resetStorageFlowData() {\n    this.remove('session_state');\n    this.remove('storageSilentRenewRunning');\n    this.remove('codeVerifier');\n    this.remove('userData');\n    this.remove('storageCustomRequestParams');\n    this.remove('access_token_expires_at');\n  }\n\n  resetAuthStateInStorage() {\n    this.remove('authzData');\n    this.remove('authnResult');\n  }\n\n  getAccessToken(): any {\n    return this.read('authzData');\n  }\n\n  getIdToken(): any {\n    return this.read('authnResult')?.id_token;\n  }\n\n  getRefreshToken(): any {\n    return this.read('authnResult')?.refresh_token;\n  }\n\n  private createKeyWithPrefix(key: string) {\n    const config = this.configurationProvider.getOpenIDConfiguration();\n    const prefix = config?.clientId || '';\n    return `${prefix}_${key}`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\n\nconst PARTS_OF_TOKEN = 3;\n@Injectable()\nexport class TokenHelperService {\n  constructor(private readonly loggerService: LoggerService) {}\n\n  getTokenExpirationDate(dataIdToken: any): Date {\n    if (!dataIdToken.hasOwnProperty('exp')) {\n      return new Date(new Date().toUTCString());\n    }\n\n    const date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    date.setUTCSeconds(dataIdToken.exp);\n\n    return date;\n  }\n\n  getHeaderFromToken(token: any, encoded: boolean) {\n    if (!this.tokenIsValid(token)) {\n      return {};\n    }\n\n    return this.getPartOfToken(token, 0, encoded);\n  }\n\n  getPayloadFromToken(token: any, encoded: boolean) {\n    if (!this.tokenIsValid(token)) {\n      return {};\n    }\n\n    return this.getPartOfToken(token, 1, encoded);\n  }\n\n  getSignatureFromToken(token: any, encoded: boolean) {\n    if (!this.tokenIsValid(token)) {\n      return {};\n    }\n\n    return this.getPartOfToken(token, 2, encoded);\n  }\n\n  private getPartOfToken(token: string, index: number, encoded: boolean) {\n    const partOfToken = this.extractPartOfToken(token, index);\n\n    if (encoded) {\n      return partOfToken;\n    }\n\n    const result = this.urlBase64Decode(partOfToken);\n    return JSON.parse(result);\n  }\n\n  private urlBase64Decode(str: string) {\n    let output = str.replace(/-/g, '+').replace(/_/g, '/');\n\n    switch (output.length % 4) {\n      case 0:\n        break;\n      case 2:\n        output += '==';\n        break;\n      case 3:\n        output += '=';\n        break;\n      default:\n        throw Error('Illegal base64url string!');\n    }\n\n    const decoded = typeof window !== 'undefined' ? window.atob(output) : Buffer.from(output, 'base64').toString('binary');\n\n    try {\n      // Going backwards: from bytestream, to percent-encoding, to original string.\n      return decodeURIComponent(\n        decoded\n          .split('')\n          .map((c: string) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n      );\n    } catch (err) {\n      return decoded;\n    }\n  }\n\n  private tokenIsValid(token: string) {\n    if (!token) {\n      this.loggerService.logError(`token '${token}' is not valid --> token falsy`);\n      return false;\n    }\n\n    if (!(token as string).includes('.')) {\n      this.loggerService.logError(`token '${token}' is not valid --> no dots included`);\n      return false;\n    }\n\n    const parts = token.split('.');\n\n    if (parts.length !== PARTS_OF_TOKEN) {\n      this.loggerService.logError(`token '${token}' is not valid --> token has to have exactly ${PARTS_OF_TOKEN - 1} dots`);\n      return false;\n    }\n\n    return true;\n  }\n\n  private extractPartOfToken(token: string, index: number) {\n    return token.split('.')[index];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { hextob64u, KEYUTIL, KJUR } from 'jsrsasign-reduced';\nimport { LoggerService } from '../logging/logger.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\n\n// http://openid.net/specs/openid-connect-implicit-1_0.html\n\n// id_token\n// id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n// MUST exactly match the value of the iss (issuer) Claim.\n//\n// id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n// by the iss (issuer) Claim as an audience.The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience,\n// or if it contains additional audiences not trusted by the Client.\n//\n// id_token C3: If the ID Token contains multiple audiences, the Client SHOULD verify that an azp Claim is present.\n//\n// id_token C4: If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n//\n// id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the\n// alg Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n//\n// id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the OpenID Connect\n// Core 1.0\n// [OpenID.Core] specification.\n//\n// id_token C7: The current time MUST be before the time represented by the exp Claim (possibly allowing for some small leeway to account\n// for clock skew).\n//\n// id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n// limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n//\n// id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one that was sent\n// in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.The precise method for detecting replay attacks\n// is Client specific.\n//\n// id_token C10: If the acr Claim was requested, the Client SHOULD check that the asserted Claim Value is appropriate.\n// The meaning and processing of acr Claim Values is out of scope for this document.\n//\n// id_token C11: When a max_age request is made, the Client SHOULD check the auth_time Claim value and request re- authentication\n// if it determines too much time has elapsed since the last End- User authentication.\n\n// Access Token Validation\n// access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n// for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n// access_token C2: Take the left- most half of the hash and base64url- encode it.\n// access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash is present\n// in the ID Token.\n\n@Injectable()\nexport class TokenValidationService {\n  static refreshTokenNoncePlaceholder = '--RefreshToken--';\n  keyAlgorithms: string[] = ['HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'PS256', 'PS384', 'PS512'];\n\n  constructor(private tokenHelperService: TokenHelperService, private loggerService: LoggerService) {}\n\n  // id_token C7: The current time MUST be before the time represented by the exp Claim\n  // (possibly allowing for some small leeway to account for clock skew).\n  hasIdTokenExpired(token: string, offsetSeconds?: number): boolean {\n    const decoded = this.tokenHelperService.getPayloadFromToken(token, false);\n\n    return !this.validateIdTokenExpNotExpired(decoded, offsetSeconds);\n  }\n\n  // id_token C7: The current time MUST be before the time represented by the exp Claim\n  // (possibly allowing for some small leeway to account for clock skew).\n  validateIdTokenExpNotExpired(decodedIdToken: string, offsetSeconds?: number): boolean {\n    const tokenExpirationDate = this.tokenHelperService.getTokenExpirationDate(decodedIdToken);\n    offsetSeconds = offsetSeconds || 0;\n\n    if (!tokenExpirationDate) {\n      return false;\n    }\n\n    const tokenExpirationValue = tokenExpirationDate.valueOf();\n    const nowWithOffset = new Date(new Date().toUTCString()).valueOf() + offsetSeconds * 1000;\n    const tokenNotExpired = tokenExpirationValue > nowWithOffset;\n\n    this.loggerService.logDebug(`Has id_token expired: ${!tokenNotExpired}, ${tokenExpirationValue} > ${nowWithOffset}`);\n\n    // Token not expired?\n    return tokenNotExpired;\n  }\n\n  validateAccessTokenNotExpired(accessTokenExpiresAt: Date, offsetSeconds?: number): boolean {\n    // value is optional, so if it does not exist, then it has not expired\n    if (!accessTokenExpiresAt) {\n      return true;\n    }\n\n    offsetSeconds = offsetSeconds || 0;\n    const accessTokenExpirationValue = accessTokenExpiresAt.valueOf();\n    const nowWithOffset = new Date(new Date().toUTCString()).valueOf() + offsetSeconds * 1000;\n    const tokenNotExpired = accessTokenExpirationValue > nowWithOffset;\n\n    this.loggerService.logDebug(`Has access_token expired: ${!tokenNotExpired}, ${accessTokenExpirationValue} > ${nowWithOffset}`);\n\n    // access token not expired?\n    return tokenNotExpired;\n  }\n\n  // iss\n  // REQUIRED. Issuer Identifier for the Issuer of the response.The iss value is a case-sensitive URL using the\n  // https scheme that contains scheme, host,\n  // and optionally, port number and path components and no query or fragment components.\n  //\n  // sub\n  // REQUIRED. Subject Identifier.Locally unique and never reassigned identifier within the Issuer for the End- User,\n  // which is intended to be consumed by the Client, e.g., 24400320 or AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4.\n  // It MUST NOT exceed 255 ASCII characters in length.The sub value is a case-sensitive string.\n  //\n  // aud\n  // REQUIRED. Audience(s) that this ID Token is intended for. It MUST contain the OAuth 2.0 client_id of the Relying Party as an\n  // audience value.\n  // It MAY also contain identifiers for other audiences.In the general case, the aud value is an array of case-sensitive strings.\n  // In the common special case when there is one audience, the aud value MAY be a single case-sensitive string.\n  //\n  // exp\n  // REQUIRED. Expiration time on or after which the ID Token MUST NOT be accepted for processing.\n  // The processing of this parameter requires that the current date/ time MUST be before the expiration date/ time listed in the value.\n  // Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.\n  // Its value is a JSON [RFC7159] number representing the number of seconds from 1970- 01 - 01T00: 00:00Z as measured in UTC until\n  // the date/ time.\n  // See RFC 3339 [RFC3339] for details regarding date/ times in general and UTC in particular.\n  //\n  // iat\n  // REQUIRED. Time at which the JWT was issued. Its value is a JSON number representing the number of seconds from\n  // 1970- 01 - 01T00: 00: 00Z as measured\n  // in UTC until the date/ time.\n  validateRequiredIdToken(dataIdToken: any): boolean {\n    let validated = true;\n    if (!dataIdToken.hasOwnProperty('iss')) {\n      validated = false;\n      this.loggerService.logWarning('iss is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('sub')) {\n      validated = false;\n      this.loggerService.logWarning('sub is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('aud')) {\n      validated = false;\n      this.loggerService.logWarning('aud is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('exp')) {\n      validated = false;\n      this.loggerService.logWarning('exp is missing, this is required in the id_token');\n    }\n\n    if (!dataIdToken.hasOwnProperty('iat')) {\n      validated = false;\n      this.loggerService.logWarning('iat is missing, this is required in the id_token');\n    }\n\n    return validated;\n  }\n\n  // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\n  // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\n  validateIdTokenIatMaxOffset(dataIdToken: any, maxOffsetAllowedInSeconds: number, disableIatOffsetValidation: boolean): boolean {\n    if (disableIatOffsetValidation) {\n      return true;\n    }\n\n    if (!dataIdToken.hasOwnProperty('iat')) {\n      return false;\n    }\n\n    const dateTimeIatIdToken = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    dateTimeIatIdToken.setUTCSeconds(dataIdToken.iat);\n    maxOffsetAllowedInSeconds = maxOffsetAllowedInSeconds || 0;\n\n    const nowInUtc = new Date(new Date().toUTCString());\n    const diff = nowInUtc.valueOf() - dateTimeIatIdToken.valueOf();\n    const maxOffsetAllowedInMilliseconds = maxOffsetAllowedInSeconds * 1000;\n\n    this.loggerService.logDebug(`validate id token iat max offset ${diff} < ${maxOffsetAllowedInMilliseconds}`);\n\n    if (diff > 0) {\n      return diff < maxOffsetAllowedInMilliseconds;\n    }\n\n    return -diff < maxOffsetAllowedInMilliseconds;\n  }\n\n  // id_token C9: The value of the nonce Claim MUST be checked to verify that it is the same value as the one\n  // that was sent in the Authentication Request.The Client SHOULD check the nonce value for replay attacks.\n  // The precise method for detecting replay attacks is Client specific.\n\n  // However the nonce claim SHOULD not be present for the refresh_token grant type\n  // https://bitbucket.org/openid/connect/issues/1025/ambiguity-with-how-nonce-is-handled-on\n  // The current spec is ambiguous and Keycloak does send it.\n  validateIdTokenNonce(dataIdToken: any, localNonce: any, ignoreNonceAfterRefresh: boolean): boolean {\n    const isFromRefreshToken =\n      (dataIdToken.nonce === undefined || ignoreNonceAfterRefresh) && localNonce === TokenValidationService.refreshTokenNoncePlaceholder;\n    if (!isFromRefreshToken && dataIdToken.nonce !== localNonce) {\n      this.loggerService.logDebug('Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + localNonce);\n      return false;\n    }\n\n    return true;\n  }\n\n  // id_token C1: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery)\n  // MUST exactly match the value of the iss (issuer) Claim.\n  validateIdTokenIss(dataIdToken: any, authWellKnownEndpointsIssuer: any): boolean {\n    if ((dataIdToken.iss as string) !== (authWellKnownEndpointsIssuer as string)) {\n      this.loggerService.logDebug(\n        'Validate_id_token_iss failed, dataIdToken.iss: ' +\n          dataIdToken.iss +\n          ' authWellKnownEndpoints issuer:' +\n          authWellKnownEndpointsIssuer\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  // id_token C2: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified\n  // by the iss (issuer) Claim as an audience.\n  // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences\n  // not trusted by the Client.\n  validateIdTokenAud(dataIdToken: any, aud: any): boolean {\n    if (Array.isArray(dataIdToken.aud)) {\n      const result = dataIdToken.aud.includes(aud);\n\n      if (!result) {\n        this.loggerService.logDebug('Validate_id_token_aud array failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n        return false;\n      }\n\n      return true;\n    } else if (dataIdToken.aud !== aud) {\n      this.loggerService.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\n\n      return false;\n    }\n\n    return true;\n  }\n\n  validateIdTokenAzpExistsIfMoreThanOneAud(dataIdToken: any): boolean {\n    if (!dataIdToken) {\n      return false;\n    }\n\n    if (Array.isArray(dataIdToken.aud) && dataIdToken.aud.length > 1 && !dataIdToken.azp) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // If an azp (authorized party) Claim is present, the Client SHOULD verify that its client_id is the Claim Value.\n  validateIdTokenAzpValid(dataIdToken: any, clientId: string): boolean {\n    if (!dataIdToken?.azp) {\n      return true;\n    }\n\n    if (dataIdToken.azp === clientId) {\n      return true;\n    }\n\n    return false;\n  }\n\n  validateStateFromHashCallback(state: any, localState: any): boolean {\n    if ((state as string) !== (localState as string)) {\n      this.loggerService.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + localState);\n      return false;\n    }\n\n    return true;\n  }\n\n  // id_token C5: The Client MUST validate the signature of the ID Token according to JWS [JWS] using the algorithm specified in the alg\n  // Header Parameter of the JOSE Header.The Client MUST use the keys provided by the Issuer.\n  // id_token C6: The alg value SHOULD be RS256. Validation of tokens using other signing algorithms is described in the\n  // OpenID Connect Core 1.0 [OpenID.Core] specification.\n  validateSignatureIdToken(idToken: any, jwtkeys: any): boolean {\n    if (!jwtkeys || !jwtkeys.keys) {\n      return false;\n    }\n\n    const headerData = this.tokenHelperService.getHeaderFromToken(idToken, false);\n\n    if (Object.keys(headerData).length === 0 && headerData.constructor === Object) {\n      this.loggerService.logWarning('id token has no header data');\n      return false;\n    }\n\n    const kid = headerData.kid;\n    const alg = headerData.alg;\n\n    if (!this.keyAlgorithms.includes(alg as string)) {\n      this.loggerService.logWarning('alg not supported', alg);\n      return false;\n    }\n\n    let jwtKtyToUse = 'RSA';\n    if ((alg as string).charAt(0) === 'E') {\n      jwtKtyToUse = 'EC';\n    }\n\n    let isValid = false;\n\n    if (!headerData.hasOwnProperty('kid')) {\n      // exactly 1 key in the jwtkeys and no kid in the Jose header\n      // kty\t\"RSA\" or EC use \"sig\"\n      let amountOfMatchingKeys = 0;\n      for (const key of jwtkeys.keys) {\n        if ((key.kty as string) === jwtKtyToUse && (key.use as string) === 'sig') {\n          amountOfMatchingKeys = amountOfMatchingKeys + 1;\n        }\n      }\n\n      if (amountOfMatchingKeys === 0) {\n        this.loggerService.logWarning('no keys found, incorrect Signature, validation failed for id_token');\n        return false;\n      }\n\n      if (amountOfMatchingKeys > 1) {\n        this.loggerService.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\n        return false;\n      }\n\n      for (const key of jwtkeys.keys) {\n        if ((key.kty as string) === jwtKtyToUse && (key.use as string) === 'sig') {\n          const publickey = KEYUTIL.getKey(key);\n          isValid = KJUR.jws.JWS.verify(idToken, publickey, [alg]);\n          if (!isValid) {\n            this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n          }\n          return isValid;\n        }\n      }\n    } else {\n      // kid in the Jose header of id_token\n      for (const key of jwtkeys.keys) {\n        if ((key.kid as string) === (kid as string)) {\n          const publicKey = KEYUTIL.getKey(key);\n          isValid = KJUR.jws.JWS.verify(idToken, publicKey, [alg]);\n          if (!isValid) {\n            this.loggerService.logWarning('incorrect Signature, validation failed for id_token');\n          }\n          return isValid;\n        }\n      }\n    }\n\n    return isValid;\n  }\n\n  // Accepts ID Token without 'kid' claim in JOSE header if only one JWK supplied in 'jwks_url'\n  //// private validate_no_kid_in_header_only_one_allowed_in_jwtkeys(header_data: any, jwtkeys: any): boolean {\n  ////    this.oidcSecurityCommon.logDebug('amount of jwtkeys.keys: ' + jwtkeys.keys.length);\n  ////    if (!header_data.hasOwnProperty('kid')) {\n  ////        // no kid defined in Jose header\n  ////        if (jwtkeys.keys.length != 1) {\n  ////            this.oidcSecurityCommon.logDebug('jwtkeys.keys.length != 1 and no kid in header');\n  ////            return false;\n  ////        }\n  ////    }\n\n  ////    return true;\n  //// }\n\n  // Access Token Validation\n  // access_token C1: Hash the octets of the ASCII representation of the access_token with the hash algorithm specified in JWA[JWA]\n  // for the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is RS256, the hash algorithm used is SHA-256.\n  // access_token C2: Take the left- most half of the hash and base64url- encode it.\n  // access_token C3: The value of at_hash in the ID Token MUST match the value produced in the previous step if at_hash\n  // is present in the ID Token.\n  validateIdTokenAtHash(accessToken: any, atHash: any, idTokenAlg: string): boolean {\n    this.loggerService.logDebug('at_hash from the server:' + atHash);\n\n    // 'sha256' 'sha384' 'sha512'\n    let sha = 'sha256';\n    if (idTokenAlg.includes('384')) {\n      sha = 'sha384';\n    } else if (idTokenAlg.includes('512')) {\n      sha = 'sha512';\n    }\n\n    const testData = this.generateAtHash('' + accessToken, sha);\n    this.loggerService.logDebug('at_hash client validation not decoded:' + testData);\n    if (testData === (atHash as string)) {\n      return true; // isValid;\n    } else {\n      const testValue = this.generateAtHash('' + decodeURIComponent(accessToken), sha);\n      this.loggerService.logDebug('-gen access--' + testValue);\n      if (testValue === (atHash as string)) {\n        return true; // isValid\n      }\n    }\n\n    return false;\n  }\n\n  generateCodeChallenge(codeVerifier: any): string {\n    const hash = KJUR.crypto.Util.hashString(codeVerifier, 'sha256');\n    const testData = hextob64u(hash);\n\n    return testData;\n  }\n\n  private generateAtHash(accessToken: any, sha: string): string {\n    const hash = KJUR.crypto.Util.hashString(accessToken, sha);\n    const first128bits = hash.substr(0, hash.length / 2);\n    const testData = hextob64u(first128bits);\n\n    return testData;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { TokenValidationService } from '../validation/token-validation.service';\nimport { AuthorizationResult } from './authorization-result';\n\n@Injectable()\nexport class AuthStateService {\n  private authorizedInternal$ = new BehaviorSubject<boolean>(false);\n\n  get authorized$() {\n    return this.authorizedInternal$.asObservable();\n  }\n\n  private get isAuthorized() {\n    return !!this.storagePersistanceService.getAccessToken() && !!this.storagePersistanceService.getIdToken();\n  }\n\n  constructor(\n    private storagePersistanceService: StoragePersistanceService,\n    private loggerService: LoggerService,\n    private publicEventsService: PublicEventsService,\n    private configurationProvider: ConfigurationProvider,\n    private tokenValidationService: TokenValidationService\n  ) {}\n\n  setAuthorizedAndFireEvent(): void {\n    this.authorizedInternal$.next(true);\n  }\n\n  setUnauthorizedAndFireEvent(): void {\n    this.storagePersistanceService.resetAuthStateInStorage();\n    this.authorizedInternal$.next(false);\n  }\n\n  updateAndPublishAuthState(authorizationResult: AuthorizationResult) {\n    this.publicEventsService.fireEvent<AuthorizationResult>(EventTypes.NewAuthorizationResult, authorizationResult);\n  }\n\n  setAuthorizationData(accessToken: any, authResult: any) {\n    this.loggerService.logDebug(accessToken);\n    this.loggerService.logDebug('storing the accessToken');\n\n    this.storagePersistanceService.write('authzData', accessToken);\n    this.persistAccessTokenExpirationTime(authResult);\n    this.setAuthorizedAndFireEvent();\n  }\n\n  getAccessToken(): string {\n    if (!this.isAuthorized) {\n      return '';\n    }\n\n    const token = this.storagePersistanceService.getAccessToken();\n    return this.decodeURIComponentSafely(token);\n  }\n\n  getIdToken(): string {\n    if (!this.isAuthorized) {\n      return '';\n    }\n\n    const token = this.storagePersistanceService.getIdToken();\n    return this.decodeURIComponentSafely(token);\n  }\n\n  getRefreshToken(): string {\n    if (!this.isAuthorized) {\n      return '';\n    }\n\n    const token = this.storagePersistanceService.getRefreshToken();\n    return this.decodeURIComponentSafely(token);\n  }\n\n  areAuthStorageTokensValid() {\n    if (!this.isAuthorized) {\n      return false;\n    }\n\n    if (this.hasIdTokenExpired()) {\n      this.loggerService.logDebug('persisted id_token is expired');\n      return false;\n    }\n\n    if (this.hasAccessTokenExpiredIfExpiryExists()) {\n      this.loggerService.logDebug('persisted access_token is expired');\n      return false;\n    }\n\n    this.loggerService.logDebug('persisted id_token and access token are valid');\n    return true;\n  }\n\n  hasIdTokenExpired() {\n    const tokenToCheck = this.storagePersistanceService.getIdToken();\n    const { renewTimeBeforeTokenExpiresInSeconds } = this.configurationProvider.getOpenIDConfiguration();\n\n    const idTokenExpired = this.tokenValidationService.hasIdTokenExpired(tokenToCheck, renewTimeBeforeTokenExpiresInSeconds);\n\n    if (idTokenExpired) {\n      this.publicEventsService.fireEvent<boolean>(EventTypes.IdTokenExpired, idTokenExpired);\n    }\n\n    return idTokenExpired;\n  }\n\n  hasAccessTokenExpiredIfExpiryExists() {\n    const { renewTimeBeforeTokenExpiresInSeconds } = this.configurationProvider.getOpenIDConfiguration();\n    const accessTokenExpiresIn = this.storagePersistanceService.read('access_token_expires_at');\n    const accessTokenHasNotExpired = this.tokenValidationService.validateAccessTokenNotExpired(\n      accessTokenExpiresIn,\n      renewTimeBeforeTokenExpiresInSeconds\n    );\n\n    const hasExpired = !accessTokenHasNotExpired;\n\n    if (hasExpired) {\n      this.publicEventsService.fireEvent<boolean>(EventTypes.TokenExpired, hasExpired);\n    }\n\n    return hasExpired;\n  }\n\n  private decodeURIComponentSafely(token: string) {\n    if (token) {\n      return decodeURIComponent(token);\n    } else {\n      return '';\n    }\n  }\n\n  private persistAccessTokenExpirationTime(authResult: any) {\n    if (authResult?.expires_in) {\n      const accessTokenExpiryTime = new Date(new Date().toUTCString()).valueOf() + authResult.expires_in * 1000;\n      this.storagePersistanceService.write('access_token_expires_at', accessTokenExpiryTime);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nconst STORAGE_KEY = 'redirect';\n\n@Injectable()\nexport class AutoLoginService {\n  getStoredRedirectRoute() {\n    return localStorage.getItem(STORAGE_KEY);\n  }\n\n  saveStoredRedirectRoute(url: string) {\n    localStorage.setItem(STORAGE_KEY, url);\n  }\n\n  deleteStoredRedirectRoute() {\n    localStorage.removeItem(STORAGE_KEY);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\n\n@Injectable()\nexport class RandomService {\n  constructor(@Inject(DOCUMENT) private readonly doc: any, private loggerService: LoggerService) {}\n\n  createRandom(requiredLength: number): string {\n    if (requiredLength <= 0) {\n      return '';\n    }\n\n    if (requiredLength > 0 && requiredLength < 7) {\n      this.loggerService.logWarning(`RandomService called with ${requiredLength} but 7 chars is the minimum, returning 10 chars`);\n      requiredLength = 10;\n    }\n\n    const length = requiredLength - 6;\n    const arr = new Uint8Array((length || length) / 2);\n    if (this.getCrypto()) {\n      this.getCrypto().getRandomValues(arr);\n    }\n\n    return Array.from(arr, this.toHex).join('') + this.randomString(7);\n  }\n\n  private toHex(dec) {\n    return ('0' + dec.toString(16)).substr(-2);\n  }\n\n  private randomString(length): string {\n    let result = '';\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    const values = new Uint32Array(length);\n    if (this.getCrypto()) {\n      this.getCrypto().getRandomValues(values);\n      for (let i = 0; i < length; i++) {\n        result += characters[values[i] % characters.length];\n      }\n    }\n\n    return result;\n  }\n\n  private getCrypto() {\n    // support for IE,  (window.crypto || window.msCrypto)\n    return this.doc.defaultView.crypto || (this.doc.defaultView as any).msCrypto;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { RandomService } from './random/random.service';\n\n@Injectable()\nexport class FlowsDataService {\n  constructor(\n    private storagePersistanceService: StoragePersistanceService,\n    private randomService: RandomService,\n    private configurationProvider: ConfigurationProvider,\n    private loggerService: LoggerService\n  ) {}\n\n  createNonce(): string {\n    const nonce = this.randomService.createRandom(40);\n    this.setNonce(nonce);\n    return nonce;\n  }\n\n  setNonce(nonce: string) {\n    this.storagePersistanceService.write('authNonce', nonce);\n  }\n\n  getAuthStateControl(): any {\n    return this.storagePersistanceService.read('authStateControl');\n  }\n\n  setAuthStateControl(authStateControl: string) {\n    this.storagePersistanceService.write('authStateControl', authStateControl);\n  }\n\n  getExistingOrCreateAuthStateControl(): any {\n    let state = this.storagePersistanceService.read('authStateControl');\n    if (!state) {\n      state = this.randomService.createRandom(40);\n      this.storagePersistanceService.write('authStateControl', state);\n    }\n    return state;\n  }\n\n  setSessionState(sessionState: any) {\n    this.storagePersistanceService.write('session_state', sessionState);\n  }\n\n  resetStorageFlowData() {\n    this.storagePersistanceService.resetStorageFlowData();\n  }\n\n  getCodeVerifier() {\n    return this.storagePersistanceService.read('codeVerifier');\n  }\n\n  createCodeVerifier() {\n    const codeVerifier = this.randomService.createRandom(67);\n    this.storagePersistanceService.write('codeVerifier', codeVerifier);\n    return codeVerifier;\n  }\n\n  isSilentRenewRunning() {\n    const storageObject = JSON.parse(this.storagePersistanceService.read('storageSilentRenewRunning'));\n\n    if (storageObject) {\n      const { silentRenewTimeoutInSeconds } = this.configurationProvider.getOpenIDConfiguration();\n      const timeOutInMilliseconds = silentRenewTimeoutInSeconds * 1000;\n      const dateOfLaunchedProcessUtc = Date.parse(storageObject.dateOfLaunchedProcessUtc);\n      const currentDateUtc = Date.parse(new Date().toISOString());\n      const elapsedTimeInMilliseconds = Math.abs(currentDateUtc - dateOfLaunchedProcessUtc);\n      const isProbablyStuck = elapsedTimeInMilliseconds > timeOutInMilliseconds;\n\n      if (isProbablyStuck) {\n        this.loggerService.logDebug('silent renew process is probably stuck, state will be reset.');\n        this.resetSilentRenewRunning();\n        return false;\n      }\n\n      return storageObject.state === 'running';\n    }\n\n    return false;\n  }\n\n  setSilentRenewRunning() {\n    const storageObject = {\n      state: 'running',\n      dateOfLaunchedProcessUtc: new Date().toISOString(),\n    };\n\n    this.storagePersistanceService.write('storageSilentRenewRunning', JSON.stringify(storageObject));\n  }\n\n  resetSilentRenewRunning() {\n    this.storagePersistanceService.write('storageSilentRenewRunning', '');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../../config/config.provider';\n\n@Injectable()\nexport class FlowHelper {\n  constructor(private configurationProvider: ConfigurationProvider) {}\n\n  isCurrentFlowCodeFlow() {\n    return this.currentFlowIs('code');\n  }\n\n  isCurrentFlowAnyImplicitFlow() {\n    return this.isCurrentFlowImplicitFlowWithAccessToken() || this.isCurrentFlowImplicitFlowWithoutAccessToken();\n  }\n\n  isCurrentFlowCodeFlowWithRefreshTokens() {\n    const { useRefreshToken } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (this.isCurrentFlowCodeFlow() && useRefreshToken) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isCurrentFlowImplicitFlowWithAccessToken() {\n    return this.currentFlowIs('id_token token');\n  }\n\n  isCurrentFlowImplicitFlowWithoutAccessToken() {\n    return this.currentFlowIs('id_token');\n  }\n\n  currentFlowIs(flowTypes: string[] | string) {\n    const { responseType } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (Array.isArray(flowTypes)) {\n      return flowTypes.some((x) => responseType === x);\n    }\n\n    return responseType === flowTypes;\n  }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport class UriEncoder implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { oneLineTrim } from 'common-tags';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { FlowsDataService } from '../../flows/flows-data.service';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistanceService } from '../../storage/storage-persistance.service';\nimport { TokenValidationService } from '../../validation/token-validation.service';\nimport { FlowHelper } from '../flowHelper/flow-helper.service';\nimport { UriEncoder } from './uri-encoder';\n\nconst CALLBACK_PARAMS_TO_CHECK = ['code', 'state', 'token', 'id_token'];\n@Injectable()\nexport class UrlService {\n  constructor(\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly loggerService: LoggerService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly flowHelper: FlowHelper,\n    private tokenValidationService: TokenValidationService,\n    private storagePersistanceService: StoragePersistanceService\n  ) {}\n\n  getUrlParameter(urlToCheck: any, name: any): string {\n    if (!urlToCheck) {\n      return '';\n    }\n\n    if (!name) {\n      return '';\n    }\n\n    name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    const regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\n    const results = regex.exec(urlToCheck);\n    return results === null ? '' : decodeURIComponent(results[1]);\n  }\n\n  isCallbackFromSts(currentUrl: string): boolean {\n    return CALLBACK_PARAMS_TO_CHECK.some((x) => !!this.getUrlParameter(currentUrl, x));\n  }\n\n  getRefreshSessionSilentRenewUrl(customParams?: { [key: string]: string | number | boolean }): string {\n    if (this.flowHelper.isCurrentFlowCodeFlow()) {\n      return this.createUrlCodeFlowWithSilentRenew(customParams);\n    }\n\n    return this.createUrlImplicitFlowWithSilentRenew(customParams) || '';\n  }\n\n  getAuthorizeParUrl(requestUri: string): string {\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n\n    if (!authWellKnownEndPoints) {\n      this.loggerService.logError('authWellKnownEndpoints is undefined');\n      return null;\n    }\n\n    const authorizationEndpoint = authWellKnownEndPoints.authorizationEndpoint;\n\n    if (!authorizationEndpoint) {\n      this.loggerService.logError(`Can not create an authorize url when authorizationEndpoint is '${authorizationEndpoint}'`);\n      return null;\n    }\n\n    const { clientId } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!clientId) {\n      this.loggerService.logError(`createAuthorizeUrl could not add clientId because it was: `, clientId);\n      return null;\n    }\n\n    const urlParts = authorizationEndpoint.split('?');\n    const authorizationUrl = urlParts[0];\n\n    let params = new HttpParams({\n      fromString: urlParts[1],\n      encoder: new UriEncoder(),\n    });\n\n    params = params.set('request_uri', requestUri);\n    params = params.append('client_id', clientId);\n\n    return `${authorizationUrl}?${params}`;\n  }\n\n  getAuthorizeUrl(customParams?: { [key: string]: string | number | boolean }): string {\n    if (this.flowHelper.isCurrentFlowCodeFlow()) {\n      return this.createUrlCodeFlowAuthorize(customParams);\n    }\n\n    return this.createUrlImplicitFlowAuthorize(customParams) || '';\n  }\n\n  createEndSessionUrl(idTokenHint: string): string {\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    const endSessionEndpoint = authWellKnownEndPoints?.endSessionEndpoint;\n\n    if (!endSessionEndpoint) {\n      return null;\n    }\n\n    const urlParts = endSessionEndpoint.split('?');\n\n    const authorizationEndsessionUrl = urlParts[0];\n\n    let params = new HttpParams({\n      fromString: urlParts[1],\n      encoder: new UriEncoder(),\n    });\n    params = params.set('id_token_hint', idTokenHint);\n\n    const postLogoutRedirectUri = this.getPostLogoutRedirectUrl();\n\n    if (postLogoutRedirectUri) {\n      params = params.append('post_logout_redirect_uri', postLogoutRedirectUri);\n    }\n\n    return `${authorizationEndsessionUrl}?${params}`;\n  }\n\n  createRevocationEndpointBodyAccessToken(token: any): string {\n    const clientId = this.getClientId();\n\n    if (!clientId) {\n      return null;\n    }\n\n    return `client_id=${clientId}&token=${token}&token_type_hint=access_token`;\n  }\n\n  createRevocationEndpointBodyRefreshToken(token: any): string {\n    const clientId = this.getClientId();\n\n    if (!clientId) {\n      return null;\n    }\n\n    return `client_id=${clientId}&token=${token}&token_type_hint=refresh_token`;\n  }\n\n  getRevocationEndpointUrl(): string {\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    const revocationEndpoint = authWellKnownEndPoints?.revocationEndpoint;\n\n    if (!revocationEndpoint) {\n      return null;\n    }\n\n    const urlParts = revocationEndpoint.split('?');\n\n    const revocationEndpointUrl = urlParts[0];\n    return revocationEndpointUrl;\n  }\n\n  createBodyForCodeFlowCodeRequest(code: string, customTokenParams?: { [p: string]: string | number | boolean }): string {\n    const codeVerifier = this.flowsDataService.getCodeVerifier();\n    if (!codeVerifier) {\n      this.loggerService.logError(`CodeVerifier is not set `, codeVerifier);\n      return null;\n    }\n\n    const clientId = this.getClientId();\n\n    if (!clientId) {\n      return null;\n    }\n\n    let dataForBody = oneLineTrim`grant_type=authorization_code\n            &client_id=${clientId}\n            &code_verifier=${codeVerifier}\n            &code=${code}`;\n\n    if (customTokenParams) {\n      const customParamText = this.composeCustomParams({ ...customTokenParams });\n      dataForBody = oneLineTrim`${dataForBody}${customParamText}`;\n    }\n\n    const silentRenewUrl = this.getSilentRenewUrl();\n\n    if (this.flowsDataService.isSilentRenewRunning() && silentRenewUrl) {\n      return oneLineTrim`${dataForBody}&redirect_uri=${silentRenewUrl}`;\n    }\n\n    const redirectUrl = this.getRedirectUrl();\n\n    if (!redirectUrl) {\n      return null;\n    }\n\n    return oneLineTrim`${dataForBody}&redirect_uri=${redirectUrl}`;\n  }\n\n  createBodyForCodeFlowRefreshTokensRequest(refreshToken: string, customParams?: { [key: string]: string | number | boolean }): string {\n    const clientId = this.getClientId();\n\n    if (!clientId) {\n      return null;\n    }\n\n    let dataForBody = oneLineTrim`grant_type=refresh_token\n            &client_id=${clientId}\n            &refresh_token=${refreshToken}`;\n\n    if (customParams) {\n      const customParamText = this.composeCustomParams({ ...customParams });\n      dataForBody = `${dataForBody}${customParamText}`;\n    }\n\n    return dataForBody;\n  }\n\n  createBodyForParCodeFlowRequest(customParamsRequest?: { [key: string]: string | number | boolean }): string {\n    const redirectUrl = this.getRedirectUrl();\n\n    if (!redirectUrl) {\n      return null;\n    }\n\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\n    const nonce = this.flowsDataService.createNonce();\n    this.loggerService.logDebug('Authorize created. adding myautostate: ' + state);\n\n    // code_challenge with \"S256\"\n    const codeVerifier = this.flowsDataService.createCodeVerifier();\n    const codeChallenge = this.tokenValidationService.generateCodeChallenge(codeVerifier);\n\n    const { clientId, responseType, scope, hdParam, customParams } = this.configurationProvider.getOpenIDConfiguration();\n\n    let dataForBody = oneLineTrim`client_id=${clientId}\n            &redirect_uri=${redirectUrl}\n            &response_type=${responseType}\n            &scope=${scope}\n            &nonce=${nonce}\n            &state=${state}\n            &code_challenge=${codeChallenge}\n            &code_challenge_method=S256`;\n\n    if (hdParam) {\n      dataForBody = `${dataForBody}&hd=${hdParam}`;\n    }\n\n    if (customParams) {\n      const customParamText = this.composeCustomParams({ ...customParams });\n      dataForBody = `${dataForBody}${customParamText}`;\n    }\n\n    if (customParamsRequest) {\n      const customParamText = this.composeCustomParams({ ...customParamsRequest });\n      dataForBody = `${dataForBody}${customParamText}`;\n    }\n\n    return dataForBody;\n  }\n\n  private createAuthorizeUrl(\n    codeChallenge: string,\n    redirectUrl: string,\n    nonce: string,\n    state: string,\n    prompt?: string,\n    customRequestParams?: { [key: string]: string | number | boolean }\n  ): string {\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    const authorizationEndpoint = authWellKnownEndPoints?.authorizationEndpoint;\n\n    if (!authorizationEndpoint) {\n      this.loggerService.logError(`Can not create an authorize url when authorizationEndpoint is '${authorizationEndpoint}'`);\n      return null;\n    }\n\n    const { clientId, responseType, scope, hdParam, customParams } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!clientId) {\n      this.loggerService.logError(`createAuthorizeUrl could not add clientId because it was: `, clientId);\n      return null;\n    }\n\n    if (!responseType) {\n      this.loggerService.logError(`createAuthorizeUrl could not add responseType because it was: `, responseType);\n      return null;\n    }\n\n    if (!scope) {\n      this.loggerService.logError(`createAuthorizeUrl could not add scope because it was: `, scope);\n      return null;\n    }\n\n    const urlParts = authorizationEndpoint.split('?');\n    const authorizationUrl = urlParts[0];\n\n    let params = new HttpParams({\n      fromString: urlParts[1],\n      encoder: new UriEncoder(),\n    });\n\n    params = params.set('client_id', clientId);\n    params = params.append('redirect_uri', redirectUrl);\n    params = params.append('response_type', responseType);\n    params = params.append('scope', scope);\n    params = params.append('nonce', nonce);\n    params = params.append('state', state);\n\n    if (this.flowHelper.isCurrentFlowCodeFlow()) {\n      params = params.append('code_challenge', codeChallenge);\n      params = params.append('code_challenge_method', 'S256');\n    }\n\n    if (prompt) {\n      params = params.append('prompt', prompt);\n    }\n\n    if (hdParam) {\n      params = params.append('hd', hdParam);\n    }\n\n    if (customParams) {\n      for (const [key, value] of Object.entries({ ...customParams })) {\n        params = params.append(key, value.toString());\n      }\n    }\n\n    if (customRequestParams) {\n      for (const [key, value] of Object.entries({ ...customRequestParams })) {\n        params = params.append(key, value.toString());\n      }\n    }\n\n    return `${authorizationUrl}?${params}`;\n  }\n\n  private createUrlImplicitFlowWithSilentRenew(customParams?: { [key: string]: string | number | boolean }): string {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\n    const nonce = this.flowsDataService.createNonce();\n\n    const silentRenewUrl = this.getSilentRenewUrl();\n\n    if (!silentRenewUrl) {\n      return null;\n    }\n\n    this.loggerService.logDebug('RefreshSession created. adding myautostate: ', state);\n\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    if (authWellKnownEndPoints) {\n      return this.createAuthorizeUrl('', silentRenewUrl, nonce, state, 'none', customParams);\n    }\n\n    this.loggerService.logError('authWellKnownEndpoints is undefined');\n    return null;\n  }\n\n  private createUrlCodeFlowWithSilentRenew(customParams?: { [key: string]: string | number | boolean }): string {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\n    const nonce = this.flowsDataService.createNonce();\n\n    this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + state);\n\n    // code_challenge with \"S256\"\n    const codeVerifier = this.flowsDataService.createCodeVerifier();\n    const codeChallenge = this.tokenValidationService.generateCodeChallenge(codeVerifier);\n\n    const silentRenewUrl = this.getSilentRenewUrl();\n\n    if (!silentRenewUrl) {\n      return null;\n    }\n\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    if (authWellKnownEndPoints) {\n      return this.createAuthorizeUrl(codeChallenge, silentRenewUrl, nonce, state, 'none', customParams);\n    }\n\n    this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n    return null;\n  }\n\n  private createUrlImplicitFlowAuthorize(customParams?: { [key: string]: string | number | boolean }): string {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\n    const nonce = this.flowsDataService.createNonce();\n    this.loggerService.logDebug('Authorize created. adding myautostate: ' + state);\n\n    const redirectUrl = this.getRedirectUrl();\n\n    if (!redirectUrl) {\n      return null;\n    }\n\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    if (authWellKnownEndPoints) {\n      return this.createAuthorizeUrl('', redirectUrl, nonce, state, null, customParams);\n    }\n\n    this.loggerService.logError('authWellKnownEndpoints is undefined');\n    return null;\n  }\n\n  private createUrlCodeFlowAuthorize(customParams?: { [key: string]: string | number | boolean }): string {\n    const state = this.flowsDataService.getExistingOrCreateAuthStateControl();\n    const nonce = this.flowsDataService.createNonce();\n    this.loggerService.logDebug('Authorize created. adding myautostate: ' + state);\n\n    const redirectUrl = this.getRedirectUrl();\n\n    if (!redirectUrl) {\n      return null;\n    }\n\n    // code_challenge with \"S256\"\n    const codeVerifier = this.flowsDataService.createCodeVerifier();\n    const codeChallenge = this.tokenValidationService.generateCodeChallenge(codeVerifier);\n\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    if (authWellKnownEndPoints) {\n      return this.createAuthorizeUrl(codeChallenge, redirectUrl, nonce, state, null, customParams);\n    }\n\n    this.loggerService.logError('authWellKnownEndpoints is undefined');\n    return null;\n  }\n\n  private getRedirectUrl(): string {\n    const { redirectUrl } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!redirectUrl) {\n      this.loggerService.logError(`could not get redirectUrl, was: `, redirectUrl);\n      return null;\n    }\n\n    return redirectUrl;\n  }\n\n  private getSilentRenewUrl(): string {\n    const { silentRenewUrl } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!silentRenewUrl) {\n      this.loggerService.logError(`could not get silentRenewUrl, was: `, silentRenewUrl);\n      return null;\n    }\n\n    return silentRenewUrl;\n  }\n\n  private getPostLogoutRedirectUrl(): string {\n    const { postLogoutRedirectUri } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!postLogoutRedirectUri) {\n      this.loggerService.logError(`could not get postLogoutRedirectUri, was: `, postLogoutRedirectUri);\n      return null;\n    }\n\n    return postLogoutRedirectUri;\n  }\n\n  private getClientId(): string {\n    const { clientId } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!clientId) {\n      this.loggerService.logError(`could not get clientId, was: `, clientId);\n      return null;\n    }\n\n    return clientId;\n  }\n\n  private composeCustomParams(customParams: { [key: string]: string | number | boolean }) {\n    let customParamText = '';\n\n    for (const [key, value] of Object.entries(customParams)) {\n      customParamText = customParamText.concat(`&${key}=${value.toString()}`);\n    }\n\n    return customParamText;\n  }\n}\n","/* eslint-disable no-shadow */\nexport enum AuthorizedState {\n  Authorized = 'Authorized',\n  Unauthorized = 'Unauthorized',\n  Unknown = 'Unknown',\n}\n","/* eslint-disable no-shadow */\nexport enum ValidationResult {\n  NotSet = 'NotSet',\n  StatesDoNotMatch = 'StatesDoNotMatch',\n  SignatureFailed = 'SignatureFailed',\n  IncorrectNonce = 'IncorrectNonce',\n  RequiredPropertyMissing = 'RequiredPropertyMissing',\n  MaxOffsetExpired = 'MaxOffsetExpired',\n  IssDoesNotMatchIssuer = 'IssDoesNotMatchIssuer',\n  NoAuthWellKnownEndPoints = 'NoAuthWellKnownEndPoints',\n  IncorrectAud = 'IncorrectAud',\n  IncorrectIdTokenClaimsAfterRefresh = 'IncorrectIdTokenClaimsAfterRefresh',\n  IncorrectAzp = 'IncorrectAzp',\n  TokenExpired = 'TokenExpired',\n  IncorrectAtHash = 'IncorrectAtHash',\n  Ok = 'Ok',\n  LoginRequired = 'LoginRequired',\n  SecureTokenServerError = 'SecureTokenServerError',\n}\n","import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError, timer } from 'rxjs';\nimport { catchError, mergeMap, retryWhen, switchMap } from 'rxjs/operators';\nimport { DataService } from '../../api/data.service';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistanceService } from '../../storage/storage-persistance.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { TokenValidationService } from '../../validation/token-validation.service';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\n\n@Injectable()\nexport class CodeFlowCallbackHandlerService {\n  constructor(\n    private readonly urlService: UrlService,\n    private readonly loggerService: LoggerService,\n    private readonly tokenValidationService: TokenValidationService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly storagePersistanceService: StoragePersistanceService,\n    private readonly dataService: DataService\n  ) {}\n\n  // STEP 1 Code Flow\n  codeFlowCallback(urlToCheck: string): Observable<CallbackContext> {\n    const code = this.urlService.getUrlParameter(urlToCheck, 'code');\n    const state = this.urlService.getUrlParameter(urlToCheck, 'state');\n    const sessionState = this.urlService.getUrlParameter(urlToCheck, 'session_state') || null;\n\n    if (!state) {\n      this.loggerService.logDebug('no state in url');\n      return throwError('no state in url');\n    }\n\n    if (!code) {\n      this.loggerService.logDebug('no code in url');\n      return throwError('no code in url');\n    }\n\n    this.loggerService.logDebug('running validation for callback', urlToCheck);\n\n    const initialCallbackContext = {\n      code,\n      refreshToken: null,\n      state,\n      sessionState,\n      authResult: null,\n      isRenewProcess: false,\n      jwtKeys: null,\n      validationResult: null,\n      existingIdToken: null,\n    };\n\n    return of(initialCallbackContext);\n  }\n\n  // STEP 2 Code Flow //  Code Flow Silent Renew starts here\n  codeFlowCodeRequest(callbackContext: CallbackContext): Observable<CallbackContext> {\n    const authStateControl = this.flowsDataService.getAuthStateControl();\n\n    const isStateCorrect = this.tokenValidationService.validateStateFromHashCallback(callbackContext.state, authStateControl);\n\n    if (!isStateCorrect) {\n      this.loggerService.logWarning('codeFlowCodeRequest incorrect state');\n      return throwError('codeFlowCodeRequest incorrect state');\n    }\n\n    const authWellKnown = this.storagePersistanceService.read('authWellKnownEndPoints');\n    const tokenEndpoint = authWellKnown?.tokenEndpoint;\n    if (!tokenEndpoint) {\n      return throwError('Token Endpoint not defined');\n    }\n\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n    const config = this.configurationProvider.getOpenIDConfiguration();\n\n    const bodyForCodeFlow = this.urlService.createBodyForCodeFlowCodeRequest(callbackContext.code, config?.customTokenParams);\n\n    return this.dataService.post(tokenEndpoint, bodyForCodeFlow, headers).pipe(\n      switchMap((response) => {\n        let authResult: any = new Object();\n        authResult = response;\n        authResult.state = callbackContext.state;\n        authResult.session_state = callbackContext.sessionState;\n\n        callbackContext.authResult = authResult;\n        return of(callbackContext);\n      }),\n      retryWhen((error) => this.handleRefreshRetry(error)),\n      catchError((error) => {\n        const { stsServer } = this.configurationProvider.getOpenIDConfiguration();\n        const errorMessage = `OidcService code request ${stsServer}`;\n        this.loggerService.logError(errorMessage, error);\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  private handleRefreshRetry(errors: Observable<any>): Observable<any> {\n    return errors.pipe(\n      mergeMap((error) => {\n        // retry token refresh if there is no internet connection\n        if (error && error instanceof HttpErrorResponse && error.error instanceof ProgressEvent && error.error.type === 'error') {\n          const { stsServer, refreshTokenRetryInSeconds } = this.configurationProvider.getOpenIDConfiguration();\n          const errorMessage = `OidcService code request ${stsServer} - no internet connection`;\n          this.loggerService.logWarning(errorMessage, error);\n          return timer(refreshTokenRetryInSeconds * 1000);\n        }\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\nimport { map, retry, switchMap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\n\n@Injectable()\nexport class UserService {\n  private userDataInternal$ = new BehaviorSubject<any>(null);\n\n  get userData$() {\n    return this.userDataInternal$.asObservable();\n  }\n\n  constructor(\n    private oidcDataService: DataService,\n    private storagePersistanceService: StoragePersistanceService,\n    private eventService: PublicEventsService,\n    private loggerService: LoggerService,\n    private tokenHelperService: TokenHelperService,\n    private flowHelper: FlowHelper,\n    private configurationProvider: ConfigurationProvider\n  ) {}\n\n  // TODO CHECK PARAMETERS\n  //  validationResult.idToken can be the complete validationResult\n  getAndPersistUserDataInStore(isRenewProcess = false, idToken?: any, decodedIdToken?: any): Observable<any> {\n    idToken = idToken || this.storagePersistanceService.getIdToken();\n    decodedIdToken = decodedIdToken || this.tokenHelperService.getPayloadFromToken(idToken, false);\n\n    const existingUserDataFromStorage = this.getUserDataFromStore();\n    const haveUserData = !!existingUserDataFromStorage;\n    const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken();\n    const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow();\n\n    const accessToken = this.storagePersistanceService.getAccessToken();\n    if (!(isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow)) {\n      this.loggerService.logDebug('authorizedCallback id_token flow');\n      this.loggerService.logDebug('accessToken', accessToken);\n\n      this.setUserDataToStore(decodedIdToken);\n      return of(decodedIdToken);\n    }\n\n    const { renewUserInfoAfterTokenRenew } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!isRenewProcess || renewUserInfoAfterTokenRenew || !haveUserData) {\n      return this.getUserDataOidcFlowAndSave(decodedIdToken.sub).pipe(\n        switchMap((userData) => {\n          this.loggerService.logDebug('Received user data', userData);\n          if (!!userData) {\n            this.loggerService.logDebug('accessToken', accessToken);\n            return of(userData);\n          } else {\n            return throwError('no user data, request failed');\n          }\n        })\n      );\n    }\n\n    return of(existingUserDataFromStorage);\n  }\n\n  getUserDataFromStore(): any {\n    return this.storagePersistanceService.read('userData') || null;\n  }\n\n  publishUserDataIfExists() {\n    const userData = this.getUserDataFromStore();\n    if (userData) {\n      this.userDataInternal$.next(userData);\n      this.eventService.fireEvent(EventTypes.UserDataChanged, userData);\n    }\n  }\n\n  setUserDataToStore(value: any): void {\n    this.storagePersistanceService.write('userData', value);\n    this.userDataInternal$.next(value);\n    this.eventService.fireEvent(EventTypes.UserDataChanged, value);\n  }\n\n  resetUserDataInStore(): void {\n    this.storagePersistanceService.remove('userData');\n    this.eventService.fireEvent(EventTypes.UserDataChanged, null);\n    this.userDataInternal$.next(null);\n  }\n\n  private getUserDataOidcFlowAndSave(idTokenSub: any): Observable<any> {\n    return this.getIdentityUserData().pipe(\n      map((data: any) => {\n        if (this.validateUserDataSubIdToken(idTokenSub, data?.sub)) {\n          this.setUserDataToStore(data);\n          return data;\n        } else {\n          // something went wrong, userdata sub does not match that from id_token\n          this.loggerService.logWarning('authorizedCallback, User data sub does not match sub in id_token');\n          this.loggerService.logDebug('authorizedCallback, token(s) validation failed, resetting');\n          this.resetUserDataInStore();\n          return null;\n        }\n      })\n    );\n  }\n\n  private getIdentityUserData(): Observable<any> {\n    const token = this.storagePersistanceService.getAccessToken();\n\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n\n    if (!authWellKnownEndPoints) {\n      this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined');\n      return throwError('authWellKnownEndpoints is undefined');\n    }\n\n    const userinfoEndpoint = authWellKnownEndPoints.userinfoEndpoint;\n\n    if (!userinfoEndpoint) {\n      this.loggerService.logError(\n        'init check session: authWellKnownEndpoints.userinfo_endpoint is undefined; set auto_userinfo = false in config'\n      );\n      return throwError('authWellKnownEndpoints.userinfo_endpoint is undefined');\n    }\n\n    return this.oidcDataService.get(userinfoEndpoint, token).pipe(retry(2));\n  }\n\n  private validateUserDataSubIdToken(idTokenSub: any, userdataSub: any): boolean {\n    if (!idTokenSub) {\n      return false;\n    }\n\n    if (!userdataSub) {\n      return false;\n    }\n\n    if ((idTokenSub as string) !== (userdataSub as string)) {\n      this.loggerService.logDebug('validateUserDataSubIdToken failed', idTokenSub, userdataSub);\n      return false;\n    }\n\n    return true;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { UserService } from '../userData/user-service';\nimport { FlowsDataService } from './flows-data.service';\n\n@Injectable()\nexport class ResetAuthDataService {\n  constructor(\n    private readonly authStateService: AuthStateService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly userService: UserService\n  ) {}\n\n  resetAuthorizationData(): void {\n    this.userService.resetUserDataInStore();\n    this.flowsDataService.resetStorageFlowData();\n    this.authStateService.setUnauthorizedAndFireEvent();\n  }\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { JwtKeys } from '../validation/jwtkeys';\n\n@Injectable()\nexport class SigninKeyDataService {\n  constructor(\n    private storagePersistanceService: StoragePersistanceService,\n    private loggerService: LoggerService,\n    private dataService: DataService\n  ) {}\n\n  getSigningKeys() {\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    const jwksUri = authWellKnownEndPoints?.jwksUri;\n    if (!jwksUri) {\n      const error = `getSigningKeys: authWellKnownEndpoints.jwksUri is: '${jwksUri}'`;\n      this.loggerService.logWarning(error);\n      return throwError(error);\n    }\n\n    this.loggerService.logDebug('Getting signinkeys from ', jwksUri);\n\n    return this.dataService.get<JwtKeys>(jwksUri).pipe(retry(2), catchError(this.handleErrorGetSigningKeys));\n  }\n\n  private handleErrorGetSigningKeys(errorResponse: HttpResponse<any> | any) {\n    let errMsg = '';\n    if (errorResponse instanceof HttpResponse) {\n      const body = errorResponse.body || {};\n      const err = JSON.stringify(body);\n      const { status, statusText } = errorResponse;\n      errMsg = `${status || ''} - ${statusText || ''} ${err || ''}`;\n    } else {\n      const { message } = errorResponse;\n      errMsg = !!message ? message : `${errorResponse}`;\n    }\n    this.loggerService.logError(errMsg);\n    return throwError(new Error(errMsg));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { AuthStateService } from '../../authState/auth-state.service';\nimport { AuthorizedState } from '../../authState/authorized-state';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistanceService } from '../../storage/storage-persistance.service';\nimport { ValidationResult } from '../../validation/validation-result';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\nimport { ResetAuthDataService } from '../reset-auth-data.service';\nimport { SigninKeyDataService } from '../signin-key-data.service';\n\n@Injectable()\nexport class HistoryJwtKeysCallbackHandlerService {\n  constructor(\n    private readonly loggerService: LoggerService,\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly authStateService: AuthStateService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly signInKeyDataService: SigninKeyDataService,\n    private readonly storagePersistanceService: StoragePersistanceService,\n    private readonly resetAuthDataService: ResetAuthDataService\n  ) {}\n\n  // STEP 3 Code Flow, STEP 2 Implicit Flow, STEP 3 Refresh Token\n  callbackHistoryAndResetJwtKeys(callbackContext: CallbackContext): Observable<CallbackContext> {\n    this.storagePersistanceService.write('authnResult', callbackContext.authResult);\n\n    if (this.historyCleanUpTurnedOn() && !callbackContext.isRenewProcess) {\n      this.resetBrowserHistory();\n    } else {\n      this.loggerService.logDebug('history clean up inactive');\n    }\n\n    if (callbackContext.authResult.error) {\n      const errorMessage = `authorizedCallbackProcedure came with error: ${callbackContext.authResult.error}`;\n      this.loggerService.logDebug(errorMessage);\n      this.resetAuthDataService.resetAuthorizationData();\n      this.flowsDataService.setNonce('');\n      this.handleResultErrorFromCallback(callbackContext.authResult, callbackContext.isRenewProcess);\n      return throwError(errorMessage);\n    }\n\n    this.loggerService.logDebug(callbackContext.authResult);\n    this.loggerService.logDebug('authorizedCallback created, begin token validation');\n\n    return this.signInKeyDataService.getSigningKeys().pipe(\n      switchMap((jwtKeys) => {\n        if (jwtKeys) {\n          callbackContext.jwtKeys = jwtKeys;\n\n          return of(callbackContext);\n        }\n\n        const errorMessage = `Failed to retrieve signing key`;\n        this.loggerService.logWarning(errorMessage);\n        return throwError(errorMessage);\n      }),\n      catchError((err) => {\n        const errorMessage = `Failed to retrieve signing key with error: ${err}`;\n        this.loggerService.logWarning(errorMessage);\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  private handleResultErrorFromCallback(result: any, isRenewProcess: boolean) {\n    let validationResult = ValidationResult.SecureTokenServerError;\n\n    if ((result.error as string) === 'login_required') {\n      validationResult = ValidationResult.LoginRequired;\n    }\n\n    this.authStateService.updateAndPublishAuthState({\n      authorizationState: AuthorizedState.Unauthorized,\n      validationResult,\n      isRenewProcess,\n    });\n  }\n\n  private historyCleanUpTurnedOn() {\n    const { historyCleanupOff } = this.configurationProvider.getOpenIDConfiguration();\n    return !historyCleanupOff;\n  }\n\n  private resetBrowserHistory() {\n    window.history.replaceState({}, window.document.title, window.location.origin + window.location.pathname);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { LoggerService } from '../../logging/logger.service';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\nimport { ResetAuthDataService } from '../reset-auth-data.service';\n\n@Injectable()\nexport class ImplicitFlowCallbackHandlerService {\n  constructor(\n    private readonly resetAuthDataService: ResetAuthDataService,\n    private readonly loggerService: LoggerService,\n    private readonly flowsDataService: FlowsDataService,\n    @Inject(DOCUMENT) private readonly doc: any\n  ) {}\n\n  // STEP 1 Code Flow\n  // STEP 1 Implicit Flow\n  implicitFlowCallback(hash?: string): Observable<CallbackContext> {\n    const isRenewProcessData = this.flowsDataService.isSilentRenewRunning();\n\n    this.loggerService.logDebug('BEGIN authorizedCallback, no auth data');\n    if (!isRenewProcessData) {\n      this.resetAuthDataService.resetAuthorizationData();\n    }\n\n    hash = hash || this.doc.location.hash.substr(1);\n\n    const authResult: any = hash.split('&').reduce((resultData: any, item: string) => {\n      const parts = item.split('=');\n      resultData[parts.shift() as string] = parts.join('=');\n      return resultData;\n    }, {});\n\n    const callbackContext = {\n      code: null,\n      refreshToken: null,\n      state: null,\n      sessionState: null,\n      authResult,\n      isRenewProcess: isRenewProcessData,\n      jwtKeys: null,\n      validationResult: null,\n      existingIdToken: null,\n    };\n\n    return of(callbackContext);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { AuthStateService } from '../../authState/auth-state.service';\nimport { LoggerService } from '../../logging/logger.service';\nimport { TokenValidationService } from '../../validation/token-validation.service';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\n\n@Injectable()\nexport class RefreshSessionCallbackHandlerService {\n  constructor(\n    private readonly loggerService: LoggerService,\n    private readonly authStateService: AuthStateService,\n    private readonly flowsDataService: FlowsDataService\n  ) {}\n\n  // STEP 1 Refresh session\n  refreshSessionWithRefreshTokens(): Observable<CallbackContext> {\n    const stateData = this.flowsDataService.getExistingOrCreateAuthStateControl();\n    this.loggerService.logDebug('RefreshSession created. adding myautostate: ' + stateData);\n    const refreshToken = this.authStateService.getRefreshToken();\n    const idToken = this.authStateService.getIdToken();\n\n    if (refreshToken) {\n      const callbackContext = {\n        code: null,\n        refreshToken,\n        state: stateData,\n        sessionState: null,\n        authResult: null,\n        isRenewProcess: true,\n        jwtKeys: null,\n        validationResult: null,\n        existingIdToken: idToken,\n      };\n\n      this.loggerService.logDebug('found refresh code, obtaining new credentials with refresh code');\n      // Nonce is not used with refresh tokens; but Keycloak may send it anyway\n      this.flowsDataService.setNonce(TokenValidationService.refreshTokenNoncePlaceholder);\n\n      return of(callbackContext);\n    } else {\n      const errorMessage = 'no refresh token found, please login';\n      this.loggerService.logError(errorMessage);\n      return throwError(errorMessage);\n    }\n  }\n}\n","import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError, timer } from 'rxjs';\nimport { catchError, mergeMap, retryWhen, switchMap } from 'rxjs/operators';\nimport { DataService } from '../../api/data.service';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistanceService } from '../../storage/storage-persistance.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { CallbackContext } from '../callback-context';\n\n@Injectable()\nexport class RefreshTokenCallbackHandlerService {\n  constructor(\n    private readonly urlService: UrlService,\n    private readonly loggerService: LoggerService,\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly dataService: DataService,\n    private readonly storagePersistanceService: StoragePersistanceService\n  ) {}\n\n  // STEP 2 Refresh Token\n  refreshTokensRequestTokens(\n    callbackContext: CallbackContext,\n    customParams?: { [key: string]: string | number | boolean }\n  ): Observable<CallbackContext> {\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n    const authWellKnown = this.storagePersistanceService.read('authWellKnownEndPoints');\n    const tokenEndpoint = authWellKnown?.tokenEndpoint;\n    if (!tokenEndpoint) {\n      return throwError('Token Endpoint not defined');\n    }\n\n    const data = this.urlService.createBodyForCodeFlowRefreshTokensRequest(callbackContext.refreshToken, customParams);\n\n    return this.dataService.post(tokenEndpoint, data, headers).pipe(\n      switchMap((response: any) => {\n        this.loggerService.logDebug('token refresh response: ', response);\n        let authResult: any = new Object();\n        authResult = response;\n        authResult.state = callbackContext.state;\n\n        callbackContext.authResult = authResult;\n        return of(callbackContext);\n      }),\n      retryWhen((error) => this.handleRefreshRetry(error)),\n      catchError((error) => {\n        const { stsServer } = this.configurationProvider.getOpenIDConfiguration();\n        const errorMessage = `OidcService code request ${stsServer}`;\n        this.loggerService.logError(errorMessage, error);\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  private handleRefreshRetry(errors: Observable<any>): Observable<any> {\n    return errors.pipe(\n      mergeMap((error) => {\n        // retry token refresh if there is no internet connection\n        if (error && error instanceof HttpErrorResponse && error.error instanceof ProgressEvent && error.error.type === 'error') {\n          const { stsServer, refreshTokenRetryInSeconds } = this.configurationProvider.getOpenIDConfiguration();\n          const errorMessage = `OidcService code request ${stsServer} - no internet connection`;\n          this.loggerService.logWarning(errorMessage, error);\n          return timer(refreshTokenRetryInSeconds * 1000);\n        }\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class EqualityService {\n  isStringEqualOrNonOrderedArrayEqual(value1: string | any[], value2: string | any[]) {\n    if (this.isNullOrUndefined(value1)) {\n      return false;\n    }\n\n    if (this.isNullOrUndefined(value2)) {\n      return false;\n    }\n\n    if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n      return false;\n    }\n\n    if (this.bothValuesAreStrings(value1, value2)) {\n      return value1 === value2;\n    }\n\n    if (this.bothValuesAreArrays(value1, value2)) {\n      return this.arraysHaveEqualContent(value1 as any[], value2 as any[]);\n    }\n\n    return false;\n  }\n\n  areEqual(value1: string | any[] | any | null | undefined, value2: string | any[] | any | null | undefined) {\n    if (!value1 || !value2) {\n      return false;\n    }\n\n    if (this.bothValuesAreArrays(value1, value2)) {\n      return this.arraysStrictEqual(value1 as any[], value2 as any[]);\n    }\n\n    if (this.bothValuesAreStrings(value1, value2)) {\n      return value1 === value2;\n    }\n\n    if (this.bothValuesAreObjects(value1, value2)) {\n      return JSON.stringify(value1).toLowerCase() === JSON.stringify(value2).toLowerCase();\n    }\n\n    if (this.oneValueIsStringAndTheOtherIsArray(value1, value2)) {\n      if (Array.isArray(value1) && this.valueIsString(value2)) {\n        return value1[0] === value2;\n      }\n      if (Array.isArray(value2) && this.valueIsString(value1)) {\n        return value2[0] === value1;\n      }\n    }\n  }\n\n  private oneValueIsStringAndTheOtherIsArray(value1: string | any | any[], value2: string | any | any[]) {\n    return (Array.isArray(value1) && this.valueIsString(value2)) || (Array.isArray(value2) && this.valueIsString(value1));\n  }\n\n  private bothValuesAreObjects(value1: string | any | any[], value2: string | any | any[]) {\n    return this.valueIsObject(value1) && this.valueIsObject(value2);\n  }\n\n  private bothValuesAreStrings(value1: string | any | any[], value2: string | any | any[]) {\n    return this.valueIsString(value1) && this.valueIsString(value2);\n  }\n\n  private bothValuesAreArrays(value1: string | any | any[], value2: string | any | any[]) {\n    return Array.isArray(value1) && Array.isArray(value2);\n  }\n\n  private valueIsString(value: any) {\n    return typeof value === 'string' || value instanceof String;\n  }\n\n  private valueIsObject(value: any) {\n    return typeof value === 'object';\n  }\n\n  private arraysStrictEqual(arr1: Array<string>, arr2: Array<string>) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    for (let i = arr1.length; i--; ) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private arraysHaveEqualContent(arr1: Array<string>, arr2: Array<string>) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    return arr1.some((v) => arr2.includes(v));\n  }\n\n  private isNullOrUndefined(val: any) {\n    return val === null || val === undefined;\n  }\n}\n","import { ValidationResult } from './validation-result';\n\nexport class StateValidationResult {\n  constructor(\n    public accessToken = '',\n    public idToken = '',\n    public authResponseIsValid = false,\n    public decodedIdToken: any = {},\n    public state: ValidationResult = ValidationResult.NotSet\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { CallbackContext } from '../flows/callback-context';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { EqualityService } from '../utils/equality/equality.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { TokenHelperService } from '../utils/tokenHelper/oidc-token-helper.service';\nimport { StateValidationResult } from './state-validation-result';\nimport { TokenValidationService } from './token-validation.service';\nimport { ValidationResult } from './validation-result';\n\n@Injectable()\nexport class StateValidationService {\n  constructor(\n    private storagePersistanceService: StoragePersistanceService,\n    private tokenValidationService: TokenValidationService,\n    private tokenHelperService: TokenHelperService,\n    private loggerService: LoggerService,\n    private configurationProvider: ConfigurationProvider,\n    private equalityService: EqualityService,\n    private flowHelper: FlowHelper\n  ) {}\n\n  getValidatedStateResult(callbackContext: CallbackContext): StateValidationResult {\n    if (!callbackContext) {\n      return new StateValidationResult('', '', false, {});\n    }\n\n    if (callbackContext.authResult.error) {\n      return new StateValidationResult('', '', false, {});\n    }\n\n    return this.validateState(callbackContext);\n  }\n\n  validateState(callbackContext): StateValidationResult {\n    const toReturn = new StateValidationResult();\n    const authStateControl = this.storagePersistanceService.read('authStateControl');\n\n    if (!this.tokenValidationService.validateStateFromHashCallback(callbackContext.authResult.state, authStateControl)) {\n      this.loggerService.logWarning('authorizedCallback incorrect state');\n      toReturn.state = ValidationResult.StatesDoNotMatch;\n      this.handleUnsuccessfulValidation();\n      return toReturn;\n    }\n\n    const isCurrentFlowImplicitFlowWithAccessToken = this.flowHelper.isCurrentFlowImplicitFlowWithAccessToken();\n    const isCurrentFlowCodeFlow = this.flowHelper.isCurrentFlowCodeFlow();\n\n    if (isCurrentFlowImplicitFlowWithAccessToken || isCurrentFlowCodeFlow) {\n      toReturn.accessToken = callbackContext.authResult.access_token;\n    }\n\n    if (callbackContext.authResult.id_token) {\n      const {\n        clientId,\n        issValidationOff,\n        maxIdTokenIatOffsetAllowedInSeconds,\n        disableIatOffsetValidation,\n        ignoreNonceAfterRefresh,\n      } = this.configurationProvider.getOpenIDConfiguration();\n\n      toReturn.idToken = callbackContext.authResult.id_token;\n\n      toReturn.decodedIdToken = this.tokenHelperService.getPayloadFromToken(toReturn.idToken, false);\n\n      if (!this.tokenValidationService.validateSignatureIdToken(toReturn.idToken, callbackContext.jwtKeys)) {\n        this.loggerService.logDebug('authorizedCallback Signature validation failed id_token');\n        toReturn.state = ValidationResult.SignatureFailed;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      const authNonce = this.storagePersistanceService.read('authNonce');\n\n      if (!this.tokenValidationService.validateIdTokenNonce(toReturn.decodedIdToken, authNonce, ignoreNonceAfterRefresh)) {\n        this.loggerService.logWarning('authorizedCallback incorrect nonce');\n        toReturn.state = ValidationResult.IncorrectNonce;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateRequiredIdToken(toReturn.decodedIdToken)) {\n        this.loggerService.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\n        toReturn.state = ValidationResult.RequiredPropertyMissing;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      if (\n        !this.tokenValidationService.validateIdTokenIatMaxOffset(\n          toReturn.decodedIdToken,\n          maxIdTokenIatOffsetAllowedInSeconds,\n          disableIatOffsetValidation\n        )\n      ) {\n        this.loggerService.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\n        toReturn.state = ValidationResult.MaxOffsetExpired;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n\n      if (authWellKnownEndPoints) {\n        if (issValidationOff) {\n          this.loggerService.logDebug('iss validation is turned off, this is not recommended!');\n        } else if (\n          !issValidationOff &&\n          !this.tokenValidationService.validateIdTokenIss(toReturn.decodedIdToken, authWellKnownEndPoints.issuer)\n        ) {\n          this.loggerService.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\n          toReturn.state = ValidationResult.IssDoesNotMatchIssuer;\n          this.handleUnsuccessfulValidation();\n          return toReturn;\n        }\n      } else {\n        this.loggerService.logWarning('authWellKnownEndpoints is undefined');\n        toReturn.state = ValidationResult.NoAuthWellKnownEndPoints;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateIdTokenAud(toReturn.decodedIdToken, clientId)) {\n        this.loggerService.logWarning('authorizedCallback incorrect aud');\n        toReturn.state = ValidationResult.IncorrectAud;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateIdTokenAzpExistsIfMoreThanOneAud(toReturn.decodedIdToken)) {\n        this.loggerService.logWarning('authorizedCallback missing azp');\n        toReturn.state = ValidationResult.IncorrectAzp;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateIdTokenAzpValid(toReturn.decodedIdToken, clientId)) {\n        this.loggerService.logWarning('authorizedCallback incorrect azp');\n        toReturn.state = ValidationResult.IncorrectAzp;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      if (!this.isIdTokenAfterRefreshTokenRequestValid(callbackContext, toReturn.decodedIdToken)) {\n        this.loggerService.logWarning('authorizedCallback pre, post id_token claims do not match in refresh');\n        toReturn.state = ValidationResult.IncorrectIdTokenClaimsAfterRefresh;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n\n      if (!this.tokenValidationService.validateIdTokenExpNotExpired(toReturn.decodedIdToken)) {\n        this.loggerService.logWarning('authorizedCallback id token expired');\n        toReturn.state = ValidationResult.TokenExpired;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n    } else {\n      this.loggerService.logDebug('No id_token found, skipping id_token validation');\n    }\n\n    // flow id_token\n    if (!isCurrentFlowImplicitFlowWithAccessToken && !isCurrentFlowCodeFlow) {\n      toReturn.authResponseIsValid = true;\n      toReturn.state = ValidationResult.Ok;\n      this.handleSuccessfulValidation();\n      this.handleUnsuccessfulValidation();\n      return toReturn;\n    }\n\n    // only do check if id_token returned, no always the case when using refresh tokens\n    if (callbackContext.authResult.id_token) {\n      const idTokenHeader = this.tokenHelperService.getHeaderFromToken(toReturn.idToken, false);\n\n      // The at_hash is optional for the code flow\n      if (isCurrentFlowCodeFlow && !(toReturn.decodedIdToken.at_hash as string)) {\n        this.loggerService.logDebug('Code Flow active, and no at_hash in the id_token, skipping check!');\n      } else if (\n        !this.tokenValidationService.validateIdTokenAtHash(\n          toReturn.accessToken,\n          toReturn.decodedIdToken.at_hash,\n          idTokenHeader.alg // 'RSA256'\n        ) ||\n        !toReturn.accessToken\n      ) {\n        this.loggerService.logWarning('authorizedCallback incorrect at_hash');\n        toReturn.state = ValidationResult.IncorrectAtHash;\n        this.handleUnsuccessfulValidation();\n        return toReturn;\n      }\n    }\n\n    toReturn.authResponseIsValid = true;\n    toReturn.state = ValidationResult.Ok;\n    this.handleSuccessfulValidation();\n    return toReturn;\n  }\n\n  private isIdTokenAfterRefreshTokenRequestValid(callbackContext: CallbackContext, newIdToken: any): boolean {\n    const { useRefreshToken, disableRefreshIdTokenAuthTimeValidation } = this.configurationProvider.getOpenIDConfiguration();\n    if (!useRefreshToken) {\n      return true;\n    }\n\n    if (!callbackContext.existingIdToken) {\n      return true;\n    }\n    const decodedIdToken = this.tokenHelperService.getPayloadFromToken(callbackContext.existingIdToken, false);\n\n    // Upon successful validation of the Refresh Token, the response body is the Token Response of Section 3.1.3.3\n    // except that it might not contain an id_token.\n\n    // If an ID Token is returned as a result of a token refresh request, the following requirements apply:\n\n    // its iss Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n    if (decodedIdToken.iss !== newIdToken.iss) {\n      this.loggerService.logDebug(`iss do not match: ${decodedIdToken.iss} ${newIdToken.iss}`);\n      return false;\n    }\n    // its azp Claim Value MUST be the same as in the ID Token issued when the original authentication occurred;\n    //   if no azp Claim was present in the original ID Token, one MUST NOT be present in the new ID Token, and\n    // otherwise, the same rules apply as apply when issuing an ID Token at the time of the original authentication.\n    if (decodedIdToken.azp !== newIdToken.azp) {\n      this.loggerService.logDebug(`azp do not match: ${decodedIdToken.azp} ${newIdToken.azp}`);\n      return false;\n    }\n    // its sub Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n    if (decodedIdToken.sub !== newIdToken.sub) {\n      this.loggerService.logDebug(`sub do not match: ${decodedIdToken.sub} ${newIdToken.sub}`);\n      return false;\n    }\n\n    // its aud Claim Value MUST be the same as in the ID Token issued when the original authentication occurred,\n    if (!this.equalityService.isStringEqualOrNonOrderedArrayEqual(decodedIdToken?.aud, newIdToken?.aud)) {\n      this.loggerService.logDebug(`aud in new id_token is not valid: '${decodedIdToken?.aud}' '${newIdToken.aud}'`);\n      return false;\n    }\n\n    if (disableRefreshIdTokenAuthTimeValidation) {\n      return true;\n    }\n\n    // its iat Claim MUST represent the time that the new ID Token is issued,\n    // if the ID Token contains an auth_time Claim, its value MUST represent the time of the original authentication\n    // - not the time that the new ID token is issued,\n    if (decodedIdToken.auth_time !== newIdToken.auth_time) {\n      this.loggerService.logDebug(`auth_time do not match: ${decodedIdToken.auth_time} ${newIdToken.auth_time}`);\n      return false;\n    }\n\n    return true;\n  }\n\n  private handleSuccessfulValidation(): void {\n    const { autoCleanStateAfterAuthentication } = this.configurationProvider.getOpenIDConfiguration();\n    this.storagePersistanceService.write('authNonce', '');\n\n    if (autoCleanStateAfterAuthentication) {\n      this.storagePersistanceService.write('authStateControl', '');\n    }\n    this.loggerService.logDebug('AuthorizedCallback token(s) validated, continue');\n  }\n\n  private handleUnsuccessfulValidation(): void {\n    const { autoCleanStateAfterAuthentication } = this.configurationProvider.getOpenIDConfiguration();\n    this.storagePersistanceService.write('authNonce', '');\n\n    if (autoCleanStateAfterAuthentication) {\n      this.storagePersistanceService.write('authStateControl', '');\n    }\n    this.loggerService.logDebug('AuthorizedCallback token(s) invalid');\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { AuthStateService } from '../../authState/auth-state.service';\nimport { AuthorizedState } from '../../authState/authorized-state';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StateValidationResult } from '../../validation/state-validation-result';\nimport { StateValidationService } from '../../validation/state-validation.service';\nimport { CallbackContext } from '../callback-context';\nimport { ResetAuthDataService } from '../reset-auth-data.service';\n\n@Injectable()\nexport class StateValidationCallbackHandlerService {\n  constructor(\n    private readonly loggerService: LoggerService,\n    private readonly stateValidationService: StateValidationService,\n    private readonly authStateService: AuthStateService,\n    private readonly resetAuthDataService: ResetAuthDataService,\n    @Inject(DOCUMENT) private readonly doc: any\n  ) {}\n\n  // STEP 4 All flows\n\n  callbackStateValidation(callbackContext: CallbackContext): Observable<CallbackContext> {\n    const validationResult = this.stateValidationService.getValidatedStateResult(callbackContext);\n    callbackContext.validationResult = validationResult;\n\n    if (validationResult.authResponseIsValid) {\n      this.authStateService.setAuthorizationData(validationResult.accessToken, callbackContext.authResult);\n      return of(callbackContext);\n    } else {\n      const errorMessage = `authorizedCallback, token(s) validation failed, resetting. Hash: ${this.doc.location.hash}`;\n      this.loggerService.logWarning(errorMessage);\n      this.resetAuthDataService.resetAuthorizationData();\n      this.publishUnauthorizedState(callbackContext.validationResult, callbackContext.isRenewProcess);\n      return throwError(errorMessage);\n    }\n  }\n\n  private publishUnauthorizedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean) {\n    this.authStateService.updateAndPublishAuthState({\n      authorizationState: AuthorizedState.Unauthorized,\n      validationResult: stateValidationResult.state,\n      isRenewProcess,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { AuthStateService } from '../../authState/auth-state.service';\nimport { AuthorizedState } from '../../authState/authorized-state';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { UserService } from '../../userData/user-service';\nimport { StateValidationResult } from '../../validation/state-validation-result';\nimport { CallbackContext } from '../callback-context';\nimport { FlowsDataService } from '../flows-data.service';\nimport { ResetAuthDataService } from '../reset-auth-data.service';\n\n@Injectable()\nexport class UserCallbackHandlerService {\n  constructor(\n    private readonly loggerService: LoggerService,\n    private readonly configurationProvider: ConfigurationProvider,\n    private readonly authStateService: AuthStateService,\n    private readonly flowsDataService: FlowsDataService,\n    private readonly userService: UserService,\n    private readonly resetAuthDataService: ResetAuthDataService\n  ) {}\n\n  // STEP 5 userData\n  callbackUser(callbackContext: CallbackContext): Observable<CallbackContext> {\n    const { isRenewProcess, validationResult, authResult, refreshToken } = callbackContext;\n    const { autoUserinfo, renewUserInfoAfterTokenRenew } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!autoUserinfo) {\n      if (!isRenewProcess || renewUserInfoAfterTokenRenew) {\n        // userData is set to the id_token decoded, auto get user data set to false\n        if (validationResult.decodedIdToken) {\n          this.userService.setUserDataToStore(validationResult.decodedIdToken);\n        }\n      }\n\n      if (!isRenewProcess && !refreshToken) {\n        this.flowsDataService.setSessionState(authResult.session_state);\n      }\n\n      this.publishAuthorizedState(validationResult, isRenewProcess);\n      return of(callbackContext);\n    }\n\n    return this.userService.getAndPersistUserDataInStore(isRenewProcess, validationResult.idToken, validationResult.decodedIdToken).pipe(\n      switchMap((userData) => {\n        if (!!userData) {\n          if (!refreshToken) {\n            this.flowsDataService.setSessionState(authResult.session_state);\n          }\n\n          this.publishAuthorizedState(validationResult, isRenewProcess);\n\n          return of(callbackContext);\n        } else {\n          this.resetAuthDataService.resetAuthorizationData();\n          this.publishUnauthorizedState(validationResult, isRenewProcess);\n          const errorMessage = `Called for userData but they were ${userData}`;\n          this.loggerService.logWarning(errorMessage);\n          return throwError(errorMessage);\n        }\n      }),\n      catchError((err) => {\n        const errorMessage = `Failed to retrieve user info with error:  ${err}`;\n        this.loggerService.logWarning(errorMessage);\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  private publishAuthorizedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean) {\n    this.authStateService.updateAndPublishAuthState({\n      authorizationState: AuthorizedState.Authorized,\n      validationResult: stateValidationResult.state,\n      isRenewProcess,\n    });\n  }\n\n  private publishUnauthorizedState(stateValidationResult: StateValidationResult, isRenewProcess: boolean) {\n    this.authStateService.updateAndPublishAuthState({\n      authorizationState: AuthorizedState.Unauthorized,\n      validationResult: stateValidationResult.state,\n      isRenewProcess,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { switchMap } from 'rxjs/operators';\nimport { CallbackContext } from './callback-context';\nimport { CodeFlowCallbackHandlerService } from './callback-handling/code-flow-callback-handler.service';\nimport { HistoryJwtKeysCallbackHandlerService } from './callback-handling/history-jwt-keys-callback-handler.service';\nimport { ImplicitFlowCallbackHandlerService } from './callback-handling/implicit-flow-callback-handler.service';\nimport { RefreshSessionCallbackHandlerService } from './callback-handling/refresh-session-callback-handler.service';\nimport { RefreshTokenCallbackHandlerService } from './callback-handling/refresh-token-callback-handler.service';\nimport { StateValidationCallbackHandlerService } from './callback-handling/state-validation-callback-handler.service';\nimport { UserCallbackHandlerService } from './callback-handling/user-callback-handler.service';\n\n@Injectable()\nexport class FlowsService {\n  constructor(\n    private readonly codeFlowCallbackHandlerService: CodeFlowCallbackHandlerService,\n    private readonly implicitFlowCallbackHandlerService: ImplicitFlowCallbackHandlerService,\n    private readonly historyJwtKeysCallbackHandlerService: HistoryJwtKeysCallbackHandlerService,\n    private readonly userHandlerService: UserCallbackHandlerService,\n    private readonly stateValidationCallbackHandlerService: StateValidationCallbackHandlerService,\n    private readonly refreshSessionCallbackHandlerService: RefreshSessionCallbackHandlerService,\n    private readonly refreshTokenCallbackHandlerService: RefreshTokenCallbackHandlerService\n  ) {}\n\n  processCodeFlowCallback(urlToCheck: string) {\n    return this.codeFlowCallbackHandlerService.codeFlowCallback(urlToCheck).pipe(\n      switchMap((callbackContext) => this.codeFlowCallbackHandlerService.codeFlowCodeRequest(callbackContext)),\n      switchMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext)),\n      switchMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext)),\n      switchMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext))\n    );\n  }\n\n  processSilentRenewCodeFlowCallback(firstContext: CallbackContext) {\n    return this.codeFlowCallbackHandlerService.codeFlowCodeRequest(firstContext).pipe(\n      switchMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext)),\n      switchMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext)),\n      switchMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext))\n    );\n  }\n\n  processImplicitFlowCallback(hash?: string) {\n    return this.implicitFlowCallbackHandlerService.implicitFlowCallback(hash).pipe(\n      switchMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext)),\n      switchMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext)),\n      switchMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext))\n    );\n  }\n\n  processRefreshToken(customParams?: { [key: string]: string | number | boolean }) {\n    return this.refreshSessionCallbackHandlerService.refreshSessionWithRefreshTokens().pipe(\n      switchMap((callbackContext) => this.refreshTokenCallbackHandlerService.refreshTokensRequestTokens(callbackContext, customParams)),\n      switchMap((callbackContext) => this.historyJwtKeysCallbackHandlerService.callbackHistoryAndResetJwtKeys(callbackContext)),\n      switchMap((callbackContext) => this.stateValidationCallbackHandlerService.callbackStateValidation(callbackContext)),\n      switchMap((callbackContext) => this.userHandlerService.callbackUser(callbackContext))\n    );\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class IntervallService {\n  runTokenValidationRunning: Subscription = null;\n\n  constructor(private zone: NgZone) {}\n\n  stopPeriodicallTokenCheck(): void {\n    if (this.runTokenValidationRunning) {\n      this.runTokenValidationRunning.unsubscribe();\n      this.runTokenValidationRunning = null;\n    }\n  }\n\n  startPeriodicTokenCheck(repeatAfterSeconds: number) {\n    const millisecondsDelayBetweenTokenCheck = repeatAfterSeconds * 1000;\n\n    return new Observable((subscriber) => {\n      let intervalId;\n      this.zone.runOutsideAngular(() => {\n        intervalId = setInterval(() => subscriber.next(), millisecondsDelayBetweenTokenCheck);\n      });\n\n      return () => {\n        clearInterval(intervalId);\n      };\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { FlowsService } from '../flows/flows.service';\nimport { IntervallService } from './intervall.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ImplicitFlowCallbackService {\n  constructor(\n    private flowsService: FlowsService,\n    private configurationProvider: ConfigurationProvider,\n    private router: Router,\n    private flowsDataService: FlowsDataService,\n    private intervalService: IntervallService\n  ) {}\n\n  authorizedImplicitFlowCallback(hash?: string) {\n    const isRenewProcess = this.flowsDataService.isSilentRenewRunning();\n    const { triggerAuthorizationResultEvent, postLoginRoute, unauthorizedRoute } = this.configurationProvider.getOpenIDConfiguration();\n\n    return this.flowsService.processImplicitFlowCallback(hash).pipe(\n      tap((callbackContext) => {\n        if (!triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\n          this.router.navigate([postLoginRoute]);\n        }\n      }),\n      catchError((error) => {\n        this.flowsDataService.resetSilentRenewRunning();\n        this.intervalService.stopPeriodicallTokenCheck();\n        if (!triggerAuthorizationResultEvent && !isRenewProcess) {\n          this.router.navigate([unauthorizedRoute]);\n        }\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { FlowsService } from '../flows/flows.service';\nimport { IntervallService } from './intervall.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CodeFlowCallbackService {\n  constructor(\n    private flowsService: FlowsService,\n    private flowsDataService: FlowsDataService,\n    private intervallService: IntervallService,\n    private configurationProvider: ConfigurationProvider,\n    private router: Router\n  ) {}\n\n  authorizedCallbackWithCode(urlToCheck: string) {\n    const isRenewProcess = this.flowsDataService.isSilentRenewRunning();\n    const { triggerAuthorizationResultEvent, postLoginRoute, unauthorizedRoute } = this.configurationProvider.getOpenIDConfiguration();\n\n    return this.flowsService.processCodeFlowCallback(urlToCheck).pipe(\n      tap((callbackContext) => {\n        if (!triggerAuthorizationResultEvent && !callbackContext.isRenewProcess) {\n          this.router.navigate([postLoginRoute]);\n        }\n      }),\n      catchError((error) => {\n        this.flowsDataService.resetSilentRenewRunning();\n        this.intervallService.stopPeriodicallTokenCheck();\n        if (!triggerAuthorizationResultEvent && !isRenewProcess) {\n          this.router.navigate([unauthorizedRoute]);\n        }\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CallbackContext } from '../flows/callback-context';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { UrlService } from '../utils/url/url.service';\nimport { CodeFlowCallbackService } from './code-flow-callback.service';\nimport { ImplicitFlowCallbackService } from './implicit-flow-callback.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CallbackService {\n  private stsCallbackInternal$ = new Subject();\n\n  get stsCallback$() {\n    return this.stsCallbackInternal$.asObservable();\n  }\n\n  constructor(\n    private urlService: UrlService,\n    private flowHelper: FlowHelper,\n    private implicitFlowCallbackService: ImplicitFlowCallbackService,\n    private codeFlowCallbackService: CodeFlowCallbackService\n  ) {}\n\n  isCallback(currentUrl: string): boolean {\n    return this.urlService.isCallbackFromSts(currentUrl);\n  }\n\n  handleCallbackAndFireEvents(currentCallbackUrl: string): Observable<CallbackContext> {\n    let callback$: Observable<any>;\n\n    if (this.flowHelper.isCurrentFlowCodeFlow()) {\n      callback$ = this.codeFlowCallbackService.authorizedCallbackWithCode(currentCallbackUrl);\n    } else if (this.flowHelper.isCurrentFlowAnyImplicitFlow()) {\n      callback$ = this.implicitFlowCallbackService.authorizedImplicitFlowCallback();\n    }\n\n    return callback$.pipe(tap(() => this.stsCallbackInternal$.next()));\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { LoggerService } from '../logging/logger.service';\n\n@Injectable()\nexport class IFrameService {\n  constructor(@Inject(DOCUMENT) private readonly doc: any, private loggerService: LoggerService) {}\n\n  getExistingIFrame(identifier: string): HTMLIFrameElement | null {\n    const iFrameOnParent = this.getIFrameFromParentWindow(identifier);\n    if (this.isIFrameElement(iFrameOnParent)) {\n      return iFrameOnParent;\n    }\n\n    const iFrameOnSelf = this.getIFrameFromWindow(identifier);\n    if (this.isIFrameElement(iFrameOnSelf)) {\n      return iFrameOnSelf;\n    }\n    return null;\n  }\n\n  addIFrameToWindowBody(identifier: string): HTMLIFrameElement {\n    const sessionIframe = this.doc.createElement('iframe');\n    sessionIframe.id = identifier;\n    sessionIframe.title = identifier;\n    this.loggerService.logDebug(sessionIframe);\n    sessionIframe.style.display = 'none';\n    this.doc.body.appendChild(sessionIframe);\n    return sessionIframe;\n  }\n\n  private getIFrameFromParentWindow(identifier: string): HTMLIFrameElement | null {\n    try {\n      const iFrameElement = this.doc.defaultView.parent.document.getElementById(identifier);\n      if (this.isIFrameElement(iFrameElement)) {\n        return iFrameElement;\n      }\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  private getIFrameFromWindow(identifier: string): HTMLIFrameElement | null {\n    const iFrameElement = this.doc.getElementById(identifier);\n    if (this.isIFrameElement(iFrameElement)) {\n      return iFrameElement;\n    }\n    return null;\n  }\n\n  private isIFrameElement(element: HTMLElement | null): element is HTMLIFrameElement {\n    return !!element && element instanceof HTMLIFrameElement;\n  }\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { of, Subject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { AuthorizedState } from '../authState/authorized-state';\nimport { ImplicitFlowCallbackService } from '../callback/implicit-flow-callback.service';\nimport { IntervallService } from '../callback/intervall.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { CallbackContext } from '../flows/callback-context';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { FlowsService } from '../flows/flows.service';\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { ValidationResult } from '../validation/validation-result';\nimport { IFrameService } from './existing-iframe.service';\n\nconst IFRAME_FOR_SILENT_RENEW_IDENTIFIER = 'myiFrameForSilentRenew';\n\n@Injectable()\nexport class SilentRenewService {\n  private refreshSessionWithIFrameCompletedInternal$ = new Subject<CallbackContext>();\n\n  get refreshSessionWithIFrameCompleted$() {\n    return this.refreshSessionWithIFrameCompletedInternal$.asObservable();\n  }\n\n  constructor(\n    private configurationProvider: ConfigurationProvider,\n    private iFrameService: IFrameService,\n    private flowsService: FlowsService,\n    private resetAuthDataService: ResetAuthDataService,\n    private flowsDataService: FlowsDataService,\n    private authStateService: AuthStateService,\n    private loggerService: LoggerService,\n    private flowHelper: FlowHelper,\n    private implicitFlowCallbackService: ImplicitFlowCallbackService,\n    private intervalService: IntervallService\n  ) {}\n\n  getOrCreateIframe(): HTMLIFrameElement {\n    const existingIframe = this.getExistingIframe();\n\n    if (!existingIframe) {\n      return this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n    }\n\n    return existingIframe;\n  }\n\n  isSilentRenewConfigured() {\n    const { useRefreshToken, silentRenew } = this.configurationProvider.getOpenIDConfiguration();\n    return !useRefreshToken && silentRenew;\n  }\n\n  codeFlowCallbackSilentRenewIframe(urlParts) {\n    const params = new HttpParams({\n      fromString: urlParts[1],\n    });\n\n    const error = params.get('error');\n\n    if (error) {\n      this.authStateService.updateAndPublishAuthState({\n        authorizationState: AuthorizedState.Unauthorized,\n        validationResult: ValidationResult.LoginRequired,\n        isRenewProcess: true,\n      });\n      this.resetAuthDataService.resetAuthorizationData();\n      this.flowsDataService.setNonce('');\n      this.intervalService.stopPeriodicallTokenCheck();\n      return throwError(error);\n    }\n\n    const code = params.get('code');\n    const state = params.get('state');\n    const sessionState = params.get('session_state');\n\n    const callbackContext = {\n      code,\n      refreshToken: null,\n      state,\n      sessionState,\n      authResult: null,\n      isRenewProcess: true,\n      jwtKeys: null,\n      validationResult: null,\n      existingIdToken: null,\n    };\n\n    return this.flowsService.processSilentRenewCodeFlowCallback(callbackContext).pipe(\n      catchError((errorFromFlow) => {\n        this.intervalService.stopPeriodicallTokenCheck();\n        this.resetAuthDataService.resetAuthorizationData();\n        return throwError(errorFromFlow);\n      })\n    );\n  }\n\n  silentRenewEventHandler(e: CustomEvent) {\n    this.loggerService.logDebug('silentRenewEventHandler');\n    if (!e.detail) {\n      return;\n    }\n\n    let callback$ = of(null);\n\n    const isCodeFlow = this.flowHelper.isCurrentFlowCodeFlow();\n\n    if (isCodeFlow) {\n      const urlParts = e.detail.toString().split('?');\n      callback$ = this.codeFlowCallbackSilentRenewIframe(urlParts);\n    } else {\n      callback$ = this.implicitFlowCallbackService.authorizedImplicitFlowCallback(e.detail);\n    }\n\n    callback$.subscribe(\n      (callbackContext) => {\n        this.refreshSessionWithIFrameCompletedInternal$.next(callbackContext);\n        this.flowsDataService.resetSilentRenewRunning();\n      },\n      (err: any) => {\n        this.loggerService.logError('Error: ' + err);\n        this.refreshSessionWithIFrameCompletedInternal$.next(null);\n        this.flowsDataService.resetSilentRenewRunning();\n      }\n    );\n  }\n\n  private getExistingIframe() {\n    return this.iFrameService.getExistingIFrame(IFRAME_FOR_SILENT_RENEW_IDENTIFIER);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, Renderer2, RendererFactory2 } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { LoggerService } from '../logging/logger.service';\nimport { UrlService } from '../utils/url/url.service';\nimport { SilentRenewService } from './silent-renew.service';\n\n@Injectable({ providedIn: 'root' })\nexport class RefreshSessionIframeService {\n  private renderer: Renderer2;\n\n  constructor(\n    @Inject(DOCUMENT) private readonly doc: any,\n    private loggerService: LoggerService,\n    private urlService: UrlService,\n    private silentRenewService: SilentRenewService,\n    rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  refreshSessionWithIframe(customParams?: { [key: string]: string | number | boolean }): Observable<boolean> {\n    this.loggerService.logDebug('BEGIN refresh session Authorize Iframe renew');\n    const url = this.urlService.getRefreshSessionSilentRenewUrl(customParams);\n    return this.sendAuthorizeRequestUsingSilentRenew(url);\n  }\n\n  private sendAuthorizeRequestUsingSilentRenew(url: string): Observable<boolean> {\n    const sessionIframe = this.silentRenewService.getOrCreateIframe();\n    this.initSilentRenewRequest();\n    this.loggerService.logDebug('sendAuthorizeRequestUsingSilentRenew for URL:' + url);\n\n    return new Observable((observer) => {\n      const onLoadHandler = () => {\n        sessionIframe.removeEventListener('load', onLoadHandler);\n        this.loggerService.logDebug('removed event listener from IFrame');\n        observer.next(true);\n        observer.complete();\n      };\n      sessionIframe.addEventListener('load', onLoadHandler);\n      sessionIframe.contentWindow.location.replace(url);\n    });\n  }\n\n  private initSilentRenewRequest() {\n    const instanceId = Math.random();\n\n    const initDestroyHandler = this.renderer.listen('window', 'oidc-silent-renew-init', (e: CustomEvent) => {\n      if (e.detail !== instanceId) {\n        initDestroyHandler();\n        renewDestroyHandler();\n      }\n    });\n    const renewDestroyHandler = this.renderer.listen('window', 'oidc-silent-renew-message', (e) =>\n      this.silentRenewService.silentRenewEventHandler(e)\n    );\n\n    this.doc.defaultView.dispatchEvent(\n      new CustomEvent('oidc-silent-renew-init', {\n        detail: instanceId,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { FlowsService } from '../flows/flows.service';\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { IntervallService } from './intervall.service';\n\n@Injectable({ providedIn: 'root' })\nexport class RefreshSessionRefreshTokenService {\n  constructor(\n    private loggerService: LoggerService,\n    private resetAuthDataService: ResetAuthDataService,\n    private flowsService: FlowsService,\n    private intervalService: IntervallService\n  ) {}\n\n  refreshSessionWithRefreshTokens(customParams?: { [key: string]: string | number | boolean }) {\n    this.loggerService.logDebug('BEGIN refresh session Authorize');\n\n    return this.flowsService.processRefreshToken(customParams).pipe(\n      catchError((error) => {\n        this.intervalService.stopPeriodicallTokenCheck();\n        this.resetAuthDataService.resetAuthorizationData();\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\nimport { RefreshSessionIframeService } from '../iframe/refresh-session-iframe.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { UserService } from '../userData/user-service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { IntervallService } from './intervall.service';\nimport { RefreshSessionRefreshTokenService } from './refresh-session-refresh-token.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PeriodicallyTokenCheckService {\n  constructor(\n    private resetAuthDataService: ResetAuthDataService,\n    private flowHelper: FlowHelper,\n    private configurationProvider: ConfigurationProvider,\n    private flowsDataService: FlowsDataService,\n    private loggerService: LoggerService,\n    private userService: UserService,\n    private authStateService: AuthStateService,\n    private refreshSessionIframeService: RefreshSessionIframeService,\n    private refreshSessionRefreshTokenService: RefreshSessionRefreshTokenService,\n    private intervalService: IntervallService,\n    private storagePersistanceService: StoragePersistanceService\n  ) {}\n\n  startTokenValidationPeriodically(repeatAfterSeconds: number) {\n    const { silentRenew } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!!this.intervalService.runTokenValidationRunning || !silentRenew) {\n      return;\n    }\n\n    this.loggerService.logDebug(`starting token validation check every ${repeatAfterSeconds}s`);\n\n    const periodicallyCheck$ = this.intervalService.startPeriodicTokenCheck(repeatAfterSeconds).pipe(\n      switchMap(() => {\n        const idToken = this.authStateService.getIdToken();\n        const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning();\n        const userDataFromStore = this.userService.getUserDataFromStore();\n\n        this.loggerService.logDebug(\n          `Checking: silentRenewRunning: ${isSilentRenewRunning} id_token: ${!!idToken} userData: ${!!userDataFromStore}`\n        );\n\n        const shouldBeExecuted = userDataFromStore && !isSilentRenewRunning && idToken;\n\n        if (!shouldBeExecuted) {\n          return of(null);\n        }\n\n        const idTokenHasExpired = this.authStateService.hasIdTokenExpired();\n        const accessTokenHasExpired = this.authStateService.hasAccessTokenExpiredIfExpiryExists();\n\n        if (!idTokenHasExpired && !accessTokenHasExpired) {\n          return of(null);\n        }\n\n        const config = this.configurationProvider.getOpenIDConfiguration();\n\n        if (!config?.silentRenew) {\n          this.resetAuthDataService.resetAuthorizationData();\n          return of(null);\n        }\n\n        this.loggerService.logDebug('starting silent renew...');\n\n        this.flowsDataService.setSilentRenewRunning();\n\n        // Retrieve Dynamically Set Custom Params\n        const customParams: { [key: string]: string | number | boolean } = this.storagePersistanceService.read(\n          'storageCustomRequestParams'\n        );\n\n        if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens()) {\n          // Refresh Session using Refresh tokens\n          return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(customParams);\n        }\n\n        return this.refreshSessionIframeService.refreshSessionWithIframe(customParams);\n      })\n    );\n\n    this.intervalService.runTokenValidationRunning = periodicallyCheck$\n      .pipe(\n        catchError(() => {\n          this.flowsDataService.resetSilentRenewRunning();\n          return throwError('periodically check failed');\n        })\n      )\n      .subscribe(\n        () => {\n          this.loggerService.logDebug('silent renew, periodic check finished!');\n          if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens()) {\n            this.flowsDataService.resetSilentRenewRunning();\n          }\n        },\n        (err) => {\n          this.loggerService.logError('silent renew failed!', err);\n        }\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { map, retry } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\n\nconst WELL_KNOWN_SUFFIX = `/.well-known/openid-configuration`;\n\n@Injectable()\nexport class AuthWellKnownDataService {\n  constructor(private readonly http: DataService) {}\n\n  getWellKnownEndPointsFromUrl(authWellknownEndpoint: string) {\n    return this.getWellKnownDocument(authWellknownEndpoint).pipe(\n      map(\n        (wellKnownEndpoints) =>\n          ({\n            issuer: wellKnownEndpoints.issuer,\n            jwksUri: wellKnownEndpoints.jwks_uri,\n            authorizationEndpoint: wellKnownEndpoints.authorization_endpoint,\n            tokenEndpoint: wellKnownEndpoints.token_endpoint,\n            userinfoEndpoint: wellKnownEndpoints.userinfo_endpoint,\n            endSessionEndpoint: wellKnownEndpoints.end_session_endpoint,\n            checkSessionIframe: wellKnownEndpoints.check_session_iframe,\n            revocationEndpoint: wellKnownEndpoints.revocation_endpoint,\n            introspectionEndpoint: wellKnownEndpoints.introspection_endpoint,\n            parEndpoint: wellKnownEndpoints.pushed_authorization_request_endpoint,\n          } as AuthWellKnownEndpoints)\n      )\n    );\n  }\n\n  private getWellKnownDocument(wellKnownEndpoint: string) {\n    let url = wellKnownEndpoint;\n\n    if (!wellKnownEndpoint.includes(WELL_KNOWN_SUFFIX)) {\n      url = `${wellKnownEndpoint}${WELL_KNOWN_SUFFIX}`;\n    }\n\n    return this.http.get<any>(url).pipe(retry(2));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { AuthWellKnownDataService } from './auth-well-known-data.service';\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\nimport { PublicConfiguration } from './public-configuration';\n\n@Injectable()\nexport class AuthWellKnownService {\n  constructor(\n    private publicEventsService: PublicEventsService,\n    private dataService: AuthWellKnownDataService,\n    private storagePersistanceService: StoragePersistanceService\n  ) {}\n\n  getAuthWellKnownEndPoints(authWellknownEndpointUrl: string) {\n    const alreadySavedWellKnownEndpoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    if (!!alreadySavedWellKnownEndpoints) {\n      return of(alreadySavedWellKnownEndpoints);\n    }\n\n    return this.getWellKnownEndPointsFromUrl(authWellknownEndpointUrl).pipe(\n      tap((mappedWellKnownEndpoints) => this.storeWellKnownEndpoints(mappedWellKnownEndpoints)),\n      catchError((error) => {\n        this.publicEventsService.fireEvent<PublicConfiguration>(EventTypes.ConfigLoadingFailed, null);\n        return throwError(error);\n      })\n    );\n  }\n\n  storeWellKnownEndpoints(mappedWellKnownEndpoints: AuthWellKnownEndpoints) {\n    this.storagePersistanceService.write('authWellKnownEndPoints', mappedWellKnownEndpoints);\n  }\n\n  private getWellKnownEndPointsFromUrl(authWellknownEndpoint: string) {\n    return this.dataService.getWellKnownEndPointsFromUrl(authWellknownEndpoint);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { forkJoin, Observable, of, throwError, TimeoutError, timer } from 'rxjs';\nimport { map, mergeMap, retryWhen, switchMap, take, timeout } from 'rxjs/operators';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { AuthWellKnownService } from '../config/auth-well-known.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { FlowsDataService } from '../flows/flows-data.service';\nimport { RefreshSessionIframeService } from '../iframe/refresh-session-iframe.service';\nimport { SilentRenewService } from '../iframe/silent-renew.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { FlowHelper } from '../utils/flowHelper/flow-helper.service';\nimport { RefreshSessionRefreshTokenService } from './refresh-session-refresh-token.service';\n\nexport const MAX_RETRY_ATTEMPTS = 3;\n@Injectable({ providedIn: 'root' })\nexport class RefreshSessionService {\n  constructor(\n    private flowHelper: FlowHelper,\n    private configurationProvider: ConfigurationProvider,\n    private flowsDataService: FlowsDataService,\n    private loggerService: LoggerService,\n    private silentRenewService: SilentRenewService,\n    private authStateService: AuthStateService,\n    private authWellKnownService: AuthWellKnownService,\n    private refreshSessionIframeService: RefreshSessionIframeService,\n    private refreshSessionRefreshTokenService: RefreshSessionRefreshTokenService\n  ) {}\n\n  forceRefreshSession(customParams?: { [key: string]: string | number | boolean }) {\n    if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens()) {\n      return this.startRefreshSession(customParams).pipe(\n        map(() => {\n          const isAuthenticated = this.authStateService.areAuthStorageTokensValid();\n          if (isAuthenticated) {\n            return {\n              idToken: this.authStateService.getIdToken(),\n              accessToken: this.authStateService.getAccessToken(),\n            };\n          }\n\n          return null;\n        })\n      );\n    }\n\n    const { silentRenewTimeoutInSeconds } = this.configurationProvider.getOpenIDConfiguration();\n    const timeOutTime = silentRenewTimeoutInSeconds * 1000;\n\n    return forkJoin([\n      this.startRefreshSession(customParams),\n      this.silentRenewService.refreshSessionWithIFrameCompleted$.pipe(take(1)),\n    ]).pipe(\n      timeout(timeOutTime),\n      retryWhen(this.timeoutRetryStrategy.bind(this)),\n      map(([_, callbackContext]) => {\n        const isAuthenticated = this.authStateService.areAuthStorageTokensValid();\n        if (isAuthenticated) {\n          return {\n            idToken: callbackContext?.authResult?.id_token,\n            accessToken: callbackContext?.authResult?.access_token,\n          };\n        }\n\n        return null;\n      })\n    );\n  }\n\n  private startRefreshSession(customParams?: { [key: string]: string | number | boolean }) {\n    const isSilentRenewRunning = this.flowsDataService.isSilentRenewRunning();\n    this.loggerService.logDebug(`Checking: silentRenewRunning: ${isSilentRenewRunning}`);\n    const shouldBeExecuted = !isSilentRenewRunning;\n\n    if (!shouldBeExecuted) {\n      return of(null);\n    }\n\n    const { authWellknownEndpoint } = this.configurationProvider.getOpenIDConfiguration() || {};\n\n    if (!authWellknownEndpoint) {\n      this.loggerService.logError('no authwellknownendpoint given!');\n      return of(null);\n    }\n\n    return this.authWellKnownService.getAuthWellKnownEndPoints(authWellknownEndpoint).pipe(\n      switchMap(() => {\n        this.flowsDataService.setSilentRenewRunning();\n\n        if (this.flowHelper.isCurrentFlowCodeFlowWithRefreshTokens()) {\n          // Refresh Session using Refresh tokens\n          return this.refreshSessionRefreshTokenService.refreshSessionWithRefreshTokens(customParams);\n        }\n\n        return this.refreshSessionIframeService.refreshSessionWithIframe(customParams);\n      })\n    );\n  }\n\n  private timeoutRetryStrategy(errorAttempts: Observable<any>) {\n    return errorAttempts.pipe(\n      mergeMap((error, index) => {\n        const scalingDuration = 1000;\n        const currentAttempt = index + 1;\n\n        if (!(error instanceof TimeoutError) || currentAttempt > MAX_RETRY_ATTEMPTS) {\n          return throwError(error);\n        }\n\n        this.loggerService.logDebug(`forceRefreshSession timeout. Attempt #${currentAttempt}`);\n\n        this.flowsDataService.resetSilentRenewRunning();\n        return timer(currentAttempt * scalingDuration);\n      })\n    );\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { IFrameService } from './existing-iframe.service';\n\nconst IFRAME_FOR_CHECK_SESSION_IDENTIFIER = 'myiFrameForCheckSession';\n\n// http://openid.net/specs/openid-connect-session-1_0-ID4.html\n\n@Injectable()\nexport class CheckSessionService {\n  private checkSessionReceived = false;\n  private scheduledHeartBeatRunning: any;\n  private lastIFrameRefresh = 0;\n  private outstandingMessages = 0;\n  private heartBeatInterval = 3000;\n  private iframeRefreshInterval = 60000;\n  private checkSessionChangedInternal$ = new BehaviorSubject<boolean>(false);\n\n  get checkSessionChanged$() {\n    return this.checkSessionChangedInternal$.asObservable();\n  }\n\n  constructor(\n    private storagePersistanceService: StoragePersistanceService,\n    private loggerService: LoggerService,\n    private iFrameService: IFrameService,\n    private eventService: PublicEventsService,\n    private configurationProvider: ConfigurationProvider,\n    private zone: NgZone\n  ) {}\n\n  isCheckSessionConfigured() {\n    const { startCheckSession } = this.configurationProvider.getOpenIDConfiguration();\n    return startCheckSession;\n  }\n\n  start(): void {\n    if (!!this.scheduledHeartBeatRunning) {\n      return;\n    }\n\n    const { clientId } = this.configurationProvider.getOpenIDConfiguration();\n    this.pollServerSession(clientId);\n  }\n\n  stop(): void {\n    if (!this.scheduledHeartBeatRunning) {\n      return;\n    }\n\n    this.clearScheduledHeartBeat();\n    this.checkSessionReceived = false;\n  }\n\n  serverStateChanged() {\n    const { startCheckSession } = this.configurationProvider.getOpenIDConfiguration();\n    return startCheckSession && this.checkSessionReceived;\n  }\n\n  getExistingIframe() {\n    return this.iFrameService.getExistingIFrame(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n  }\n\n  private init(): Observable<any> {\n    if (this.lastIFrameRefresh + this.iframeRefreshInterval > Date.now()) {\n      return of(undefined);\n    }\n\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n\n    if (!authWellKnownEndPoints) {\n      this.loggerService.logWarning('init check session: authWellKnownEndpoints is undefined. Returning.');\n      return of();\n    }\n\n    const existingIframe = this.getOrCreateIframe();\n    const checkSessionIframe = authWellKnownEndPoints.checkSessionIframe;\n\n    if (checkSessionIframe) {\n      existingIframe.contentWindow.location.replace(checkSessionIframe);\n    } else {\n      this.loggerService.logWarning('init check session: checkSessionIframe is not configured to run');\n    }\n\n    return new Observable((observer) => {\n      existingIframe.onload = () => {\n        this.lastIFrameRefresh = Date.now();\n        observer.next();\n        observer.complete();\n      };\n    });\n  }\n\n  private pollServerSession(clientId: string) {\n    this.outstandingMessages = 0;\n    const pollServerSessionRecur = () => {\n      this.init()\n        .pipe(take(1))\n        .subscribe(() => {\n          const existingIframe = this.getExistingIframe();\n          if (existingIframe && clientId) {\n            this.loggerService.logDebug(existingIframe);\n            const sessionState = this.storagePersistanceService.read('session_state');\n            const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n\n            if (sessionState && authWellKnownEndPoints?.checkSessionIframe) {\n              const iframeOrigin = new URL(authWellKnownEndPoints.checkSessionIframe)?.origin;\n              this.outstandingMessages++;\n              existingIframe.contentWindow.postMessage(clientId + ' ' + sessionState, iframeOrigin);\n            } else {\n              this.loggerService.logDebug(`OidcSecurityCheckSession pollServerSession session_state is '${sessionState}'`);\n              this.loggerService.logDebug(`AuthWellKnownEndPoints is '${JSON.stringify(authWellKnownEndPoints)}'`);\n              this.checkSessionChangedInternal$.next(true);\n            }\n          } else {\n            this.loggerService.logWarning('OidcSecurityCheckSession pollServerSession checkSession IFrame does not exist');\n            this.loggerService.logDebug(clientId);\n            this.loggerService.logDebug(existingIframe);\n          }\n\n          // after sending three messages with no response, fail.\n          if (this.outstandingMessages > 3) {\n            this.loggerService.logError(\n              `OidcSecurityCheckSession not receiving check session response messages.\n                            Outstanding messages: ${this.outstandingMessages}. Server unreachable?`\n            );\n          }\n\n          this.zone.runOutsideAngular(() => {\n            this.scheduledHeartBeatRunning = setTimeout(() => this.zone.run(pollServerSessionRecur), this.heartBeatInterval);\n          });\n        });\n    };\n\n    pollServerSessionRecur();\n  }\n\n  private clearScheduledHeartBeat() {\n    clearTimeout(this.scheduledHeartBeatRunning);\n    this.scheduledHeartBeatRunning = null;\n  }\n\n  private messageHandler(e: any) {\n    const existingIFrame = this.getExistingIframe();\n    const authWellKnownEndPoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n    const startsWith = !!authWellKnownEndPoints?.checkSessionIframe?.startsWith(e.origin);\n    this.outstandingMessages = 0;\n    if (existingIFrame && startsWith && e.source === existingIFrame.contentWindow) {\n      if (e.data === 'error') {\n        this.loggerService.logWarning('error from checksession messageHandler');\n      } else if (e.data === 'changed') {\n        this.loggerService.logDebug(e);\n        this.checkSessionReceived = true;\n        this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\n        this.checkSessionChangedInternal$.next(true);\n      } else {\n        this.eventService.fireEvent(EventTypes.CheckSessionReceived, e.data);\n        this.loggerService.logDebug(e.data + ' from checksession messageHandler');\n      }\n    }\n  }\n\n  private bindMessageEventToIframe() {\n    const iframeMessageEvent = this.messageHandler.bind(this);\n    window.addEventListener('message', iframeMessageEvent, false);\n  }\n\n  private getOrCreateIframe() {\n    const existingIframe = this.getExistingIframe();\n\n    if (!existingIframe) {\n      const frame = this.iFrameService.addIFrameToWindowBody(IFRAME_FOR_CHECK_SESSION_IDENTIFIER);\n      this.bindMessageEventToIframe();\n      return frame;\n    }\n\n    return existingIframe;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { PopupOptions } from './popup-options';\n\n@Injectable({ providedIn: 'root' })\nexport class PopUpService {\n  private STORAGE_IDENTIFIER = 'popupauth';\n  private popUp: Window;\n  private receivedUrlInternal$ = new Subject<string>();\n\n  get receivedUrl$(): Observable<string> {\n    return this.receivedUrlInternal$.asObservable();\n  }\n\n  isCurrentlyInPopup(): boolean {\n    const popup = sessionStorage.getItem(this.STORAGE_IDENTIFIER);\n    return !!window.opener && window.opener !== window && !!popup;\n  }\n\n  openPopUp(url: string, popupOptions?: PopupOptions): void {\n    const optionsToPass = this.getOptions(popupOptions);\n    this.popUp = window.open(url, '_blank', optionsToPass);\n    this.popUp.sessionStorage.setItem(this.STORAGE_IDENTIFIER, 'true');\n\n    const listener = (event: MessageEvent): void => {\n      if (!event?.data || typeof event.data !== 'string') {\n        return;\n      }\n\n      this.receivedUrlInternal$.next(event.data);\n\n      this.cleanUp(listener);\n    };\n\n    window.addEventListener('message', listener, false);\n  }\n\n  sendMessageToMainWindow(url: string): void {\n    if (window.opener) {\n      this.sendMessage(url, window.location.href);\n    }\n  }\n\n  private cleanUp(listener: any): void {\n    window.removeEventListener('message', listener, false);\n\n    if (this.popUp) {\n      this.popUp.sessionStorage.removeItem(this.STORAGE_IDENTIFIER);\n      this.popUp.close();\n      this.popUp = null;\n    }\n  }\n\n  private sendMessage(url: string, href: string): void {\n    window.opener.postMessage(url, href);\n  }\n\n  private getOptions(popupOptions?: PopupOptions): string {\n    const popupDefaultOptions = { width: 500, height: 500, left: 50, top: 50 };\n\n    const options = { ...popupDefaultOptions, ...(popupOptions || {}) };\n\n    return Object.entries(options)\n      .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n      .join(',');\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\nimport { AuthStateService } from './authState/auth-state.service';\nimport { AutoLoginService } from './auto-login/auto-login-service';\nimport { CallbackService } from './callback/callback.service';\nimport { PeriodicallyTokenCheckService } from './callback/periodically-token-check.service';\nimport { RefreshSessionService } from './callback/refresh-session.service';\nimport { ConfigurationProvider } from './config/config.provider';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { SilentRenewService } from './iframe/silent-renew.service';\nimport { LoggerService } from './logging/logger.service';\nimport { PopUpService } from './login/popup/popup.service';\nimport { UserService } from './userData/user-service';\n\n@Injectable()\nexport class CheckAuthService {\n  constructor(\n    @Inject(DOCUMENT) private readonly doc: any,\n    private checkSessionService: CheckSessionService,\n    private silentRenewService: SilentRenewService,\n    private userService: UserService,\n    private loggerService: LoggerService,\n    private configurationProvider: ConfigurationProvider,\n    private authStateService: AuthStateService,\n    private callbackService: CallbackService,\n    private refreshSessionService: RefreshSessionService,\n    private periodicallyTokenCheckService: PeriodicallyTokenCheckService,\n    private popupService: PopUpService,\n    private autoLoginService: AutoLoginService,\n    private router: Router\n  ) {}\n\n  checkAuth(url?: string): Observable<boolean> {\n    if (!this.configurationProvider.hasValidConfig()) {\n      this.loggerService.logError('Please provide a configuration before setting up the module');\n      return of(false);\n    }\n\n    const { stsServer } = this.configurationProvider.getOpenIDConfiguration();\n\n    this.loggerService.logDebug('STS server: ', stsServer);\n\n    const currentUrl = url || this.doc.defaultView.location.toString();\n\n    if (this.popupService.isCurrentlyInPopup()) {\n      this.popupService.sendMessageToMainWindow(currentUrl);\n      return of(null);\n    }\n\n    const isCallback = this.callbackService.isCallback(currentUrl);\n\n    this.loggerService.logDebug('currentUrl to check auth with: ', currentUrl);\n\n    const callback$ = isCallback ? this.callbackService.handleCallbackAndFireEvents(currentUrl) : of(null);\n\n    return callback$.pipe(\n      map(() => {\n        const isAuthenticated = this.authStateService.areAuthStorageTokensValid();\n        if (isAuthenticated) {\n          this.startCheckSessionAndValidation();\n\n          if (!isCallback) {\n            this.authStateService.setAuthorizedAndFireEvent();\n            this.userService.publishUserDataIfExists();\n          }\n        }\n\n        this.loggerService.logDebug('checkAuth completed fired events, auth: ' + isAuthenticated);\n\n        return isAuthenticated;\n      }),\n      tap(() => {\n        const savedRouteForRedirect = this.autoLoginService.getStoredRedirectRoute();\n        if (savedRouteForRedirect) {\n          this.autoLoginService.deleteStoredRedirectRoute();\n          this.router.navigate([savedRouteForRedirect]);\n        }\n      }),\n      catchError((error) => {\n        this.loggerService.logError(error);\n        return of(false);\n      })\n    );\n  }\n\n  checkAuthIncludingServer(): Observable<boolean> {\n    return this.checkAuth().pipe(\n      switchMap((isAuthenticated) => {\n        if (isAuthenticated) {\n          return of(isAuthenticated);\n        }\n\n        return this.refreshSessionService.forceRefreshSession().pipe(\n          map((result) => !!result?.idToken && !!result?.accessToken),\n          switchMap((isAuth) => {\n            if (isAuth) {\n              this.startCheckSessionAndValidation();\n            }\n\n            return of(isAuth);\n          })\n        );\n      })\n    );\n  }\n\n  private startCheckSessionAndValidation() {\n    if (this.checkSessionService.isCheckSessionConfigured()) {\n      this.checkSessionService.start();\n    }\n\n    const { tokenRefreshInSeconds } = this.configurationProvider.getOpenIDConfiguration();\n\n    this.periodicallyTokenCheckService.startTokenValidationPeriodically(tokenRefreshInSeconds);\n\n    if (this.silentRenewService.isSilentRenewConfigured()) {\n      this.silentRenewService.getOrCreateIframe();\n    }\n  }\n}\n","import { OpenIdConfiguration } from '../config/openid-configuration';\n\nexport interface Rule {\n  validate(passedConfig: OpenIdConfiguration): RuleValidationResult;\n}\n\nexport interface RuleValidationResult {\n  result: boolean;\n  messages: string[];\n  level: Level;\n}\n\nexport const POSITIVE_VALIDATION_RESULT = {\n  result: true,\n  messages: [],\n  level: null,\n};\n\nexport type Level = 'warning' | 'error';\n","import { ensureClientId } from './ensure-clientId.rule';\nimport { ensureRedirectRule } from './ensure-redirect-url.rule';\nimport { ensureSilentRenewUrlWhenNoRefreshTokenUsed } from './ensure-silentRenewUrl-with-no-refreshtokens.rule';\nimport { ensureStsServer } from './ensure-sts-server.rule';\nimport { useOfflineScopeWithSilentRenew } from './use-offline-scope-with-silent-renew.rule';\n\nexport const allRules = [\n  ensureStsServer,\n  useOfflineScopeWithSilentRenew,\n  ensureRedirectRule,\n  ensureClientId,\n  ensureSilentRenewUrlWhenNoRefreshTokenUsed,\n];\n","import { OpenIdConfiguration } from '../../config/openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureStsServer = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  if (!passedConfig.stsServer) {\n    return {\n      result: false,\n      messages: ['The STS URL MUST be provided in the configuration!'],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../config/openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const useOfflineScopeWithSilentRenew = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  const hasRefreshToken = passedConfig.useRefreshToken;\n  const hasSilentRenew = passedConfig.silentRenew;\n  const scope = passedConfig.scope || '';\n  const hasOfflineScope = scope.split(' ').includes('offline_access');\n\n  if (hasRefreshToken && hasSilentRenew && !hasOfflineScope) {\n    return {\n      result: false,\n      messages: ['When using silent renew and refresh tokens please set the `offline_access` scope'],\n      level: 'warning',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../config/openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureRedirectRule = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  if (!passedConfig.redirectUrl) {\n    return {\n      result: false,\n      messages: ['The redirectURL is required and missing from your config'],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../config/openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureClientId = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  if (!passedConfig.clientId) {\n    return {\n      result: false,\n      messages: ['The clientId is required and missing from your config!'],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { OpenIdConfiguration } from '../../config/openid-configuration';\nimport { POSITIVE_VALIDATION_RESULT, RuleValidationResult } from '../rule';\n\nexport const ensureSilentRenewUrlWhenNoRefreshTokenUsed = (passedConfig: OpenIdConfiguration): RuleValidationResult => {\n  const usesSilentRenew = passedConfig.silentRenew;\n  const usesRefreshToken = passedConfig.useRefreshToken;\n  const hasSilentRenewUrl = passedConfig.silentRenewUrl;\n\n  if (usesSilentRenew && !usesRefreshToken && !hasSilentRenewUrl) {\n    return {\n      result: false,\n      messages: ['Please provide a silent renew URL if using renew and not refresh tokens'],\n      level: 'error',\n    };\n  }\n\n  return POSITIVE_VALIDATION_RESULT;\n};\n","import { Injectable } from '@angular/core';\nimport { OpenIdConfiguration } from '../angular-auth-oidc-client';\nimport { LoggerService } from '../logging/logger.service';\nimport { Level, RuleValidationResult } from './rule';\nimport { allRules } from './rules';\n\n@Injectable()\nexport class ConfigValidationService {\n  constructor(private loggerService: LoggerService) {}\n\n  validateConfig(passedConfig: OpenIdConfiguration): boolean {\n    const allValidationResults = allRules.map((rule) => rule(passedConfig));\n\n    const allMessages = allValidationResults.filter((x) => x.messages.length > 0);\n\n    const allErrorMessages = this.getAllMessagesOfType('error', allMessages);\n    const allWarnings = this.getAllMessagesOfType('warning', allMessages);\n    allErrorMessages.map((message) => this.loggerService.logError(message));\n    allWarnings.map((message) => this.loggerService.logWarning(message));\n\n    return allErrorMessages.length === 0;\n  }\n\n  private getAllMessagesOfType(type: Level, results: RuleValidationResult[]) {\n    const allMessages = results.filter((x) => x.level === type).map((result) => result.messages);\n    return allMessages.reduce((acc, val) => acc.concat(val), []);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { ConfigValidationService } from '../config-validation/config-validation.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { EventTypes } from '../public-events/event-types';\nimport { PublicEventsService } from '../public-events/public-events.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { AuthWellKnownEndpoints } from './auth-well-known-endpoints';\nimport { AuthWellKnownService } from './auth-well-known.service';\nimport { OpenIdConfiguration } from './openid-configuration';\nimport { PublicConfiguration } from './public-configuration';\n\n@Injectable()\nexport class OidcConfigService {\n  constructor(\n    private loggerService: LoggerService,\n    private publicEventsService: PublicEventsService,\n    private configurationProvider: ConfigurationProvider,\n    private authWellKnownService: AuthWellKnownService,\n    private storagePersistanceService: StoragePersistanceService,\n    private configValidationService: ConfigValidationService\n  ) {}\n\n  withConfig(passedConfig: OpenIdConfiguration, passedAuthWellKnownEndpoints?: AuthWellKnownEndpoints): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!this.configValidationService.validateConfig(passedConfig)) {\n        this.loggerService.logError('Validation of config rejected with errors. Config is NOT set.');\n        resolve();\n      }\n\n      if (!passedConfig.authWellknownEndpoint) {\n        passedConfig.authWellknownEndpoint = passedConfig.stsServer;\n      }\n\n      const usedConfig = this.configurationProvider.setConfig(passedConfig);\n\n      const alreadyExistingAuthWellKnownEndpoints = this.storagePersistanceService.read('authWellKnownEndPoints');\n      if (!!alreadyExistingAuthWellKnownEndpoints) {\n        this.publicEventsService.fireEvent<PublicConfiguration>(EventTypes.ConfigLoaded, {\n          configuration: passedConfig,\n          wellknown: alreadyExistingAuthWellKnownEndpoints,\n        });\n\n        resolve();\n      }\n\n      if (!!passedAuthWellKnownEndpoints) {\n        this.authWellKnownService.storeWellKnownEndpoints(passedAuthWellKnownEndpoints);\n        this.publicEventsService.fireEvent<PublicConfiguration>(EventTypes.ConfigLoaded, {\n          configuration: passedConfig,\n          wellknown: passedAuthWellKnownEndpoints,\n        });\n\n        resolve();\n      }\n      if (usedConfig.eagerLoadAuthWellKnownEndpoints) {\n        this.authWellKnownService\n          .getAuthWellKnownEndPoints(usedConfig.authWellknownEndpoint)\n          .pipe(\n            catchError((error) => {\n              this.loggerService.logError('Getting auth well known endpoints failed on start', error);\n              return throwError(error);\n            }),\n            tap((wellknownEndPoints) =>\n              this.publicEventsService.fireEvent<PublicConfiguration>(EventTypes.ConfigLoaded, {\n                configuration: passedConfig,\n                wellknown: wellknownEndPoints,\n              })\n            )\n          )\n          .subscribe(\n            () => resolve(),\n            () => reject()\n          );\n      } else {\n        this.publicEventsService.fireEvent<PublicConfiguration>(EventTypes.ConfigLoaded, {\n          configuration: passedConfig,\n          wellknown: null,\n        });\n        resolve();\n      }\n    });\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class RedirectService {\n  constructor(@Inject(DOCUMENT) private readonly doc: any) {}\n\n  redirectTo(url) {\n    this.doc.location.href = url;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LoggerService } from '../../logging/logger.service';\nimport { FlowHelper } from '../../utils/flowHelper/flow-helper.service';\n\n@Injectable()\nexport class ResponseTypeValidationService {\n  constructor(private loggerService: LoggerService, private flowHelper: FlowHelper) {}\n\n  hasConfigValidResponseType(): boolean {\n    if (this.flowHelper.isCurrentFlowAnyImplicitFlow()) {\n      return true;\n    }\n\n    if (this.flowHelper.isCurrentFlowCodeFlow()) {\n      return true;\n    }\n\n    this.loggerService.logWarning('module configured incorrectly, invalid response_type. Check the responseType in the config');\n    return false;\n  }\n}\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map, retry } from 'rxjs/operators';\nimport { DataService } from '../../api/data.service';\nimport { LoggerService } from '../../logging/logger.service';\nimport { StoragePersistanceService } from '../../storage/storage-persistance.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { ParResponse } from './par-response';\n\n@Injectable()\nexport class ParService {\n  constructor(\n    private loggerService: LoggerService,\n    private urlService: UrlService,\n    private dataService: DataService,\n    private storagePersistanceService: StoragePersistanceService\n  ) {}\n\n  postParRequest(customParams?: { [key: string]: string | number | boolean }): Observable<ParResponse> {\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n    const authWellKnown = this.storagePersistanceService.read('authWellKnownEndPoints');\n\n    if (!authWellKnown) {\n      return throwError('Could not read PAR endpoint because authWellKnownEndPoints are not given');\n    }\n\n    const parEndpoint = authWellKnown.parEndpoint;\n    if (!parEndpoint) {\n      return throwError('Could not read PAR endpoint from authWellKnownEndpoints');\n    }\n\n    const data = this.urlService.createBodyForParCodeFlowRequest(customParams);\n\n    return this.dataService.post(parEndpoint, data, headers).pipe(\n      retry(2),\n      map((response: any) => {\n        this.loggerService.logDebug('par response: ', response);\n\n        return {\n          expiresIn: response.expires_in,\n          requestUri: response.request_uri,\n        };\n      }),\n      catchError((error) => {\n        const errorMessage = `There was an error on ParService postParRequest`;\n        this.loggerService.logError(errorMessage, error);\n        return throwError(errorMessage);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AuthStateService } from '../../authState/auth-state.service';\nimport { CheckAuthService } from '../../check-auth.service';\nimport { AuthWellKnownService } from '../../config/auth-well-known.service';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { UserService } from '../../userData/user-service';\nimport { RedirectService } from '../../utils/redirect/redirect.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { AuthOptions } from '../auth-options';\nimport { LoginResponse } from '../login-response';\nimport { PopupOptions } from '../popup/popup-options';\nimport { PopUpService } from '../popup/popup.service';\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\nimport { ParResponse } from './par-response';\nimport { ParService } from './par.service';\n\n@Injectable()\nexport class ParLoginService {\n  constructor(\n    private loggerService: LoggerService,\n    private responseTypeValidationService: ResponseTypeValidationService,\n    private urlService: UrlService,\n    private redirectService: RedirectService,\n    private configurationProvider: ConfigurationProvider,\n    private authWellKnownService: AuthWellKnownService,\n    private popupService: PopUpService,\n    private checkAuthService: CheckAuthService,\n    private userService: UserService,\n    private authStateService: AuthStateService,\n    private parService: ParService\n  ) {}\n\n  loginPar(authOptions?: AuthOptions): void {\n    if (!this.responseTypeValidationService.hasConfigValidResponseType()) {\n      this.loggerService.logError('Invalid response type!');\n      return;\n    }\n\n    const { authWellknownEndpoint } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!authWellknownEndpoint) {\n      this.loggerService.logError('no authWellknownEndpoint given!');\n      return;\n    }\n\n    this.loggerService.logDebug('BEGIN Authorize OIDC Flow, no auth data');\n\n    const { urlHandler, customParams } = authOptions || {};\n\n    this.authWellKnownService\n      .getAuthWellKnownEndPoints(authWellknownEndpoint)\n      .pipe(switchMap(() => this.parService.postParRequest(customParams)))\n      .subscribe((response) => {\n        this.loggerService.logDebug('par response: ', response);\n\n        const url = this.urlService.getAuthorizeParUrl(response.requestUri);\n\n        this.loggerService.logDebug('par request url: ', url);\n\n        if (!url) {\n          this.loggerService.logError(`Could not create url with param ${response.requestUri}: '${url}'`);\n          return;\n        }\n\n        if (urlHandler) {\n          urlHandler(url);\n        } else {\n          this.redirectService.redirectTo(url);\n        }\n      });\n  }\n\n  loginWithPopUpPar(authOptions?: AuthOptions, popupOptions?: PopupOptions): Observable<LoginResponse> {\n    if (!this.responseTypeValidationService.hasConfigValidResponseType()) {\n      const errorMessage = 'Invalid response type!';\n      this.loggerService.logError(errorMessage);\n      return throwError(errorMessage);\n    }\n\n    const { authWellknownEndpoint } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!authWellknownEndpoint) {\n      const errorMessage = 'no authWellknownEndpoint given!';\n      this.loggerService.logError(errorMessage);\n      return throwError(errorMessage);\n    }\n\n    this.loggerService.logDebug('BEGIN Authorize OIDC Flow with popup, no auth data');\n\n    const { customParams } = authOptions || {};\n\n    return this.authWellKnownService.getAuthWellKnownEndPoints(authWellknownEndpoint).pipe(\n      switchMap(() => this.parService.postParRequest(customParams)),\n      switchMap((response: ParResponse) => {\n        this.loggerService.logDebug('par response: ', response);\n\n        const url = this.urlService.getAuthorizeParUrl(response.requestUri);\n\n        this.loggerService.logDebug('par request url: ', url);\n\n        if (!url) {\n          const errorMessage = `Could not create url with param ${response.requestUri}: 'url'`;\n          this.loggerService.logError(errorMessage);\n          return throwError(errorMessage);\n        }\n\n        this.popupService.openPopUp(url, popupOptions);\n\n        return this.popupService.receivedUrl$.pipe(\n          take(1),\n          switchMap((receivedUrl: string) => this.checkAuthService.checkAuth(receivedUrl)),\n          map((isAuthenticated) => ({\n            isAuthenticated,\n            userData: this.userService.getUserDataFromStore(),\n            accessToken: this.authStateService.getAccessToken(),\n          }))\n        );\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AuthStateService } from '../../authState/auth-state.service';\nimport { CheckAuthService } from '../../check-auth.service';\nimport { AuthWellKnownService } from '../../config/auth-well-known.service';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { UserService } from '../../userData/user-service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { AuthOptions } from '../auth-options';\nimport { LoginResponse } from '../login-response';\nimport { PopupOptions } from '../popup/popup-options';\nimport { PopUpService } from '../popup/popup.service';\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\n\n@Injectable()\nexport class PopUpLoginService {\n  constructor(\n    private loggerService: LoggerService,\n    private responseTypeValidationService: ResponseTypeValidationService,\n    private urlService: UrlService,\n    private configurationProvider: ConfigurationProvider,\n    private authWellKnownService: AuthWellKnownService,\n    private popupService: PopUpService,\n    private checkAuthService: CheckAuthService,\n    private userService: UserService,\n    private authStateService: AuthStateService\n  ) {}\n\n  loginWithPopUpStandard(authOptions?: AuthOptions, popupOptions?: PopupOptions): Observable<LoginResponse> {\n    if (!this.responseTypeValidationService.hasConfigValidResponseType()) {\n      const errorMessage = 'Invalid response type!';\n      this.loggerService.logError(errorMessage);\n      return throwError(errorMessage);\n    }\n\n    const { authWellknownEndpoint } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!authWellknownEndpoint) {\n      const errorMessage = 'no authWellknownEndpoint given!';\n      this.loggerService.logError(errorMessage);\n      return throwError(errorMessage);\n    }\n\n    this.loggerService.logDebug('BEGIN Authorize OIDC Flow with popup, no auth data');\n\n    return this.authWellKnownService.getAuthWellKnownEndPoints(authWellknownEndpoint).pipe(\n      switchMap(() => {\n        const { customParams } = authOptions || {};\n\n        const authUrl = this.urlService.getAuthorizeUrl(customParams);\n\n        this.popupService.openPopUp(authUrl, popupOptions);\n\n        return this.popupService.receivedUrl$.pipe(\n          take(1),\n          switchMap((url: string) => this.checkAuthService.checkAuth(url)),\n          map((isAuthenticated) => ({\n            isAuthenticated,\n            userData: this.userService.getUserDataFromStore(),\n            accessToken: this.authStateService.getAccessToken(),\n          }))\n        );\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AuthWellKnownService } from '../../config/auth-well-known.service';\nimport { ConfigurationProvider } from '../../config/config.provider';\nimport { LoggerService } from '../../logging/logger.service';\nimport { RedirectService } from '../../utils/redirect/redirect.service';\nimport { UrlService } from '../../utils/url/url.service';\nimport { AuthOptions } from '../auth-options';\nimport { ResponseTypeValidationService } from '../response-type-validation/response-type-validation.service';\n\n@Injectable()\nexport class StandardLoginService {\n  constructor(\n    private loggerService: LoggerService,\n    private responseTypeValidationService: ResponseTypeValidationService,\n    private urlService: UrlService,\n    private redirectService: RedirectService,\n    private configurationProvider: ConfigurationProvider,\n    private authWellKnownService: AuthWellKnownService\n  ) {}\n\n  loginStandard(authOptions?: AuthOptions): void {\n    if (!this.responseTypeValidationService.hasConfigValidResponseType()) {\n      this.loggerService.logError('Invalid response type!');\n      return;\n    }\n\n    const { authWellknownEndpoint } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!authWellknownEndpoint) {\n      this.loggerService.logError('no authWellknownEndpoint given!');\n      return;\n    }\n\n    this.loggerService.logDebug('BEGIN Authorize OIDC Flow, no auth data');\n\n    this.authWellKnownService.getAuthWellKnownEndPoints(authWellknownEndpoint).subscribe(() => {\n      const { urlHandler, customParams } = authOptions || {};\n\n      const url = this.urlService.getAuthorizeUrl(customParams);\n\n      if (!url) {\n        this.loggerService.logError('Could not create url', url);\n        return;\n      }\n\n      if (urlHandler) {\n        urlHandler(url);\n      } else {\n        this.redirectService.redirectTo(url);\n      }\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { AuthOptions } from './auth-options';\nimport { LoginResponse } from './login-response';\nimport { ParLoginService } from './par/par-login.service';\nimport { PopUpLoginService } from './popup/popup-login.service';\nimport { PopupOptions } from './popup/popup-options';\nimport { StandardLoginService } from './standard/standard-login.service';\n\n@Injectable()\nexport class LoginService {\n  constructor(\n    private configurationProvider: ConfigurationProvider,\n    private parLoginService: ParLoginService,\n    private popUpLoginService: PopUpLoginService,\n    private standardLoginService: StandardLoginService\n  ) {}\n\n  login(authOptions?: AuthOptions): void {\n    const { usePushedAuthorisationRequests } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (usePushedAuthorisationRequests) {\n      return this.parLoginService.loginPar(authOptions);\n    } else {\n      return this.standardLoginService.loginStandard(authOptions);\n    }\n  }\n\n  loginWithPopUp(authOptions?: AuthOptions, popupOptions?: PopupOptions): Observable<LoginResponse> {\n    const { usePushedAuthorisationRequests } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (usePushedAuthorisationRequests) {\n      return this.parLoginService.loginWithPopUpPar(authOptions, popupOptions);\n    } else {\n      return this.popUpLoginService.loginWithPopUpStandard(authOptions, popupOptions);\n    }\n  }\n}\n","import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError, retry, switchMap, tap } from 'rxjs/operators';\nimport { DataService } from '../api/data.service';\nimport { ResetAuthDataService } from '../flows/reset-auth-data.service';\nimport { CheckSessionService } from '../iframe/check-session.service';\nimport { LoggerService } from '../logging/logger.service';\nimport { StoragePersistanceService } from '../storage/storage-persistance.service';\nimport { RedirectService } from '../utils/redirect/redirect.service';\nimport { UrlService } from '../utils/url/url.service';\n\n@Injectable()\nexport class LogoffRevocationService {\n  constructor(\n    private dataService: DataService,\n    private storagePersistanceService: StoragePersistanceService,\n    private loggerService: LoggerService,\n    private urlService: UrlService,\n    private checkSessionService: CheckSessionService,\n    private resetAuthDataService: ResetAuthDataService,\n    private redirectService: RedirectService\n  ) {}\n\n  // Logs out on the server and the local client.\n  // If the server state has changed, checksession, then only a local logout.\n  logoff(urlHandler?: (url: string) => any) {\n    this.loggerService.logDebug('logoff, remove auth ');\n    const endSessionUrl = this.getEndSessionUrl();\n    this.resetAuthDataService.resetAuthorizationData();\n\n    if (!endSessionUrl) {\n      this.loggerService.logDebug('only local login cleaned up, no end_session_endpoint');\n      return;\n    }\n\n    if (this.checkSessionService.serverStateChanged()) {\n      this.loggerService.logDebug('only local login cleaned up, server session has changed');\n    } else if (urlHandler) {\n      urlHandler(endSessionUrl);\n    } else {\n      this.redirectService.redirectTo(endSessionUrl);\n    }\n  }\n\n  logoffLocal() {\n    this.resetAuthDataService.resetAuthorizationData();\n    this.checkSessionService.stop();\n  }\n\n  // The refresh token and and the access token are revoked on the server. If the refresh token does not exist\n  // only the access token is revoked. Then the logout run.\n  logoffAndRevokeTokens(urlHandler?: (url: string) => any) {\n    if (!this.storagePersistanceService.read('authWellKnownEndPoints')?.revocationEndpoint) {\n      this.loggerService.logDebug('revocation endpoint not supported');\n      this.logoff(urlHandler);\n    }\n\n    if (this.storagePersistanceService.getRefreshToken()) {\n      return this.revokeRefreshToken().pipe(\n        switchMap((result) => this.revokeAccessToken(result)),\n        catchError((error) => {\n          const errorMessage = `revoke token failed`;\n          this.loggerService.logError(errorMessage, error);\n          return throwError(errorMessage);\n        }),\n        tap(() => this.logoff(urlHandler))\n      );\n    } else {\n      return this.revokeAccessToken().pipe(\n        catchError((error) => {\n          const errorMessage = `revoke access token failed`;\n          this.loggerService.logError(errorMessage, error);\n          return throwError(errorMessage);\n        }),\n        tap(() => this.logoff(urlHandler))\n      );\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc7009\n  // revokes an access token on the STS. If no token is provided, then the token from\n  // the storage is revoked. You can pass any token to revoke. This makes it possible to\n  // manage your own tokens. The is a public API.\n  revokeAccessToken(accessToken?: any) {\n    const accessTok = accessToken || this.storagePersistanceService.getAccessToken();\n    const body = this.urlService.createRevocationEndpointBodyAccessToken(accessTok);\n    const url = this.urlService.getRevocationEndpointUrl();\n\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.dataService.post(url, body, headers).pipe(\n      retry(2),\n      switchMap((response: any) => {\n        this.loggerService.logDebug('revocation endpoint post response: ', response);\n        return of(response);\n      }),\n      catchError((error) => {\n        const errorMessage = `Revocation request failed`;\n        this.loggerService.logError(errorMessage, error);\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  // https://tools.ietf.org/html/rfc7009\n  // revokes an refresh token on the STS. This is only required in the code flow with refresh tokens.\n  // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n  // This makes it possible to manage your own tokens.\n  revokeRefreshToken(refreshToken?: any) {\n    const refreshTok = refreshToken || this.storagePersistanceService.getRefreshToken();\n    const body = this.urlService.createRevocationEndpointBodyRefreshToken(refreshTok);\n    const url = this.urlService.getRevocationEndpointUrl();\n\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.dataService.post(url, body, headers).pipe(\n      retry(2),\n      switchMap((response: any) => {\n        this.loggerService.logDebug('revocation endpoint post response: ', response);\n        return of(response);\n      }),\n      catchError((error) => {\n        const errorMessage = `Revocation request failed`;\n        this.loggerService.logError(errorMessage, error);\n        return throwError(errorMessage);\n      })\n    );\n  }\n\n  getEndSessionUrl(): string | null {\n    const idToken = this.storagePersistanceService.getIdToken();\n    return this.urlService.createEndSessionUrl(idToken);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthStateService } from './authState/auth-state.service';\nimport { CallbackService } from './callback/callback.service';\nimport { RefreshSessionService } from './callback/refresh-session.service';\nimport { CheckAuthService } from './check-auth.service';\nimport { ConfigurationProvider } from './config/config.provider';\nimport { PublicConfiguration } from './config/public-configuration';\nimport { FlowsDataService } from './flows/flows-data.service';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { AuthOptions } from './login/auth-options';\nimport { LoginService } from './login/login.service';\nimport { LogoffRevocationService } from './logoffRevoke/logoff-revocation.service';\nimport { StoragePersistanceService } from './storage/storage-persistance.service';\nimport { UserService } from './userData/user-service';\nimport { TokenHelperService } from './utils/tokenHelper/oidc-token-helper.service';\n\n@Injectable()\nexport class OidcSecurityService {\n  get configuration(): PublicConfiguration {\n    const openIDConfiguration = this.configurationProvider.getOpenIDConfiguration();\n\n    return {\n      configuration: openIDConfiguration,\n      wellknown: this.storagePersistanceService.read('authWellKnownEndPoints'),\n    };\n  }\n\n  get userData$() {\n    return this.userService.userData$;\n  }\n\n  get isAuthenticated$() {\n    return this.authStateService.authorized$;\n  }\n\n  get checkSessionChanged$() {\n    return this.checkSessionService.checkSessionChanged$;\n  }\n\n  get stsCallback$() {\n    return this.callbackService.stsCallback$;\n  }\n\n  constructor(\n    private checkSessionService: CheckSessionService,\n    private checkAuthService: CheckAuthService,\n    private userService: UserService,\n    private tokenHelperService: TokenHelperService,\n    private configurationProvider: ConfigurationProvider,\n    private authStateService: AuthStateService,\n    private flowsDataService: FlowsDataService,\n    private callbackService: CallbackService,\n    private logoffRevocationService: LogoffRevocationService,\n    private loginService: LoginService,\n    private storagePersistanceService: StoragePersistanceService,\n    private refreshSessionService: RefreshSessionService\n  ) {}\n\n  checkAuth(url?: string): Observable<boolean> {\n    return this.checkAuthService.checkAuth(url);\n  }\n\n  checkAuthIncludingServer(): Observable<boolean> {\n    return this.checkAuthService.checkAuthIncludingServer();\n  }\n\n  getToken(): string {\n    return this.authStateService.getAccessToken();\n  }\n\n  getIdToken(): string {\n    return this.authStateService.getIdToken();\n  }\n\n  getRefreshToken(): string {\n    return this.authStateService.getRefreshToken();\n  }\n\n  getPayloadFromIdToken(encode = false): any {\n    const token = this.getIdToken();\n    return this.tokenHelperService.getPayloadFromToken(token, encode);\n  }\n\n  setState(state: string): void {\n    this.flowsDataService.setAuthStateControl(state);\n  }\n\n  getState(): string {\n    return this.flowsDataService.getAuthStateControl();\n  }\n\n  // Code Flow with PCKE or Implicit Flow\n  authorize(authOptions?: AuthOptions) {\n    if (authOptions?.customParams) {\n      this.storagePersistanceService.write('storageCustomRequestParams', authOptions.customParams);\n    }\n\n    this.loginService.login(authOptions);\n  }\n\n  authorizeWithPopUp(authOptions?: AuthOptions) {\n    if (authOptions?.customParams) {\n      this.storagePersistanceService.write('storageCustomRequestParams', authOptions.customParams);\n    }\n\n    return this.loginService.loginWithPopUp(authOptions);\n  }\n\n  forceRefreshSession(customParams?: { [key: string]: string | number | boolean }) {\n    if (customParams) {\n      this.storagePersistanceService.write('storageCustomRequestParams', customParams);\n    }\n\n    return this.refreshSessionService.forceRefreshSession(customParams);\n  }\n\n  // The refresh token and and the access token are revoked on the server. If the refresh token does not exist\n  // only the access token is revoked. Then the logout run.\n  logoffAndRevokeTokens(urlHandler?: (url: string) => any) {\n    return this.logoffRevocationService.logoffAndRevokeTokens(urlHandler);\n  }\n\n  // Logs out on the server and the local client.\n  // If the server state has changed, checksession, then only a local logout.\n  logoff(urlHandler?: (url: string) => any) {\n    return this.logoffRevocationService.logoff(urlHandler);\n  }\n\n  logoffLocal() {\n    return this.logoffRevocationService.logoffLocal();\n  }\n\n  // https://tools.ietf.org/html/rfc7009\n  // revokes an access token on the STS. This is only required in the code flow with refresh tokens.\n  // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n  // This makes it possible to manage your own tokens.\n  revokeAccessToken(accessToken?: any) {\n    return this.logoffRevocationService.revokeAccessToken(accessToken);\n  }\n\n  // https://tools.ietf.org/html/rfc7009\n  // revokes a refresh token on the STS. This is only required in the code flow with refresh tokens.\n  // If no token is provided, then the token from the storage is revoked. You can pass any token to revoke.\n  // This makes it possible to manage your own tokens.\n  revokeRefreshToken(refreshToken?: any) {\n    return this.logoffRevocationService.revokeRefreshToken(refreshToken);\n  }\n\n  getEndSessionUrl(): string | null {\n    return this.logoffRevocationService.getEndSessionUrl();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from '../logging/logger.service';\nimport { AbstractSecurityStorage } from './abstract-security-storage';\n\n@Injectable()\nexport class BrowserStorageService implements AbstractSecurityStorage {\n  constructor(private configProvider: ConfigurationProvider, private loggerService: LoggerService) {}\n\n  read(key: string): any {\n    if (!this.hasStorage()) {\n      this.loggerService.logDebug(`Wanted to read '${key}' but Storage was undefined`);\n      return false;\n    }\n\n    const item = this.getStorage()?.getItem(key);\n\n    if (!item) {\n      this.loggerService.logDebug(`Wanted to read '${key}' but nothing was found`);\n      return null;\n    }\n\n    return JSON.parse(item);\n  }\n\n  write(key: string, value: any): boolean {\n    if (!this.hasStorage()) {\n      this.loggerService.logDebug(`Wanted to write '${key}/${value}' but Storage was falsy`);\n      return false;\n    }\n\n    const storage = this.getStorage();\n    if (!storage) {\n      this.loggerService.logDebug(`Wanted to write '${key}/${value}' but Storage was falsy`);\n      return false;\n    }\n\n    value = value || null;\n\n    storage.setItem(`${key}`, JSON.stringify(value));\n    return true;\n  }\n\n  remove(key: string): boolean {\n    if (!this.hasStorage()) {\n      this.loggerService.logDebug(`Wanted to remove '${key}' but Storage was falsy`);\n      return false;\n    }\n\n    const storage = this.getStorage();\n    if (!storage) {\n      this.loggerService.logDebug(`Wanted to write '${key}' but Storage was falsy`);\n      return false;\n    }\n\n    storage.removeItem(`${key}`);\n    return true;\n  }\n\n  private getStorage() {\n    const config = this.configProvider.getOpenIDConfiguration();\n    if (!config) {\n      return null;\n    }\n\n    return config.storage;\n  }\n\n  private hasStorage() {\n    return typeof Storage !== 'undefined';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { DataService } from './api/data.service';\nimport { HttpBaseService } from './api/http-base.service';\nimport { AuthStateService } from './authState/auth-state.service';\nimport { AutoLoginService } from './auto-login/auto-login-service';\nimport { ImplicitFlowCallbackService } from './callback/implicit-flow-callback.service';\nimport { CheckAuthService } from './check-auth.service';\nimport { ConfigValidationService } from './config-validation/config-validation.service';\nimport { AuthWellKnownDataService } from './config/auth-well-known-data.service';\nimport { AuthWellKnownService } from './config/auth-well-known.service';\nimport { ConfigurationProvider } from './config/config.provider';\nimport { OidcConfigService } from './config/config.service';\nimport { CodeFlowCallbackHandlerService } from './flows/callback-handling/code-flow-callback-handler.service';\nimport { HistoryJwtKeysCallbackHandlerService } from './flows/callback-handling/history-jwt-keys-callback-handler.service';\nimport { ImplicitFlowCallbackHandlerService } from './flows/callback-handling/implicit-flow-callback-handler.service';\nimport { RefreshSessionCallbackHandlerService } from './flows/callback-handling/refresh-session-callback-handler.service';\nimport { RefreshTokenCallbackHandlerService } from './flows/callback-handling/refresh-token-callback-handler.service';\nimport { StateValidationCallbackHandlerService } from './flows/callback-handling/state-validation-callback-handler.service';\nimport { UserCallbackHandlerService } from './flows/callback-handling/user-callback-handler.service';\nimport { FlowsDataService } from './flows/flows-data.service';\nimport { FlowsService } from './flows/flows.service';\nimport { RandomService } from './flows/random/random.service';\nimport { ResetAuthDataService } from './flows/reset-auth-data.service';\nimport { SigninKeyDataService } from './flows/signin-key-data.service';\nimport { CheckSessionService } from './iframe/check-session.service';\nimport { IFrameService } from './iframe/existing-iframe.service';\nimport { SilentRenewService } from './iframe/silent-renew.service';\nimport { LoggerService } from './logging/logger.service';\nimport { LoginService } from './login/login.service';\nimport { ParLoginService } from './login/par/par-login.service';\nimport { ParService } from './login/par/par.service';\nimport { PopUpLoginService } from './login/popup/popup-login.service';\nimport { ResponseTypeValidationService } from './login/response-type-validation/response-type-validation.service';\nimport { StandardLoginService } from './login/standard/standard-login.service';\nimport { LogoffRevocationService } from './logoffRevoke/logoff-revocation.service';\nimport { OidcSecurityService } from './oidc.security.service';\nimport { PublicEventsService } from './public-events/public-events.service';\nimport { AbstractSecurityStorage } from './storage/abstract-security-storage';\nimport { BrowserStorageService } from './storage/browser-storage.service';\nimport { StoragePersistanceService } from './storage/storage-persistance.service';\nimport { UserService } from './userData/user-service';\nimport { EqualityService } from './utils/equality/equality.service';\nimport { FlowHelper } from './utils/flowHelper/flow-helper.service';\nimport { PlatformProvider } from './utils/platform-provider/platform.provider';\nimport { TokenHelperService } from './utils/tokenHelper/oidc-token-helper.service';\nimport { UrlService } from './utils/url/url.service';\nimport { StateValidationService } from './validation/state-validation.service';\nimport { TokenValidationService } from './validation/token-validation.service';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [],\n  exports: [],\n})\nexport class AuthModule {\n  static forRoot(token: Token = {}) {\n    return {\n      ngModule: AuthModule,\n      providers: [\n        OidcConfigService,\n        PublicEventsService,\n        FlowHelper,\n        OidcSecurityService,\n        TokenValidationService,\n        PlatformProvider,\n        CheckSessionService,\n        FlowsDataService,\n        FlowsService,\n        SilentRenewService,\n        ConfigurationProvider,\n        LogoffRevocationService,\n        UserService,\n        RandomService,\n        HttpBaseService,\n        UrlService,\n        AuthStateService,\n        SigninKeyDataService,\n        StoragePersistanceService,\n        TokenHelperService,\n        LoggerService,\n        IFrameService,\n        EqualityService,\n        LoginService,\n        ParService,\n        AuthWellKnownDataService,\n        AuthWellKnownService,\n        DataService,\n        StateValidationService,\n        ConfigValidationService,\n        CheckAuthService,\n        ResetAuthDataService,\n        ImplicitFlowCallbackService,\n        HistoryJwtKeysCallbackHandlerService,\n        ResponseTypeValidationService,\n        UserCallbackHandlerService,\n        StateValidationCallbackHandlerService,\n        RefreshSessionCallbackHandlerService,\n        RefreshTokenCallbackHandlerService,\n        CodeFlowCallbackHandlerService,\n        ImplicitFlowCallbackHandlerService,\n        ParLoginService,\n        PopUpLoginService,\n        StandardLoginService,\n        AutoLoginService,\n        {\n          provide: AbstractSecurityStorage,\n          useClass: token.storage || BrowserStorageService,\n        },\n      ],\n    };\n  }\n}\n\nexport type Type<T> = new (...args: any[]) => T;\n\nexport interface Token {\n  storage?: Type<any>;\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, CanLoad, Route, Router, RouterStateSnapshot, UrlSegment } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { concatMap, map } from 'rxjs/operators';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { AutoLoginService } from '../auto-login/auto-login-service';\nimport { CheckAuthService } from '../check-auth.service';\nimport { LoginService } from '../login/login.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AutoLoginGuard implements CanActivate, CanLoad {\n  constructor(\n    private autoLoginService: AutoLoginService,\n    private authStateService: AuthStateService,\n    private checkAuthService: CheckAuthService,\n    private loginService: LoginService,\n    private router: Router\n  ) {}\n\n  canLoad(route: Route, segments: UrlSegment[]): Observable<boolean> {\n    return this.checkAuth(route.path);\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.checkAuth(state.url);\n  }\n\n  private checkAuth(url: string) {\n    return this.authStateService.authorized$.pipe(\n      concatMap((isAuthenticatedAlready) => (isAuthenticatedAlready ? of(isAuthenticatedAlready) : this.checkAuthService.checkAuth())),\n\n      map((isAuthorized) => {\n        const storedRoute = this.autoLoginService.getStoredRedirectRoute();\n\n        if (isAuthorized) {\n          if (storedRoute) {\n            this.autoLoginService.deleteStoredRedirectRoute();\n            this.router.navigate([storedRoute]);\n          }\n          return true;\n        }\n\n        this.autoLoginService.saveStoredRedirectRoute(url);\n        this.loginService.login();\n        return false;\n      })\n    );\n  }\n}\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthStateService } from '../authState/auth-state.service';\nimport { ConfigurationProvider } from '../config/config.provider';\nimport { LoggerService } from './../logging/logger.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(\n    private authStateService: AuthStateService,\n    private configurationProvider: ConfigurationProvider,\n    private loggerService: LoggerService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Ensure we send the token only to routes which are secured\n    const { secureRoutes } = this.configurationProvider.getOpenIDConfiguration();\n\n    if (!secureRoutes) {\n      this.loggerService.logDebug(`No routes to check configured`);\n      return next.handle(req);\n    }\n\n    const matchingRoute = secureRoutes.find((x) => req.url.startsWith(x));\n\n    if (!matchingRoute) {\n      this.loggerService.logDebug(`Did not find matching route for ${req.url}`);\n      return next.handle(req);\n    }\n\n    this.loggerService.logDebug(`'${req.url}' matches configured route '${matchingRoute}'`);\n\n    const token = this.authStateService.getAccessToken();\n\n    if (!token) {\n      this.loggerService.logDebug(`Wanted to add token to ${req.url} but found no token: '${token}'`);\n      return next.handle(req);\n    }\n\n    this.loggerService.logDebug(`'${req.url}' matches configured route '${matchingRoute}', adding token`);\n    req = req.clone({\n      headers: req.headers.set('Authorization', 'Bearer ' + token),\n    });\n\n    return next.handle(req);\n  }\n}\n"]}