/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../core/has.js";import"../../core/Logger.js";import"../../core/accessorSupport/ensureType.js";import{property as r}from"../../core/accessorSupport/decorators/property.js";import{reader as s}from"../../core/accessorSupport/decorators/reader.js";import{subclass as t}from"../../core/accessorSupport/decorators/subclass.js";import{urlToObject as o}from"../../core/urlUtils.js";import"../../core/uuid.js";import"../../portal/support/resourceExtension.js";import{throwIfAborted as i}from"../../core/promiseUtils.js";import p from"../../geometry/SpatialReference.js";import a from"../../geometry/Extent.js";import l from"../../request.js";import{Version as n}from"../../core/Version.js";import{id as u,popupEnabled as c}from"../support/commonProperties.js";const y=y=>{let m=class extends y{constructor(){super(...arguments),this.capabilities=void 0,this.copyright=null,this.fullExtent=null,this.legendEnabled=!0,this.spatialReference=null,this.version=null}readCapabilities(e,r){const s=r.capabilities&&r.capabilities.split(",").map((e=>e.toLowerCase().trim()));if(!s)return{operations:{supportsQuery:!1,supportsExportMap:!1,supportsExportTiles:!1,supportsTileMap:!1},exportMap:null,exportTiles:null};const t=this.type,o=-1!==s.indexOf("query"),i=-1!==s.indexOf("map"),p=!!r.exportTilesAllowed,a=-1!==s.indexOf("tilemap"),l="tile"!==t&&!!r.supportsDynamicLayers,u="tile"!==t&&(!r.tileInfo||l),c="tile"!==t&&(!r.tileInfo||l),y="tile"!==t,m=!!r.cimVersion&&n.parse(r.cimVersion).since(1,4);return{operations:{supportsQuery:o,supportsExportMap:i,supportsExportTiles:p,supportsTileMap:a},exportMap:i?{supportsArcadeExpressionForLabeling:m,supportsSublayersChanges:y,supportsDynamicLayers:l,supportsSublayerVisibility:u,supportsSublayerDefinitionExpression:c}:null,exportTiles:p?{maxExportTilesCount:+r.maxExportTilesCount}:null}}readVersion(e,r){let s=r.currentVersion;return s||(s=r.hasOwnProperty("capabilities")||r.hasOwnProperty("tables")?10:r.hasOwnProperty("supportedImageFormatTypes")?9.31:9.3),s}async fetchSublayerInfo(e,r){return await this.fetchAllLayersAndTables(r),this._allLayersAndTablesMap.get(e)}async fetchAllLayersAndTables(e){await this.load(e),this._allLayersAndTablesPromise||(this._allLayersAndTablesPromise=l(o(this.url).path+"/layers",{responseType:"json",query:{f:"json",...this.customParameters}}).then((e=>{this._allLayersAndTablesMap=new Map;for(const r of e.data.layers)this._allLayersAndTablesMap.set(r.id,r);return{result:e.data}}),(e=>({error:e}))));const r=await this._allLayersAndTablesPromise;if(i(e),"result"in r)return r.result;throw r.error}};return e([r({readOnly:!0})],m.prototype,"capabilities",void 0),e([s("service","capabilities",["capabilities","exportTilesAllowed","maxExportTilesCount","supportsDynamicLayers","tileInfo"])],m.prototype,"readCapabilities",null),e([r({json:{read:{source:"copyrightText"}}})],m.prototype,"copyright",void 0),e([r({type:a})],m.prototype,"fullExtent",void 0),e([r(u)],m.prototype,"id",void 0),e([r({type:Boolean,json:{origins:{service:{read:{enabled:!1}}},read:{source:"showLegend"},write:{target:"showLegend"}}})],m.prototype,"legendEnabled",void 0),e([r(c)],m.prototype,"popupEnabled",void 0),e([r({type:p})],m.prototype,"spatialReference",void 0),e([r()],m.prototype,"version",void 0),e([s("version",["currentVersion","capabilities","tables","supportedImageFormatTypes"])],m.prototype,"readVersion",null),m=e([t("esri.layers.mixins.ArcGISMapService")],m),m};export{y as ArcGISMapService};
