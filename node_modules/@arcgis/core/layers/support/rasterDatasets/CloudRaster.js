/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import{isSome as t}from"../../../core/maybe.js";import"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{property as r}from"../../../core/accessorSupport/decorators/property.js";import{subclass as o}from"../../../core/accessorSupport/decorators/subclass.js";import i from"../../../core/Error.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import s from"../../../geometry/SpatialReference.js";import a from"../../../geometry/Point.js";import n from"../../../geometry/Extent.js";import"../../../geometry.js";import l from"../../../tasks/support/FeatureSet.js";import f from"../TileInfo.js";import m from"../RasterInfo.js";import p from"../RasterStorageInfo.js";import c from"./BaseRaster.js";import u from"./DBFParser.js";import{isTransformSupported as d,readTransform as h}from"../rasterTransforms/utils.js";const g=new Map;g.set("int16","esriFieldTypeSmallInteger"),g.set("int32","esriFieldTypeInteger"),g.set("int64","esriFieldTypeInteger"),g.set("float32","esriFieldTypeSingle"),g.set("float64","esriFieldTypeDouble"),g.set("text","esriFieldTypeString");const y=8;let x=class extends c{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:t}=await this.request(this.url+"/conf.json",{signal:null==e?void 0:e.signal});if(!this._validateHeader(t))throw new i("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:r,rasterInfo:o}=this._parseHeader(t);if("thematic"===o.dataType){const e=await this._fetchAuxiliaryInformation();o.attributeTable=e}this._set("storageInfo",r),this._set("rasterInfo",o),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,t,r,o={}){const i=this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(i<0)return null;const s=this._buildCacheFilePath(i,t,r,o.multidimensionalDefinition),a=this._getIndexRecordFromBundle(t,r),n=await this.request(s,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:o.signal});if(!n)return null;const l=new Uint8Array(n.data),f=this._getTileEndAndContentType(l,a);if(0===f.recordSize)return null;const m=await this.request(s,{range:{from:f.position,to:f.position+f.recordSize},responseType:"array-buffer",signal:o.signal});return m?this.decodePixelBlock(m.data,{width:this.rasterInfo.storageInfo.tileInfo.size[0],height:this.rasterInfo.storageInfo.tileInfo.size[1],planes:null,pixelType:null}):null}_validateHeader(e){const t=["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"];return e&&"RasterInfo"===e.type&&!t.some((t=>!e[t]))}_parseHeader(e){var t,r;const o=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:i,histograms:l,colormap:c,blockWidth:u,blockHeight:d,firstPyramidLevel:h,maximumPyramidLevel:g}=e,x=e.statistics&&e.statistics.map((e=>({min:e.min,max:e.max,avg:e.mean,stddev:e.standardDeviation,median:e.median,mode:e.mode}))),I=e.extent.spatialReference,S=null==(t=e.geodataXform)?void 0:t.spatialReference,v=new s(null!=I&&I.wkid||null!=I&&I.wkt?I:S);let w=new n({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:v});const b=new a({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:v}),T=Math.round((w.xmax-w.xmin)/b.x),j=Math.round((w.ymax-w.ymin)/b.y),k=this._parseTransform(e.geodataXform),z=k?w:null;k&&(w=k.forwardTransform(w),b.x=(w.xmax-w.xmin)/T,b.y=(w.ymax-w.ymin)/j);const _=null!=(r=e.properties)?r:{},C=e.format.toLowerCase().replace("cache/",""),R=new a(e.origin.x,e.origin.y,v);let F,P,H,L;if(c&&c.colors)for(F=[],P=0;P<c.colors.length;P++)H=c.colors[P],L=c.values?c.values[P]:P,F.push([L,255&H,H<<16>>>24,H<<8>>>24,H>>>24]);const D=e.LODInfos,M=[];for(P=0;P<D.levels.length;P++)M.push({level:D.levels[P],resolution:D.resolutions[P],scale:96/.0254*D.resolutions[P]});const B=new f({dpi:96,lods:M,format:C,origin:R,size:[u,d],spatialReference:v}),O={recordSize:y,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*y+64},$=[{maxCol:Math.ceil(T/u)-1,maxRow:Math.ceil(j/d)-1,minCol:0,minRow:0}];let q=2;if(g>0)for(P=0;P<g;P++)$.push({maxCol:Math.ceil(T/q/u)-1,maxRow:Math.ceil(j/q/d)-1,minCol:0,minRow:0}),q*=2;const E=e.mdInfo;return{storageInfo:O,rasterInfo:new m({width:T,height:j,pixelType:o,bandCount:i,extent:w,nativeExtent:z,transform:k,spatialReference:v,pixelSize:b,keyProperties:_,statistics:x,histograms:l,multidimensionalInfo:E,colormap:F,storageInfo:new p({blockWidth:u,blockHeight:d,pyramidBlockWidth:u,pyramidBlockHeight:d,origin:R,tileInfo:B,firstPyramidLevel:h,maximumPyramidLevel:g,blockBoundary:$})})}}_parseTransform(e){var t,r;if(!d(e))throw new i("cloudraster:open","the data contains unsupported geodata transform types");const o=h(e);if("identity"===o.type)return null;if(null==(t=o.forwardCoefficients)||!t.length||null==(r=o.inverseCoefficients)||!r.length)throw new i("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return o}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then((e=>e.data)).catch((()=>null)),r=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then((e=>e.data)).catch((()=>null)),o=await Promise.all([t,r]);let i;if(o[0]){let e=o[0].fields;const t=o[0].values;if(e&&t){e=e.map((e=>({type:"OID"===e.name?"esriFieldTypeOID":g.get(e.type),name:e.name,alias:e.alias||e.name})));const r=t.map((e=>({attributes:e})));e&&t&&(i={fields:e,features:r})}}if(!i&&o[1]){i=u.parse(o[1]).recordSet}return l.fromJSON(i)}_buildCacheFilePath(e,r,o,i){const s=this.storageInfo.packetSize,a=Math.floor(r/s)*s,n=Math.floor(o/s)*s,l="R"+this._toHexString4(a)+"C"+this._toHexString4(n);let f="L";f+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:m}=this.rasterInfo,p=null==i?void 0:i[0];if(!t(m)||!p)return`${this.url}/_alllayers/${f}/${l}.bundle`;let c=m.variables.filter((e=>e.name===p.variableName))[0].dimensions[0].values.indexOf(p.values[0]).toString(16);const u=4-c.length;for(let t=0;t<u;t++)c="0"+c;return c="S"+c,`${this.url}/_alllayers/${p.variableName}/${c}/${f}/${l}.bundle`}_getIndexRecordFromBundle(e,t){const r=this.storageInfo.packetSize,o=r*(e%r)+t%r;if(o<0)throw"Invalid level / row / col";return 20+o*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const r=e.subarray(t,t+8);let o,i=0;for(o=0;o<5;o++)i|=(255&r[o])<<8*o;const s=0xffffffffff&i;for(i=0,o=5;o<8;o++)i|=(255&r[o])<<8*(o-5);return{position:s,recordSize:0xffffffffff&i}}_toHexString4(e){let t=e.toString(16);if(4!==t.length){let e=4-t.length;for(;e-- >0;)t="0"+t}return t}};e([r({readOnly:!0})],x.prototype,"storageInfo",void 0),e([r({type:String,json:{write:!0}})],x.prototype,"datasetFormat",void 0),x=e([o("esri.layers.support.rasterDatasets.CloudRaster")],x);var I=x;export default I;
