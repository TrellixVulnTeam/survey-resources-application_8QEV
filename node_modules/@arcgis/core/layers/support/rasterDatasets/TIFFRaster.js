/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import{unwrap as t,isSome as r}from"../../../core/maybe.js";import"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{property as i}from"../../../core/accessorSupport/decorators/property.js";import{subclass as s}from"../../../core/accessorSupport/decorators/subclass.js";import a from"../../../core/Error.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import o from"../../../geometry/Point.js";import n from"../../../geometry/Extent.js";import"../../../geometry.js";import f from"../RasterInfo.js";import l from"../rasterFormats/TiffTags.js";import{parseSignature as u,getImageInfo as m,parseIFD as p,parseFieldValues as c}from"../rasterFormats/TiffDecoder.js";import{estimateStatisticsFromHistograms as h}from"../rasterFunctions/pixelUtils.js";import d from"../RasterStorageInfo.js";import y from"./BaseRaster.js";import g from"../rasterTransforms/PolynomialTransform.js";import{parsePAMInfo as x}from"./pamParser.js";const T=function(e,t){const r=e.get(t);return r&&r.values},I=function(e,t){const r=e.get(t);return r&&r.values[0]};let w=class extends y{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){var i;await this.init();const s=e?t(e.signal):null,{data:l}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:s});if(!l)throw new a("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:p,firstIFD:c,isBigTiff:y}=u(l),x=[];await this.readIFDs(x,l,p,c,0,y?8:4,s);const T=m(x),{width:I,height:w,tileWidth:E,tileHeight:F,planes:S,pixelType:v,compression:b,firstPyramidLevel:_,maximumPyramidLevel:j,pyramidBlockWidth:R,pyramidBlockHeight:B,tileBoundary:D,affine:k,metadata:L}=T,O=n.fromJSON(T.extent),z=O.spatialReference,H=new o(O?{x:O.xmin,y:O.ymax,spatialReference:z}:{x:0,y:0}),P=new d({blockWidth:E,blockHeight:F,pyramidBlockWidth:R,pyramidBlockHeight:B,compression:b,origin:H,firstPyramidLevel:_,maximumPyramidLevel:j,blockBoundary:D}),G=new o({x:(O.xmax-O.xmin)/I,y:(O.ymax-O.ymin)/w,spatialReference:z}),q=L?{BandProperties:L.bandProperties,DataType:L.dataType}:{},W=new f({width:I,height:w,bandCount:S,pixelType:v,compression:b,pixelSize:G,storageInfo:P,spatialReference:z,keyProperties:q,extent:O,statistics:L?L.statistics:null});if(null!=k&&k.length&&(W.nativeExtent=new n({xmin:-.5,ymin:.5-w,xmax:I-.5,ymax:.5,spatialReference:z}),W.transform=new g({polynomialOrder:1,forwardCoefficients:[k[2]+k[0]/2,k[5]-k[3]/2,k[0],k[3],-k[1],-k[4]]}),W.extent=W.transform.forwardTransform(W.nativeExtent),W.pixelSize=new o({x:(O.xmax-O.xmin)/I,y:(O.ymax-O.ymin)/w,spatialReference:z}),P.origin.x=-.5,P.origin.y=.5),null==(i=this.ioConfig.skipExtensions)||!i.includes("aux.xml")){const t=await this._fetchAuxiliaryData(e);if(null!=t){var C;if(W.statistics=null!=(C=t.statistics)?C:W.statistics,W.histograms=t.histograms,t.histograms&&!r(W.statistics)&&(W.statistics=h(t.histograms)),t.transform&&!k){W.transform=t.transform,W.nativeExtent=W.extent;const e=W.transform.forwardTransform(W.nativeExtent);W.pixelSize=new o({x:(e.xmax-e.xmin)/I,y:(e.ymax-e.ymin)/w,spatialReference:z}),W.extent=e}W.spatialReference||(W.spatialReference=t.spatialReference)}}if(this._set("rasterInfo",W),this._headerInfo={littleEndian:p,isBigTiff:y,ifds:x,...T},!this._headerInfo.isSupported)throw new a("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);this.updateTileInfo()}async fetchRawTile(e,t,r,i={}){var s;if(null==(s=this._headerInfo)||!s.isSupported||this.isBlockOutside(e,t,r))return null;const a=this.getTileLocation(e,t,r);if(!a)return null;const{range:o,actualTileWidth:n,actualTileHeight:f,ifd:l}=a,{data:u}=await this.request(this.url,{range:o,responseType:"array-buffer",signal:i.signal}),{blockWidth:m,blockHeight:p}=this.getBlockWidthHeight(e),c=await this.decodePixelBlock(u,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:l,offset:0,size:0},width:m,height:p,planes:null,pixelType:null});let h,d,y;if(n!==m||f!==p){let e=c.mask;if(e)for(h=0;h<p;h++)if(y=h*m,h<f)for(d=n;d<m;d++)e[y+d]=0;else for(d=0;d<m;d++)e[y+d]=0;else for(e=new Uint8Array(m*p),c.mask=e,h=0;h<f;h++)for(y=h*m,d=0;d<n;d++)e[y+d]=1}return c}async readIFDs(e,t,r,i,s,a=4,o){if(!i)return null;if(i>=t.byteLength||i<0){t=(await this.request(this.url,{range:{from:i+s,to:i+s+this._bufferSize},responseType:"array-buffer",signal:o})).data,s=i+s,i=0}const n=await this.readIFD(t,r,i,s,l.TIFF_TAGS,a,o);if(e.push(n.ifd),!n.nextIFD)return null;await this.readIFDs(e,t,r,n.nextIFD-s,s,a,o)}async readIFD(e,t,r,i,s=l.TIFF_TAGS,a=4,o){if(!e)return null;const n=p(e,t,r,i,s,a);if(n.success){const r=[];if(n.ifd.forEach((e=>{e.values||r.push(e)})),r.length>0){const s=r.map((e=>e.offlineOffsetSize)),a=Math.min.apply(null,s.map((e=>e[0])));if(Math.min.apply(null,s.map((e=>e[0]+e[1])))-a<=this._bufferSize){const{data:s}=await this.request(this.url,{range:{from:a,to:a+this._bufferSize},responseType:"array-buffer",signal:o});e=s,i=a,r.forEach((r=>c(e,t,r,i)))}}if(n.ifd.has("GEOKEYDIRECTORY")){const r=n.ifd.get("GEOKEYDIRECTORY"),s=r.values;if(s&&s.length>4){const a=s[0]+"."+s[1]+"."+s[2],n=await this.readIFD(e,t,r.valueOffset+6-i,i,l.GEO_KEYS,2,o);r.data=n.ifd,r.data&&r.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[a]})}}return n}if(n.requiredBufferSize&&n.requiredBufferSize!==e.byteLength){const r=await this.request(this.url,{range:{from:i,to:i+n.requiredBufferSize+4},responseType:"array-buffer",signal:o});return(e=r.data).byteLength<n.requiredBufferSize?null:this.readIFD(e,t,0,i,l.TIFF_TAGS,4,o)}}getTileLocation(e,t,r){const{firstPyramidLevel:i,blockBoundary:s}=this.rasterInfo.storageInfo,a=0===e?0:e-(i-1),o=this._headerInfo.ifds[a];if(!o)return null;const n=T(o,"TILEOFFSETS");if(void 0===n)return null;const f=T(o,"TILEBYTECOUNTS"),{minRow:l,minCol:u,maxRow:m,maxCol:p}=s[a];if(t>m||r>p||t<l||r<u)return null;const c=I(o,"IMAGEWIDTH"),h=I(o,"IMAGELENGTH"),d=I(o,"TILEWIDTH"),y=I(o,"TILELENGTH"),g=t*(p+1)+r,x=n[g],w=f[g];if(null==x||null==w)return null;return{range:{from:x,to:x+w-1},ifd:o,actualTileWidth:r===p?c%d:d,actualTileHeight:t===m?h%y:y}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==e?void 0:e.signal});return x(t)}catch{return null}}};e([i()],w.prototype,"_files",void 0),e([i()],w.prototype,"_headerInfo",void 0),e([i()],w.prototype,"_bufferSize",void 0),e([i({type:String,json:{write:!0}})],w.prototype,"datasetFormat",void 0),w=e([s("esri.layers.support.rasterDatasets.TIFFRaster")],w);var E=w;export default E;
