/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import{isSome as t,unwrap as r}from"../../../core/maybe.js";import o from"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{property as i}from"../../../core/accessorSupport/decorators/property.js";import{subclass as n}from"../../../core/accessorSupport/decorators/subclass.js";import s from"../../../core/Error.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import{createAbortController as a,onAbort as l}from"../../../core/promiseUtils.js";import{JSONSupport as c}from"../../../core/JSONSupport.js";import u from"../../../geometry/Point.js";import m from"../../../geometry/Extent.js";import"../../../geometry.js";import f from"../../../request.js";import{EsriPromiseMixin as h}from"../../../core/Promise.js";import{sanitizeUrl as d}from"../arcgisLayerUrl.js";import{url as p}from"../commonProperties.js";import x from"../TileInfo.js";import{decode as y}from"../rasterFormats/RasterCodec.js";import{mosaic as g,approximateTransform as w}from"../rasterFunctions/pixelUtils.js";import I from"../RasterStorageInfo.js";import{load as k,projectPoint as v,snapPyramid as R,projectResolution as b,projectExtent as M,getProjectionOffsetGrid as C}from"../rasterFunctions/rasterProjectionHelper.js";import{getRasterId as B,getBlock as P,putBlock as j,deleteBlock as T,decreaseRefCount as F}from"./RawBlockCache.js";let S=class extends(h(c)){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const e=k();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:x.create(),...e.ioConfig}}),e}set url(e){this._set("url",d(e,o.getLogger(this.declaredClass)))}async open(e){throw new s("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,r,o,i={}){var n;const{tileInfo:s}=i,a=s.lodAt(e),l=this.getTileExtent({x:a.resolution,y:a.resolution},r,o,s.origin,s.spatialReference,s.size);return null!=(n=i.multidimensionalDefinition)&&n.length&&t(this.rasterInfo.multidimensionalInfo)&&null==i.sliceId&&(i={...i,sliceId:this.getSliceIndex(i.multidimensionalDefinition)||0}),this.fetchPixels(l,s.size[0],s.size[1],i)}async identify(e,r={}){const{spatialReference:o,extent:i}=this.rasterInfo,{datumTransformation:n}=r;let s=v(e,o,n);if(!i.intersects(s))return{location:s,value:null};if(t(this.rasterInfo.transform)){const e=this.rasterInfo.transform.inverseTransform(s);if(!this.rasterInfo.nativeExtent.intersects(e))return{location:e,value:null};s=e}let a=0;if(r.srcResolution){a=R(r.srcResolution,this.rasterInfo,this.ioConfig.sampling).pyramidLevel}else if(a=await this.computeBestPyramidLevelForLocation(e,r),null==a)return{location:s,value:null};const l=this.identifyPixelLocation(s,a,null);if(null===l)return{location:s,value:null};const{row:c,col:u,rowOffset:m,colOffset:f}=l,h=B(this.url,r.sliceId),d=`${a}/${c}/${u}`;let p=P(h,null,d);t(p)||(p=this.fetchRawTile(a,c,u,r),j(h,null,d,p));const x=await p;if(!(x&&x.pixels&&x.pixels.length>0))return{location:s,value:null};const y=m*this.rasterInfo.storageInfo.blockHeight+f;return{location:s,value:!x.mask||x.mask[y]?x.pixels.map((e=>e[y])):null,pyramidLevel:a}}async fetchPixels(e,t,o,i={}){const n=e.clone().normalize();e=n[0];const s=this.rasterInfo.spatialReference,a=!e.spatialReference.equals(s),{datumTransformation:l}=i,c=new u({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/o,spatialReference:e.spatialReference}),m=i.srcResolution||(a?b(c,s,e,l):c);if(!m)return null;const{pyramidLevel:f,pyramidResolution:h,excessiveReading:d}=R(m,this.rasterInfo,this.ioConfig.sampling);if(d)return null;const p=this.rasterInfo.storageInfo;let x=a?M(e,s,l):e;const y=r(this.rasterInfo.transform);if(y&&(x=y.inverseTransform(x)),null==x)return null;const I={x:Math.floor((x.xmin-p.origin.x)/h.x+.1),y:Math.floor((p.origin.y-x.ymax)/h.y+.1)},k=Math.ceil((x.xmax-x.xmin)/h.x-.1),v=Math.ceil((x.ymax-x.ymin)/h.y-.1);if(k/t>8||v/o>8)return null;const B=await this.fetchRawPixels(f,I,{width:k,height:v},i);if(!B)return null;const P=f>0?p.pyramidBlockWidth:p.blockWidth,j=f>0?p.pyramidBlockHeight:p.blockHeight;if(!a&&1===B.pixelBlocks.length&&P===t&&j===o&&m.x===c.x&&m.y===c.y)return{extent:e,srcExtent:x,pixelBlock:B.pixelBlocks[0]};const T=C(e,B.extent,c,l,y);let F;const S=!i.requestRawData,L={rows:T.spacing[0],cols:T.spacing[1]},{pixelBlocks:D,mosaicSize:H,isPartiallyFilled:U}=B;if(this.rasterJobHandler)F=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:D,srcMosaicSize:H,destDimension:S?{width:t,height:o}:null,coefs:S?T.coefficients:null,sampleSpacing:S?L:null,interpolation:i.interpolation},i);else{const e=g(D,H);F=S?w(e,{width:t,height:o},T.coefficients,L,i.interpolation):e}return i.requestRawData?{srcExtent:x,pixelBlock:F,transformGrid:T,extent:e,isPartiallyFilled:U}:{srcExtent:x,extent:e,pixelBlock:F}}async fetchRawPixels(e,t,r,o){const{origin:i,blockBoundary:n}=this.rasterInfo.storageInfo,{blockWidth:s,blockHeight:a}=this.getBlockWidthHeight(e);let{x:l,y:c}=t,{width:u,height:f}=r;o.buffer&&(l-=o.buffer.cols,c-=o.buffer.rows,u+=2*o.buffer.cols,f+=2*o.buffer.rows);const h=Math.floor(l/s),d=Math.floor(c/a),p=Math.floor((l+u-1)/s),x=Math.floor((c+f-1)/a),y=n[e];if(!y)return null;const{minRow:g,minCol:w,maxCol:I,maxRow:k}=y;if(x<g||p<w||d>k||h>I)return null;const v=[];let R,b=!1;for(let m=d;m<=x;m++)for(let t=h;t<=p;t++)m>=g&&t>=w&&k>=m&&I>=t?(R=this._fetchRawTile(e,m,t,o),this.ioConfig.allowPartialFill&&(R=new Promise((e=>{R.then((t=>e(t))).catch((()=>{b=!0,e(null)}))}))),v.push(R)):v.push(null);if(0===v.length)return null;const M=await Promise.all(v),C={height:(x-d+1)*s,width:(p-h+1)*a},{nativePixelSize:B,spatialReference:P}=this.rasterInfo,j=B.x*2**e,T=B.y*2**e;return{extent:new m({xmin:i.x+h*s*j,xmax:i.x+(p+1)*s*j,ymin:i.y-(x+1)*a*T,ymax:i.y-d*a*T,spatialReference:P}),pixelBlocks:M,mosaicSize:C,isPartiallyFilled:b}}async fetchRawTile(e,t,r,o){throw new s("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return M(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?y(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,t,r){var o,i;const{customFetchParameters:n}=this.ioConfig,{range:s,query:a,headers:l}=t;r=null!=(o=null!=(i=r)?i:t.retryCount)?o:this.ioConfig.retryCount;const c=s?{Range:`bytes=${s.from}-${s.to}`}:null;try{return await f(e,{...t,query:{...a,...n},headers:{...l,...c}})}catch(u){if(r>0)return r--,this.request(e,t,r);throw u}}getSliceIndex(e){const{multidimensionalInfo:r}=this.rasterInfo;if(!t(r)||null==e||!e.length)return null;let o=0;const i=e[0].variableName;for(let t=0;t<r.variables.length;t++){const n=r.variables[t],s=n.dimensions;if(n.name!==i){o+=s.map((e=>this._getDimensionValuesCount(e))).reduce(((e,t)=>e+t));break}const a=s.map((e=>this._getDimensionValuesCount(e))),l=s.length;for(let t=0;t<l;t++){const r=e.filter((e=>e.dimensionName===s[t].name))[0];if(null==r)return null;const i=Array.isArray(r.values[0])?r.values[0][0]:r.values[0],n=this._getIndexFromDimensions(i,s[t]);if(-1===n)return null;a.shift(),o+=t===l-1?n:n*a.reduce(((e,t)=>e+t))}}return o}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:r,pixelSize:o}=this.rasterInfo;if(!e.tileInfo){const i=[],n=e.maximumPyramidLevel||0;let s=Math.max(o.x,o.y),a=1/.0254*96*s;for(let e=0;e<=n;e++)i.push({level:n-e,resolution:s,scale:a}),s*=2,a*=2;const l=new u({x:r.xmin,y:r.ymax,spatialReference:t});e.tileInfo=new x({origin:l,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:i}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,t=512,r=512,o){const{width:i,height:n,nativeExtent:s,pixelSize:a,spatialReference:l}=e,c=new u({x:s.xmin,y:s.ymax,spatialReference:l});null==o&&(o=Math.max(0,Math.round(Math.log(Math.max(i,n))/Math.LN2-8)));const m=this._computeBlockBoundary(s,a,o,512,512);e.storageInfo=new I({blockWidth:t,blockHeight:r,pyramidBlockWidth:t,pyramidBlockHeight:r,origin:c,firstPyramidLevel:1,maximumPyramidLevel:o,blockBoundary:m})}async computeBestPyramidLevelForLocation(e,t={}){return 0}identifyPixelLocation(e,t,r){const{spatialReference:o,nativePixelSize:i,nativeExtent:n}=this.rasterInfo,{blockWidth:s,blockHeight:a,maximumPyramidLevel:l,pyramidScalingFactor:c,origin:u}=this.rasterInfo.storageInfo,m=v(e,o,r);if(!n.intersects(m))return null;if(t<0||t>l)return null;const f=c**t,h=f*i.x,d=f*i.y,p=(u.y-m.y)/d/a,x=(m.x-u.x)/h/s,y=Math.min(a-1,Math.floor((p-Math.floor(p))*a)),g=Math.min(s-1,Math.floor((x-Math.floor(x))*s));return{pyramidLevel:t,row:Math.floor(p),col:Math.floor(x),rowOffset:y,colOffset:g,srcLocation:m}}getTileExtent(e,t,r,o,i,n){const[s,a]=n,l=o.x+r*s*e.x,c=l+s*e.x,u=o.y-t*a*e.y,f=u-a*e.y;return new m({xmin:l,xmax:c,ymin:f,ymax:u,spatialReference:i})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,r){const o=this.rasterInfo.storageInfo.blockBoundary[e];return!o||o.maxRow<t||o.maxCol<r||o.minRow>t||o.minCol>r}_computeBlockBoundary(e,t,r,o,i){let{x:n,y:s}=t;const a=e.xmin,l=e.ymax,c=[{minCol:Math.floor((e.xmin-a+.1*n)/o/n),maxCol:Math.floor((e.xmax-a-.1*n)/o/n),minRow:Math.floor((l-e.ymax+.1*s)/i/s),maxRow:Math.floor((l-e.ymin-.1*s)/i/s)}];if(r>0)for(let u=0;u<r;u++)n*=2,s*=2,c.push({minCol:Math.floor((e.xmin-a+.1*n)/o/n),maxCol:Math.floor((e.xmax-a-.1*n)/o/n),minRow:Math.floor((l-e.ymax+.1*s)/i/n),maxRow:Math.floor((l-e.ymin-.1*s)/i/n)});return c}_fetchRawTile(e,r,o,i){const n=this.rasterInfo.storageInfo.blockBoundary[e];if(!n)return Promise.resolve(null);const{minRow:s,minCol:c,maxCol:u,maxRow:m}=n;if(r<s||o<c||r>m||o>u)return Promise.resolve(null);const f=B(this.url,i.sliceId),h=`${e}/${r}/${o}`;let d=P(f,i.registryId,h);if(!t(d)){const t=a();d=this.fetchRawTile(e,r,o,{...i,signal:t.signal}),j(f,i.registryId,h,d,t),d.catch((()=>{T(f,i.registryId,h)}))}return i.signal&&l(i,(()=>{F(f,i.registryId,h)})),d}_getIndexFromDimensions(e,t){const{extent:r,interval:o,unit:i,values:n}=t;if(null!=n&&n.length)return Array.isArray(n[0])?n.findIndex((t=>t[0]<=e&&t[1]>=e)):n.indexOf(e);if(e>r[1])return-1;const s=r[0];let a=-1;if("ISO8601"===i){var l;switch((null==(l=t.intervalUnit)?void 0:l.toLowerCase())||"seconds"){case"seconds":a=Math.round((e-s)/1e3/o);break;case"minutes":a=Math.round((e-s)/6e4/o);break;case"hours":a=Math.round((e-s)/36e5/o);break;case"days":a=Math.round((e-s)/864e5/o);break;case"years":a=Math.round((new Date(e).getUTCFullYear()-new Date(s).getUTCFullYear())/o);break;case"decades":a=Math.round((new Date(e).getUTCFullYear()-new Date(s).getUTCFullYear())/10/o)}return a}return Math.round((e-s)/o)}_getDimensionValuesCount(e){const{extent:t,interval:r,unit:o,values:i}=e;let n=(null==i?void 0:i.length)||0;if(n)return n;const s=t[0];if(0===n&&"ISO8601"===o){var a;switch((null==(a=e.intervalUnit)?void 0:a.toLowerCase())||"seconds"){case"seconds":n=Math.round((t[1]-t[0])/1e3/r);break;case"minutes":n=Math.round((t[1]-t[0])/6e4/r);break;case"hours":n=Math.round((t[1]-t[0])/36e5/r);break;case"days":n=Math.round((t[1]-t[0])/864e5/r);break;case"years":n=Math.round((new Date(t[1]).getUTCFullYear()-new Date(s).getUTCFullYear())/r);break;case"decades":n=Math.round((new Date(t[1]).getUTCFullYear()-new Date(s).getUTCFullYear())/10/r)}return n}return Math.round((t[1]-t[0])/r)}};e([i(p)],S.prototype,"url",null),e([i({type:String,json:{write:!0}})],S.prototype,"datasetName",void 0),e([i({type:String,json:{write:!0}})],S.prototype,"datasetFormat",void 0),e([i()],S.prototype,"rasterInfo",void 0),e([i()],S.prototype,"ioConfig",void 0),e([i()],S.prototype,"sourceJSON",void 0),S=e([n("esri.layers.support.rasterDatasets.BaseRaster")],S);var L=S;export default L;
