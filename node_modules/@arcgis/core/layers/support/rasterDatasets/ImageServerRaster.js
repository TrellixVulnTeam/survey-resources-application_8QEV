/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import{isSome as t,unwrap as i}from"../../../core/maybe.js";import"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{property as s}from"../../../core/accessorSupport/decorators/property.js";import{subclass as a}from"../../../core/accessorSupport/decorators/subclass.js";import l from"../../../core/Error.js";import{urlToObject as r}from"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import o from"../../../geometry/SpatialReference.js";import n from"../../../geometry/Point.js";import m from"../../../geometry/Extent.js";import"../../../geometry.js";import h from"../../../tasks/support/FeatureSet.js";import c from"../TileInfo.js";import{readServiceTileInfo as u}from"../serviceTileInfoProperty.js";import{TilemapCache as p}from"../TilemapCache.js";import f from"../RasterInfo.js";import{setValidBoundary as x}from"../rasterFunctions/pixelUtils.js";import d from"../RasterStorageInfo.js";import y from"./BaseRaster.js";let g=class extends y{constructor(){super(...arguments),this._levelOffset=0,this._slices=null,this._tilemapCache=null,this.datasetFormat="RasterTileServer"}async open(e){await this.init();const i=e&&e.signal,s=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:i});s.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const a=s.data;if(this.sourceJSON=a,!a)throw new l("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!a.tileInfo)throw new l("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const o=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=a.cacheType,null==this.tileType&&(o.indexOf(a.tileInfo.format.toLowerCase())>-1?this.tileType="Map":"lerc"===a.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=a.name.slice(a.name.indexOf("/")+1);const n=await this._fetchRasterInfo({signal:i});if(!t(n))throw new l("image-server-raster:open","cannot initialize image service");{const e="Map"===this.tileType?u(a.tileInfo,a):c.fromJSON(a.tileInfo),{extent:t,pixelSize:i}=n,s=.5/n.width*i.x;let l,r;const o=e.lodAt(Math.max.apply(null,e.lods.map((e=>e.level))));"Map"!==this.tileType&&0!==a.maxScale&&("Raster"===this.tileType?(l=e.lods.filter((e=>e.resolution===i.x))[0],l||(l=e.lods[e.lods.length-1])):(l=e.lods.filter((e=>Math.abs(e.scale-a.maxScale)<s))[0],l||(l=e.lods.filter((e=>e.scale>a.maxScale)).sort(((e,t)=>e.scale>t.scale?1:-1))[0])),i.x=i.y=l.resolution,n.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),n.height=Math.ceil((t.ymax-t.ymin)/i.y-.1)),l||(l=o);const m=e.lodAt(Math.min.apply(null,e.lods.map((e=>e.level))));"Map"===this.tileType?this._levelOffset=e.lods[0].level:0!==a.minScale&&"Elevation"===this.tileType&&(r=e.lods.filter((e=>Math.abs(e.scale-a.minScale)<s))[0],this._levelOffset=r.level-m.level),r||(r=m);const h=Math.max(i.x,i.y);(Math.abs(i.x-i.y)>s||!e.lods.some((e=>Math.abs(e.resolution-h)<s)))&&(i.x=i.y=l.resolution,n.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),n.height=Math.ceil((t.ymax-t.ymin)/i.y-.1));const p=l.level-r.level,[f,x]=e.size,y=e.origin;let{x:g,y:v}=i;const S=[{minCol:Math.floor((t.xmin-y.x+.1*g)/f/g),maxCol:Math.floor((t.xmax-y.x-.1*g)/f/g),minRow:Math.floor((y.y-t.ymax+.1*v)/x/v),maxRow:Math.floor((y.y-t.ymin-.1*v)/x/v)}];if(p>0)for(let a=0;a<p;a++)g*=2,v*=2,S.push({minCol:Math.floor((t.xmin-y.x+.1*g)/f/g),maxCol:Math.floor((t.xmax-y.x-.1*g)/f/g),minRow:Math.floor((y.y-t.ymax+.1*v)/x/g),maxRow:Math.floor((y.y-t.ymin-.1*v)/x/g)});n.storageInfo=new d({blockWidth:e.size[0],blockHeight:e.size[1],pyramidBlockWidth:e.size[0],pyramidBlockHeight:e.size[1],compression:e.format,origin:e.origin,firstPyramidLevel:1,maximumPyramidLevel:p,tileInfo:e,blockBoundary:S}),this._set("rasterInfo",n)}if(a.capabilities.toLowerCase().indexOf("tilemap")>-1){const e={tileInfo:n.storageInfo.tileInfo,parsedUrl:r(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new p({layer:e})}}async fetchRawTile(e,t,i,s={}){const{storageInfo:a,extent:l,pixelSize:r}=this.rasterInfo,o=a.maximumPyramidLevel-e+this._levelOffset,n=`${this.url}/tile/${o}/${t}/${i}`,m=this._slices?{sliceId:s.sliceId||0}:null,{data:h}=await this.request(n,{query:m,responseType:"array-buffer",signal:s.signal});if(!h)return null;const c=await this.decodePixelBlock(h,{width:a.tileInfo.size[0],height:a.tileInfo.size[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType}),u=a.blockBoundary[e];if("jpg"!==a.compression||i>u.minCol&&i<u.maxCol&&t>u.minRow&&t<u.maxRow)return c;const{origin:p,blockWidth:f,blockHeight:d}=a,y=2**e,g=Math.round((l.xmin-p.x)/(r.x*y))%f,v=Math.round((l.xmax-p.x)/(r.x*y))%f,S=Math.round((p.y-l.ymax)/(r.x*y))%d,w=Math.round((p.y-l.ymin)/(r.x*y))%d,I=i===u.minCol?g:0,j=t===u.minRow?S:0,b=i===u.maxCol?v:f,M=t===u.maxRow?w:d;return x(c,{x:I,y:j},{width:b-I,height:M-j}),c}getSliceIndex(e){if(null==e||!e.length||!this._slices)return null;const t=e;for(let i=0;i<this._slices.length;i++){const e=this._slices[i].multidimensionalDefinition;if(e.length===t.length&&!e.some((e=>{const i=t.filter((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName))[0];if(!i)return!0;return(Array.isArray(e.values[0])?e.values[0][0]:e.values[0])!==(Array.isArray(i.values[0])?i.values[0][0]:i.values[0])})))return i}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.statistics})),s=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),a=await Promise.all([i,s]);return a[0]&&a[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:a[0]||null,histograms:a[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let s=this.identifyPixelLocation(e,0,i(t.datumTransformation));if(null===s)return null;let a=0;const{maximumPyramidLevel:l}=this.rasterInfo.storageInfo;let r=l-a+this._levelOffset;const o=s.srcLocation;for(;r>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(r,s.row,s.col,t))break}catch{}if(r--,a++,s=this.identifyPixelLocation(o,a,i(t.datumTransformation)),null===s)return null}return-1===r||null==s?null:a}async _fetchRasterInfo(e){const t=this.sourceJSON,i=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),s=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),a=o.fromJSON(t.spatialReference||t.extent.spatialReference);if("Map"===this.tileType)return new f({width:i,height:s,bandCount:3,extent:m.fromJSON(t.extent),spatialReference:a,pixelSize:new n({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:a}),pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}});const{slice:l,signal:r}=e,c=!!t.hasRasterAttributeTable&&this.request(this.url+"/rasterAttributeTable",{query:{slice:l,f:"json"},signal:r}).then((e=>h.fromJSON(e.data))).catch((()=>null)),u=!!t.hasColormap&&this.request(this.url+"/colormap",{query:{slice:l,f:"json"},signal:r}).then((e=>{var t;return null==(t=e.data)?void 0:t.colormap})),p=!!t.hasHistograms&&this.request(this.url+"/histograms",{query:{slice:l,f:"json"},signal:r}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),x=this.request(this.url+"/keyProperties",{query:{f:"json"},signal:r}).then((e=>e.data)).catch((()=>{})),d=!!t.hasMultidimensions&&this._fetchMultidimensionalInfo(),y=!!t.hasMultidimensions&&this.request(this.url+"/slices",{query:{f:"json"},signal:r}).then((e=>e.data&&e.data.slices)).catch((()=>{}));return Promise.all([c,u,p,x,d,y]).then((e=>{let l=null;if(t.minValues&&t.minValues.length===t.bandCount){l=[];for(let e=0;e<t.minValues.length;e++)l.push({min:t.minValues[e],max:t.maxValues[e],avg:t.meanValues[e],stddev:t.stdvValues[e]})}return this._slices=e[5]||null,new f({width:i,height:s,bandCount:t.bandCount,extent:m.fromJSON(t.extent),spatialReference:a,pixelSize:new n({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:a}),pixelType:t.pixelType.toLowerCase(),statistics:l,attributeTable:e[0]||null,colormap:e[1]||null,histograms:e[2]||null,keyProperties:e[3]||{},multidimensionalInfo:e[4]||null})}))}async _fetchMultidimensionalInfo(e){var t;const i=await this.request(this.url+"/multidimensionalInfo",{query:{f:"json"},signal:e}).then((e=>{var t;return null==(t=e.data)?void 0:t.multidimensionalInfo}));return null!=(t=i.variables)&&t.length&&i.variables.forEach((e=>{var t;null!=(t=e.statistics)&&t.length&&e.statistics.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation}))})),i}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}};e([s({type:String,json:{write:!0}})],g.prototype,"datasetFormat",void 0),e([s()],g.prototype,"tileType",void 0),g=e([a("esri.layers.support.rasterDatasets.ImageServerRaster")],g);var v=g;export default v;
