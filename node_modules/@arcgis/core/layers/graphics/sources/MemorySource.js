/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/has.js";import{isSome as r,isNone as s}from"../../../core/maybe.js";import o from"../../../core/Logger.js";import{ensureType as i}from"../../../core/accessorSupport/ensureType.js";import{property as n}from"../../../core/accessorSupport/decorators/property.js";import{shared as a}from"../../../core/accessorSupport/decorators/shared.js";import{subclass as l}from"../../../core/accessorSupport/decorators/subclass.js";import u from"../../../core/Error.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import c from"../../../geometry/Extent.js";import p from"../../../geometry/Polygon.js";import{typeKebabDictionary as d}from"../../../geometry/support/typeUtils.js";import"../../../geometry.js";import h from"../../../core/Collection.js";import{EsriPromiseMixin as y}from"../../../core/Promise.js";import m from"../../../core/Loadable.js";import f from"../../../Graphic.js";import{open as g}from"../../../core/workers/workers.js";import{unapplyEditsZUnitScaling as _}from"../../../rest/query/operations/zscale.js";import{applyFeatureSetZUnitScaling as j}from"../../../rest/query/operations/queryZScale.js";import b from"../../../tasks/support/FeatureSet.js";let T=0;const F=o.getLogger("esri.layers.graphics.sources.MemorySource");let R=class extends(m.LoadableMixin(y(h))){constructor(e){super(e),this._idToClientGraphic=null,this.type="memory"}load(e){const t=r(e)?e.signal:null;return this.addResolvingPromise(this._startWorker(t)),Promise.resolve(this)}destroy(){var e;null==(e=this._connection)||e.close(),this._connection=null}get workerGeometryType(){const e=this.layer&&this.layer.geometryType;return e?this._geometryTypeRequiresClientGraphicMapping(e)?"polygon":e:null}applyEdits(e){return this.load().then((()=>this._applyEdits(e)))}openPorts(){return this.load().then((()=>this._connection.openPorts()))}async queryFeatures(e,t={}){await this.load(t);const r=await this._connection.invoke("queryFeatures",e?e.toJSON():null,t);j(e,this.layer.spatialReference,r);const s=b.fromJSON(r);if(!this._requiresClientGraphicMapping())return s;const o=this.layer.objectIdField;for(const i of s.features){const e=i.attributes[o],t=this._idToClientGraphic.get(e);t&&(i.geometry=t.geometry)}return s.geometryType=this.layer.geometryType,s}async queryFeaturesJSON(e,t={}){if(this._requiresClientGraphicMapping())throw new u("query-features-json:unsupported","Cannot query in JSON format for client only geometry types (mesh and extent)");await this.load(t);const r=await this._connection.invoke("queryFeatures",e?e.toJSON():null,t);return j(e,this.layer.spatialReference,r),r}queryFeatureCount(e,t={}){return this.load(t).then((()=>this._connection.invoke("queryFeatureCount",e?e.toJSON():null,t)))}queryObjectIds(e,t={}){return this.load(t).then((()=>this._connection.invoke("queryObjectIds",e?e.toJSON():null,t)))}queryExtent(e,t={}){return this.load(t).then((()=>this._connection.invoke("queryExtent",e?e.toJSON():null,t))).then((e=>({count:e.count,extent:c.fromJSON(e.extent)})))}querySnapping(e,t={}){return this.load(t).then((()=>this._connection.invoke("querySnapping",e,t)))}_applyEdits(e){if(!this._connection)throw new u("feature-layer-source:edit-failure","Memory source not loaded");const t=this.layer.objectIdField;let r=null;const s=[],o=[],i=e=>"objectId"in e&&null!=e.objectId?e.objectId:"attributes"in e&&null!=e.attributes[t]?e.attributes[t]:null;if(e.addFeatures&&(r=this._prepareAddFeatures(e.addFeatures)),e.deleteFeatures)for(const a of e.deleteFeatures){const e=i(a);null!=e&&s.push(e)}const n=e.updateFeatures&&this._idToClientGraphic?new Map:null;if(e.updateFeatures)for(const a of e.updateFeatures)if(o.push(this._serializeFeature(a)),n){const e=i(a);null!=e&&n.set(e,a)}return _(r?r.features:null,o,this.layer.spatialReference),this._connection.invoke("applyEdits",{adds:r?r.features:[],updates:o,deletes:s}).then((({fullExtent:e,featureEditResults:t})=>{if(this.fullExtent=e,r&&r.finish(t.uidToObjectId),this._idToClientGraphic){if(n)for(const e of t.updateResults){if(!e.success)continue;const t=n.get(e.objectId);null!=t&&this._addIdToClientGraphic(t)}for(const e of t.deleteResults)e.success&&this._idToClientGraphic.delete(e.objectId)}return this._createEditsResult(t)}))}_createEditsResult(e){return{addFeatureResults:e.addResults?e.addResults.map(this._createFeatureEditResult,this):[],updateFeatureResults:e.updateResults?e.updateResults.map(this._createFeatureEditResult,this):[],deleteFeatureResults:e.deleteResults?e.deleteResults.map(this._createFeatureEditResult,this):[],addAttachmentResults:[],updateAttachmentResults:[],deleteAttachmentResults:[]}}_createFeatureEditResult(e){const t=!0===e.success?null:e.error||{code:void 0,description:void 0};return{objectId:e.objectId,globalId:e.globalId,error:t?new u("feature-layer-source:edit-failure",t.description,{code:t.code}):null}}_prepareAddFeatures(e){const t=new Map,s=new Array(e.length);let o=null;for(let n=0;n<e.length;n++){const i=e[n],a=this._serializeFeature(i);!o&&r(i.geometry)&&(o=i.geometry.type),s[n]=a,t.set(`${a.uid}`,i)}const i=this;return{features:s,inferredGeometryType:o,finish(e){const r=i.sourceJSON.objectIdField;for(const s in e){const o=e[s],n=t.get(s);n&&(n.attributes||(n.attributes={}),-1===o?delete n.attributes[r]:n.attributes[r]=o,i._addIdToClientGraphic(n))}}}}_addIdToClientGraphic(e){if(!this._idToClientGraphic)return;const t=this.sourceJSON.objectIdField,r=e.attributes&&e.attributes[t];null!=r&&this._idToClientGraphic.set(r,e)}_requiresClientGraphicMapping(){const e=this.layer.geometryType||this.sourceJSON.geometryType;return this._geometryTypeRequiresClientGraphicMapping(e)}_geometryRequiresClientGraphicMapping(e){return this._geometryTypeRequiresClientGraphicMapping(e.type)}_geometryTypeRequiresClientGraphicMapping(e){return"mesh"===e||"multipatch"===e||"extent"===e}_serializeFeature(e){const{attributes:t}=e,r=this._geometryForSerialization(e),s=(T++).toString();return r?{uid:s,geometry:r.toJSON(),attributes:t}:{uid:s,attributes:t}}_geometryForSerialization(e){const{geometry:t}=e;if(s(t))return null;if(this._geometryRequiresClientGraphicMapping(t)){return t.extent?p.fromExtent(t.extent):null}return t}async _startWorker(e){this._connection=await g("MemorySourceWorker",{strategy:t("feature-layers-workers")?"dedicated":"local",signal:e});const{fields:r,spatialReference:s,objectIdField:o,hasM:i,hasZ:n,timeInfo:a}=this.layer,l="defaults"===this.layer.originOf("spatialReference"),u=this._prepareAddFeatures(this.items);this.on("before-changes",(e=>{F.error("Source modifications will not propagate after layer has been loaded. Please use .applyEdits() instead"),e.preventDefault()}));const c={features:u.features,fields:r&&r.map((e=>e.toJSON())),geometryType:d.toJSON(this.workerGeometryType),hasM:i,hasZ:n,objectIdField:o,spatialReference:l?null:s&&s.toJSON(),timeInfo:a?a.toJSON():null},p=await this._connection.invoke("load",c,{signal:e});for(const t of p.warnings)F.warn(t.message,{layer:this.layer,warning:t});p.featureErrors.length&&F.warn(`Encountered ${p.featureErrors.length} validation errors while loading features`,p.featureErrors);const h=p.layerDefinition;this._geometryTypeRequiresClientGraphicMapping(u.inferredGeometryType)&&(h.geometryType=d.toJSON(u.inferredGeometryType)),"mesh"!==h.geometryType&&"mesh"!==this.layer.geometryType||(h.hasZ=!0),this.sourceJSON=h,this._requiresClientGraphicMapping()&&(this._idToClientGraphic=new Map),u.finish(p.assignedObjectIds)}};e([a({Type:f,ensureType:i(f)})],R.prototype,"itemType",void 0),e([n()],R.prototype,"type",void 0),e([n({constructOnly:!0})],R.prototype,"layer",void 0),e([n({readOnly:!0})],R.prototype,"workerGeometryType",null),e([n()],R.prototype,"sourceJSON",void 0),R=e([l("esri.layers.graphics.sources.MemorySource")],R);var S=R;export default S;export{R as MemorySource};
