/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import{isSome as t}from"../../../core/maybe.js";import"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{property as r}from"../../../core/accessorSupport/decorators/property.js";import{subclass as o}from"../../../core/accessorSupport/decorators/subclass.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import s from"../../../core/Accessor.js";import{featureGeometryTypeKebabDictionary as i}from"../../../geometry/support/typeUtils.js";import"../../../geometry.js";import{EsriPromiseMixin as a}from"../../../core/Promise.js";import n from"../../../Graphic.js";import{HandleOwnerMixin as c}from"../../../core/HandleOwner.js";import p from"../data/StreamFeatureManager.js";import{createConnection as h}from"../sources/connections/createConnection.js";import{EventedSet as d}from"../../../views/3d/support/EventedSet.js";var l;const u=2500;let m=l=class extends n{getObjectId(){return this.objectId}clone(){return new l({objectId:this.objectId,...this.cloneProperties()})}};e([r({type:Number,json:{read:!0}})],m.prototype,"objectId",void 0),m=l=e([o("esri.layers.graphics.controllers.StreamGraphic")],m);class y{constructor(e){this.onUpdate=e,this._idToGraphic=new Map}destroy(){this._idToGraphic.clear()}add(e){this._idToGraphic.set(e.objectId,e)}get(e){return this._idToGraphic.get(e)}forEach(e){this._idToGraphic.forEach(e)}removeById(e){const t=this._idToGraphic.get(e);return t?(t.sourceLayer=t.layer=null,this._idToGraphic.delete(e),t):null}update(e,t){this.onUpdate(e,t)}get size(){return this._idToGraphic.size}}let f=class extends(c(a(s))){constructor(){super(...arguments),this._updateInfo={websocket:0,client:0},this.graphics=new d}initialize(){this.addResolvingPromise(this.layer.when((()=>this._startup())))}destroy(){this.clear()}clear(){this._updateIntervalId&&(clearInterval(this._updateIntervalId),this._updateIntervalId=0),this.connection&&(this.connection.destroy(),this.connection=null),this.store&&(this.store.destroy(),this.store=null),this.graphics.clear(),this.handles.removeAll()}get updating(){return!this.connection||"connected"===this.connection.connectionStatus}_startup(){const{parsedUrl:e,spatialReference:t,definitionExpression:r,geometryDefinition:o,objectIdField:s,timeInfo:a,purgeOptions:n,maxReconnectionAttempts:c,maxReconnectionInterval:d,updateInterval:l}=this.layer,m=i.toJSON(this.layer.geometryType),f=t,g=this.layerView.view.spatialReference,_={geometry:o,where:r};this.clear(),this._set("connection",h(e,f,g,m,_,c,d)),this._outSpatialReference=g.toJSON(),this.store=new y(this._onUpdate.bind(this)),this.featuresManager=new p(this.store,s,a.toJSON(),n),this.handles.add([this.connection.on("feature",(e=>this._onFeature(e))),this.layer.watch("definitionExpression",(()=>this._startup())),this.layer.watch("geometryDefinition",(()=>this._startup())),this.layer.watch("purgeOptions",(()=>this._startup()))]);let I=performance.now();this._updateIntervalId=setInterval((()=>{const e=performance.now(),t=e-I;if(t>u){I=e;const r=Math.round(this._updateInfo.client/(t/1e3)),o=Math.round(this._updateInfo.websocket/(t/1e3));this._updateInfo.client=0,this._updateInfo.websocket=0,this.layerView.emit("update-rate",{client:r,websocket:o})}this.featuresManager.checkForUpdates()}),l)}_onFeature(e){this._updateInfo.websocket++,this.layerView.hasEventListener("data-received")&&this.layerView.emit("data-received",{attributes:e.attributes,centroid:e.centroid,geometry:e.geometry});try{e.geometry&&!e.geometry.spatialReference&&(e.geometry.spatialReference=this._outSpatialReference),this.featuresManager.add(m.fromJSON(e))}catch{}}_onUpdate(e,r){t(r)&&this.graphics.removeMany(r),t(e)&&(this._updateInfo.client+=e.length,this.graphics.addMany(e))}};e([r()],f.prototype,"connection",void 0),e([r()],f.prototype,"layer",void 0),e([r()],f.prototype,"layerView",void 0),e([r({readOnly:!0})],f.prototype,"updating",null),f=e([o("esri.layers.graphics.controllers.StreamController")],f);var g=f;export default g;
