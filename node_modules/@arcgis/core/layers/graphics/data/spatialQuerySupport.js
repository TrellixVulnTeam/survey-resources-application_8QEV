/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import e from"../../../core/Error.js";import{isValid as r}from"../../../geometry/support/spatialReferenceUtils.js";import{extentContainsPoint as t,extentContainsMultipoint as i}from"../../../geometry/support/contains.js";import{getExtentIntersector as s}from"../../../geometry/support/intersects.js";import{isPolygon as o,isExtent as n,getJsonType as l}from"../../../geometry/support/jsonUtils.js";import a from"../OptimizedGeometry.js";import{convertFromPolygon as p}from"../featureConversionUtils.js";import{polygonContainsPoint as m,polygonContainsMultipoint as u}from"../contains.js";import{checkProjectionSupport as y}from"./projectionSupport.js";import{getGeometry as f}from"./utils.js";const c="feature-store:unsupported-query",R={esriSpatialRelIntersects:"intersects",esriSpatialRelContains:"contains",esriSpatialRelCrosses:"crosses",esriSpatialRelDisjoint:"disjoint",esriSpatialRelEnvelopeIntersects:"intersects",esriSpatialRelIndexIntersects:null,esriSpatialRelOverlaps:"overlaps",esriSpatialRelTouches:"touches",esriSpatialRelWithin:"within",esriSpatialRelRelation:null},S={spatialRelationship:{esriSpatialRelIntersects:!0,esriSpatialRelContains:!0,esriSpatialRelWithin:!0,esriSpatialRelCrosses:!0,esriSpatialRelDisjoint:!0,esriSpatialRelTouches:!0,esriSpatialRelOverlaps:!0,esriSpatialRelEnvelopeIntersects:!0,esriSpatialRelIndexIntersects:!1,esriSpatialRelRelation:!1},queryGeometry:{esriGeometryPoint:!0,esriGeometryMultipoint:!0,esriGeometryPolyline:!0,esriGeometryPolygon:!0,esriGeometryEnvelope:!0},layerGeometry:{esriGeometryPoint:!0,esriGeometryMultipoint:!0,esriGeometryPolyline:!0,esriGeometryPolygon:!0,esriGeometryEnvelope:!1}};function G(e){return!0===S.spatialRelationship[e]}function g(e){return!0===S.queryGeometry[l(e)]}function j(e){return!0===S.layerGeometry[e]}function h(){return import("../../../geometry/geometryEngineJSON.js")}function v(e,r,l,y,c){if(o(r)&&"esriGeometryPoint"===l&&("esriSpatialRelIntersects"===e||"esriSpatialRelContains"===e)){const e=p(new a,r,!1,!1);return Promise.resolve((r=>m(e,!1,!1,r)))}if(o(r)&&"esriGeometryMultipoint"===l){const t=p(new a,r,!1,!1);if("esriSpatialRelContains"===e)return Promise.resolve((e=>u(t,!1,!1,e,y,c)))}if(n(r)&&"esriGeometryPoint"===l&&("esriSpatialRelIntersects"===e||"esriSpatialRelContains"===e))return Promise.resolve((e=>t(r,f(l,y,c,e))));if(n(r)&&"esriGeometryMultipoint"===l&&"esriSpatialRelContains"===e)return Promise.resolve((e=>i(r,f(l,y,c,e))));if(n(r)&&"esriSpatialRelIntersects"===e){const e=s(l);return Promise.resolve((t=>e(r,f(l,y,c,t))))}return h().then((t=>{const i=t[R[e]].bind(null,r.spatialReference,r);return e=>i(f(l,y,c,e))}))}async function P(t,i,s){const{spatialRel:o,geometry:n}=t;if(n){if(!G(o))throw new e(c,"Unsupported query spatial relationship",{query:t});if(r(n.spatialReference)&&r(s)){if(!g(n))throw new e(c,"Unsupported query geometry type",{query:t});if(!j(i))throw new e(c,"Unsupported layer geometry type",{query:t});if(t.outSR)return y(t.geometry&&t.geometry.spatialReference,t.outSR)}}}function I(e){if(n(e))return!0;if(o(e)){for(const r of e.rings){if(5!==r.length)return!1;if(r[0][0]!==r[1][0]||r[0][0]!==r[4][0]||r[2][0]!==r[3][0]||r[0][1]!==r[3][1]||r[0][1]!==r[4][1]||r[1][1]!==r[2][1])return!1}return!0}return!1}export{I as canQueryWithRBush,P as checkSpatialQuerySupport,v as getSpatialQueryOperator};
