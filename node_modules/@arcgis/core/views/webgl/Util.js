/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import"../../core/has.js";import{isNone as e}from"../../core/maybe.js";function r(e,r){return e.vertexBuffers[r].size/t(e.layout[r])}function t(e){return e[0].stride}function n(e){switch(e){case 5126:case 5124:case 5125:return 4;case 5122:case 5123:return 2;case 5120:case 5121:return 1;default:throw new Error("Unknown data type")}}function i(e){switch(e){case 5120:return Int8Array;case 5126:return Float32Array;case 5124:return Int32Array;case 5122:return Int16Array;case 5121:return Uint8Array;case 5125:return Uint32Array;case 5123:return Uint16Array;default:throw new Error("Unknown data type")}}function s(e,r,t,i,s,o){const a=n(i);if(e.length>0){const n=e[0].stride,c=n+a*t;e.forEach((e=>e.stride=c)),e.push({name:r,count:t,type:i,offset:n,stride:c,normalized:s,divisor:o})}else e.push({name:r,count:t,type:i,offset:0,stride:a*t,normalized:s,divisor:o})}function o(e,r){for(let t=0;t<e.length;t++)if(e[t].name===r)return!0;return!1}function a(e,r){for(let t=0;t<e.length;t++)if(e[t].name===r)return e[t];return null}function c(e,r,t,n,i=0){const s=e.getBoundFramebufferObject(),o=e.getBoundTexture(0);e.bindFramebuffer(r),e.bindTexture(t,0),e.gl.copyTexImage2D(e.gl.TEXTURE_2D,i,t.descriptor.pixelFormat,n[0],n[1],n[2],n[3],0),e.gl.flush(),e.bindFramebuffer(s),e.bindTexture(o,0)}function u(e,r){const t={};for(const n in e)t[n]=e[n].map((e=>e.divisor?{...e,baseInstance:r}:e));return t}function f(e,r,t,n,i){const s=e.gl,o=e.capabilities.instancing;e.bindBuffer(t);for(const a of n){const e=r[a.name],t=(i||(0+a.baseInstance?a.baseInstance:0))*a.stride;if(void 0===e&&console.error(`There is no location for vertex attribute '${a.name}' defined.`),a.baseInstance&&!a.divisor&&console.error(`Vertex attribute '${a.name}' uses baseInstanceOffset without divisor.`),a.count<=4)s.vertexAttribPointer(e,a.count,a.type,a.normalized,a.stride,a.offset+t),s.enableVertexAttribArray(e),a.divisor&&a.divisor>0&&o&&o.vertexAttribDivisor(e,a.divisor);else if(9===a.count)for(let r=0;r<3;r++)s.vertexAttribPointer(e+r,3,a.type,a.normalized,a.stride,a.offset+12*r+t),s.enableVertexAttribArray(e+r),a.divisor&&a.divisor>0&&o&&o.vertexAttribDivisor(e+r,a.divisor);else if(16===a.count)for(let r=0;r<4;r++)s.vertexAttribPointer(e+r,4,a.type,a.normalized,a.stride,a.offset+16*r+t),s.enableVertexAttribArray(e+r),a.divisor&&a.divisor>0&&o&&o.vertexAttribDivisor(e+r,a.divisor);else console.error("Unsupported vertex attribute element count: "+a.count)}}function d(e,r,t,n){const i=e.gl,s=e.capabilities.instancing;e.bindBuffer(t);for(const o of n){const e=r[o.name];if(o.count<=4)i.disableVertexAttribArray(e),o.divisor&&o.divisor>0&&s&&s.vertexAttribDivisor(e,0);else if(9===o.count)for(let r=0;r<3;r++)i.disableVertexAttribArray(e+r),o.divisor&&o.divisor>0&&s&&s.vertexAttribDivisor(e+r,0);else if(16===o.count)for(let r=0;r<4;r++)i.disableVertexAttribArray(e+r),o.divisor&&o.divisor>0&&s&&s.vertexAttribDivisor(e+r,0);else console.error("Unsupported vertex attribute element count: "+o.count)}e.unbindBuffer(34962)}function l(e){switch(e){case 6406:case 6409:case 36168:return 1;case 6410:case 32854:case 33325:case 32854:case 33189:return 2;case 6407:case 6402:return 3;case 6408:case 34041:case 33326:case 35898:case 33327:case 34041:return 4;case 33328:case 34842:return 8;case 34836:return 16;case 33776:case 33777:return.5;case 33778:case 33779:return 1;case 37488:case 37489:case 37492:case 37493:case 37494:case 37495:return.5;case 37490:case 37491:case 37496:case 37497:return 1}return 0}function b(r){if(e(r))return 0;if("colorAttachment"in r)return r.glName?b(r.colorAttachment)+b(r.depthStencilAttachment):0;if("descriptor"in r)return r.glName?b(r.descriptor):0;const t=r.internalFormat||"pixelFormat"in r&&r.pixelFormat;if(!t)return 0;const n="hasMipmap"in r&&r.hasMipmap?1.3:1,i=r.width*r.height;return l(t)*i*n}export{s as addDescriptor,f as bindVertexBufferLayout,c as copyFramebufferToTexture,a as findAttribute,n as getBytesPerElement,l as getBytesPerElementFormat,b as getGpuMemoryUsage,t as getStride,i as getTypedArrayConstructor,o as hasAttribute,u as setBaseInstanceOffset,d as unbindVertexBufferLayout,r as vertexCount};
