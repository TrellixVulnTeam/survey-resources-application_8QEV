/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import{isNone as t,isSome as s,abortMaybe as i,unwrap as o,get as r}from"../../../core/maybe.js";import"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{property as n}from"../../../core/accessorSupport/decorators/property.js";import{subclass as a}from"../../../core/accessorSupport/decorators/subclass.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import{createTask as h}from"../../../core/promiseUtils.js";import c from"../../../geometry/Point.js";import{geometryToCoordinates as l,getMidpoint as p}from"../../../geometry/support/coordsUtils.js";import"../../../geometry.js";import d from"../../../core/Evented.js";import m from"../../../symbols/SimpleMarkerSymbol.js";import v from"../../../Graphic.js";import y from"../../../core/Handles.js";import{whenOnce as _,pausable as g}from"../../../core/watchUtils.js";import{ViewEventPriorities as u}from"../../input/InputManager.js";import{settings as f}from"./settings.js";import{SnappingVisualizer2D as x}from"../../2d/interactive/SnappingVisualizer2D.js";import{EditGeometry as G}from"../../interactive/editGeometry/EditGeometry.js";import{EditGeometryHelper as b}from"../../interactive/editGeometry/EditGeometryHelper.js";import{SnappingContext as S}from"../../interactive/snapping/SnappingContext.js";import{cloneMove as H}from"./drawUtils.js";import{addUniqueLayer as w}from"./layerUtils.js";import M from"./GraphicMover.js";class k{constructor(e,t,s){this.graphic=e,this.mover=t,this.selected=s,this.type="reshape-start"}}class E{constructor(e,t,s){this.graphic=e,this.mover=t,this.selected=s,this.type="reshape"}}class V{constructor(e,t,s){this.graphic=e,this.mover=t,this.selected=s,this.type="reshape-stop"}}class I{constructor(e,t,s){this.mover=e,this.dx=t,this.dy=s,this.type="move-start"}}class C{constructor(e,t,s){this.mover=e,this.dx=t,this.dy=s,this.type="move"}}class R{constructor(e,t,s){this.mover=e,this.dx=t,this.dy=s,this.type="move-stop"}}class j{constructor(e){this.added=e,this.type="vertex-select"}}class A{constructor(e){this.removed=e,this.type="vertex-deselect"}}class D{constructor(e,t,s,i){this.added=e,this.graphic=t,this.oldGraphic=s,this.vertices=i,this.type="vertex-add"}}class O{constructor(e,t,s,i){this.removed=e,this.graphic=t,this.oldGraphic=s,this.vertices=i,this.type="vertex-remove"}}const z={removeVertex:["Backspace","Delete"]},T=f.reshapeGraphics,F={vertices:{default:new m({style:"circle",size:T.vertex.size,color:T.vertex.color,outline:{color:T.vertex.outlineColor,width:1}}),hover:new m({style:"circle",size:T.vertex.hoverSize,color:T.vertex.hoverColor,outline:{color:T.vertex.hoverOutlineColor,width:1}}),selected:new m({style:"circle",size:T.selected.size,color:T.selected.color,outline:{color:T.selected.outlineColor,width:1}})},midpoints:{default:new m({style:"circle",size:T.midpoint.size,color:T.midpoint.color,outline:{color:T.midpoint.outlineColor,width:1}}),hover:new m({style:"circle",size:T.midpoint.size,color:T.midpoint.color,outline:{color:T.midpoint.outlineColor,width:1}})}};let U=class extends d.EventedAccessor{constructor(e){super(e),this._handles=new y,this._graphicAttributes={esriSketchTool:"box"},this._mover=null,this._snappingTask=null,this._stagedVertex=null,this._totalDx=0,this._totalDy=0,this._viewHandles=new y,this.callbacks={onReshapeStart(){},onReshape(){},onReshapeStop(){},onMoveStart(){},onMove(){},onMoveStop(){},onGraphicClick(){}},this.enableMidpoints=!0,this.graphic=null,this.handleGraphics=[],this.layer=null,this.midpointGraphics=[],this.midpointSymbol=new m({style:"circle",size:6,color:[200,200,200],outline:{color:[100,100,100],width:1}}),this.selectedHandles=[],this.snappingManager=null,this.type="reshape",this.view=null}initialize(){this._setup(),this._handles.add([_(this,"view.ready",(()=>{const{layer:e,view:t}=this;w(t,e),this._viewHandles.add([t.on("key-down",(e=>this._keyDownHandler(e)),u.TOOL)])})),g(this,"graphic",(()=>this.refresh())),g(this,"layer",((e,t)=>{t&&(this._clearSelection(),this._resetGraphics(t)),this.refresh()})),g(this,"enableMidpoints",(()=>{this.refresh()}))])}destroy(){this._reset(),this._mover&&this._mover.destroy(),this._mover=null,this._handles.removeAll(),this._handles=null,this._viewHandles.removeAll(),this._viewHandles=null}get state(){const e=!!this.get("view.ready"),t=!(!this.get("graphic")||!this.get("layer"));return e&&t?"active":e?"ready":"disabled"}set symbols(e){const{midpoints:t=F.midpoints,vertices:s=F.vertices}=e||{};this._set("symbols",{midpoints:t,vertices:s})}isUIGraphic(e){const t=[];return this.graphic&&t.push(this.graphic),t.concat(this.handleGraphics,this.midpointGraphics),t.length&&t.includes(e)}refresh(){this._reset(),this._setup()}reset(){this.graphic=null}clearSelection(){this._clearSelection()}removeSelectedHandles(){this.selectedHandles.length&&this._removeVertex(this.selectedHandles)}_setup(){this.graphic&&this.layer&&(this._setupGraphics(),this._setupMover())}_setUpGeometryHelper(){const e=this.graphic.geometry;t(e)||"polygon"!==e.type&&"polyline"!==e.type||(this._geometryHelper=new b(G.fromGeometry(e,"local"),e.type))}_saveSnappingContextForHandle(e,t){var s;this._snappingContext=new S({geometry:this._geometryHelper,elevationInfo:{mode:"on-the-ground",offset:0},pointer:(null==(s=t.viewEvent)?void 0:s.pointerType)||"mouse",excludeFeature:this.graphic,visualizer:new x,vertexHandle:this._getVertexFromEditGeometry(e)})}_reset(){this._clearSelection(),this._resetGraphicStateVars(),this._resetGraphics(),this._resetSnappingStateVars(),this._mover&&this._mover.destroy(),this._mover=null,this.view.cursor="default"}_resetSnappingStateVars(){var e;s(this.snappingManager)&&this.snappingManager.doneSnapping(),null==(e=this._geometryHelper)||e.destroy(),this._geometryHelper=null,this._snappingTask=i(this._snappingTask),this._snappingTask=null,this._snappingContext=null,this._stagedVertex=null}_resetGraphicStateVars(){this._totalDx=0,this._totalDy=0}_resetGraphics(e){const t=e||this.layer;t&&(t.removeMany(this.handleGraphics),t.removeMany(this.midpointGraphics)),this.handleGraphics.forEach((e=>e.destroy())),this.midpointGraphics.forEach((e=>e.destroy())),this._set("handleGraphics",[]),this._set("midpointGraphics",[]),this._set("selectedHandles",[])}_setupGraphics(){const e=o(this.graphic.geometry),t=l(e.clone());if("polygon"===e.type)for(const s of t){const e=s[s.length-1];s[0][0]===e[0]&&s[0][1]===e[1]&&s.length>2&&s.pop()}this._set("handleGraphics",this._createHandleGraphics(t)),this.enableMidpoints&&this._set("midpointGraphics",this._createMidpointGraphics(t)),this._saveRelatedIndices(this.handleGraphics),this.layer.addMany(this.midpointGraphics),this.layer.addMany(this.handleGraphics)}_createHandleGraphics(e){const{_graphicAttributes:t,symbols:s,view:{spatialReference:i}}=this,o=[];return null==e||e.forEach(((e,r)=>{e.forEach(((e,n)=>{var a;const[h,l]=e;o.push(new v({geometry:new c({x:h,y:l,spatialReference:i}),symbol:null==s||null==(a=s.vertices)?void 0:a.default,attributes:{...t,pathIndex:r,pointIndex:n}}))}))})),o}_createMidpointGraphics(e){const{_graphicAttributes:t,symbols:s,view:{spatialReference:i}}=this,o=[];return null==e||e.forEach(((e,n)=>{e.forEach(((a,h)=>{const[l,d]=a,m=e[h+1]?h+1:0;if("polygon"===r(this.graphic.geometry,"type")||0!==m){const[r,a]=e[m],[y,_]=p([l,d],[r,a]);o.push(new v({geometry:new c({x:y,y:_,spatialReference:i}),symbol:s.midpoints.default,attributes:{...t,pathIndex:n,pointIndexStart:h,pointIndexEnd:m}}))}}))})),o}_saveRelatedIndices(e){if(!e)return;const t=e.map((({geometry:e})=>({x:e.x,y:e.y})));for(let s=0;s<t.length;s++){const i=[];for(let e=0;e<t.length;e++){if(s===e)continue;const o=t[s],r=t[e];o.x===r.x&&o.y===r.y&&i.push(e)}e[s].attributes.relatedGraphicIndices=i}}_setupMover(){this._mover=new M({enableMoveAllGraphics:!1,graphics:[].concat(this.handleGraphics,this.midpointGraphics,this.graphic),view:this.view,callbacks:{onGraphicClick:e=>this._onGraphicClickCallback(e),onGraphicMoveStart:e=>this._onGraphicMoveStartCallback(e),onGraphicMove:e=>this._onGraphicMoveCallback(e),onGraphicMoveStop:e=>this._onGraphicMoveStopCallback(e),onGraphicPointerOver:e=>this._onGraphicPointerOverCallback(e),onGraphicPointerOut:e=>this._onGraphicPointerOutCallback(e)}})}_onGraphicClickCallback(e){e.viewEvent.stopPropagation();const t=e.graphic;if(t===this.graphic)this.clearSelection(),this.emit("graphic-click",e),this.callbacks.onGraphicClick&&this.callbacks.onGraphicClick(e);else if(this._isMidpoint(t)){if(2===e.viewEvent.button)return;const s=this.graphic.clone(),i=this._createHandleFromMidpoint(t);this.refresh(),this._emitVertexAddEvent([t],s,i)}else if(this._isHandle(t))if(e.viewEvent.stopPropagation(),2===e.viewEvent.button)this._removeVertex(t);else{e.viewEvent.native.shiftKey||this._clearSelection(),this.selectedHandles.includes(t)?this._removeFromSelection(t,!0):this._addToSelection(t)}}_onGraphicMoveStartCallback(e){const t=e.graphic,{dx:s,dy:i}=e;if(this._resetGraphicStateVars(),this._resetSnappingStateVars(),t===this.graphic)return this.handleGraphics.forEach((e=>e.visible=!1)),this.midpointGraphics.forEach((e=>e.visible=!1)),this._clearSelection(),void this._emitMoveStartEvent(s,i);if(this._isMidpoint(t)){this._clearSelection();const e=this.graphic.clone(),s=this._createHandleFromMidpoint(t);this._emitVertexAddEvent([t],e,s),this._addToSelection(t)}else this.selectedHandles.includes(t)||(this._clearSelection(),this._addToSelection(t));this._setUpGeometryHelper(),this._saveSnappingContextForHandle(t,e),this._onHandleMove(t,s,i,e),this._emitReshapeStartEvent(t)}_onGraphicMoveCallback(e){const{graphic:t,dx:s,dy:i}=e;this._totalDx+=s,this._totalDy+=i,t===this.graphic?(this._syncGraphicsWithGeometry(),this._emitMoveEvent(s,i)):(this._onHandleMove(t,s,i,e),this._emitReshapeEvent(t))}_onGraphicMoveStopCallback(e){const{graphic:t,dx:s,dy:i}=e;if(this._totalDx+=s,this._totalDy+=i,t===this.graphic){this._syncGraphicsWithGeometry();for(const e of[].concat(this.handleGraphics,this.midpointGraphics))e.visible=!0;this._emitMoveStopEvent(),this._resetGraphicStateVars()}else this._onHandleMove(t,s,i,e),this._resetSnappingStateVars(),this._isMidpoint(t)&&this.refresh(),this._emitReshapeStopEvent(t),this._resetGraphicStateVars()}_syncGraphicsWithGeometry(){const e=this.graphic.geometry,t="polyline"===e.type?e.paths:e.rings;this._updateHandleGraphicLocations(t),this._updateMidpointGraphicLocations(t)}_updateHandleGraphicLocations(e){for(const t of this.handleGraphics){const{pathIndex:s,pointIndex:i}=t.attributes,[o,r]=e[s][i];t.set("geometry",new c(o,r,this.view.spatialReference))}}_updateMidpointGraphicLocations(e){for(const t of this.midpointGraphics){const{pathIndex:s,pointIndexStart:i,pointIndexEnd:o}=t.attributes,[r,n]=e[s][i],[a,h]=e[s][o],[l,d]=p([r,n],[a,h]);t.geometry=new c({x:l,y:d,spatialReference:this.view.spatialReference})}}_getVertexFromEditGeometry(e){var t;const{pathIndex:s,pointIndex:i}=e.attributes;return null==(t=this._geometryHelper)?void 0:t.editGeometry.components[s].vertices[i]}_onHandleMove(e,t,o,r){i(this._snappingTask);const n=e.geometry,a="graphic-move-stop"===r.type;if(s(this.snappingManager)&&1===this.selectedHandles.length&&!a){const s=this.snappingManager;this._stagedVertex=s.update(n,this._snappingContext),this._syncGeometryAfterHandleMove(e,new c(this._stagedVertex),t,o,a),this._emitReshapeEvent(e),this._snappingTask=h((async i=>{const r=await s.snap(n,this._snappingContext,i);r.valid&&(this._stagedVertex=r.apply(),this._syncGeometryAfterHandleMove(e,new c(this._stagedVertex),t,o,a),this._emitReshapeEvent(e))}))}else{const i=s(this._stagedVertex)?new c(this._stagedVertex):n;this._syncGeometryAfterHandleMove(e,i,t,o,a),"graphic-move"===r.type&&this._emitReshapeEvent(e)}}async _syncGeometryAfterHandleMove(e,t,s,i,o=!1){const{x:r,y:n}=t,a=this._getUpdatedGeometryAfterHandleMove(e,t);let h="polyline"===a.type?a.paths:a.rings;this._isHandle(e)&&(h=this._moveRelatedCoordinates(h,e,r,n),h=this._moveSelectedHandleCoordinates(h,e,s,i,"polygon"===a.type),this._updateMidpointGraphicLocations(h)),this.graphic.geometry=a,this._syncEditGeometryAfterHandleMove(e,r,n),o&&(e.geometry=t)}_getUpdatedGeometryAfterHandleMove(e,t){const{x:s,y:i}=t,r=o(this.graphic.geometry).clone(),n="polyline"===r.type?r.paths:r.rings,{pathIndex:a,pointIndex:h}=e.attributes,c=n[a].length-1;return n[a][h]=[s,i],"polygon"===r.type&&(0===h?n[a][c]=[s,i]:h===c&&(n[a][0]=[s,i])),r}_moveRelatedCoordinates(e,t,s,i){const{relatedGraphicIndices:o}=t.attributes;for(const r of o){const o=this.handleGraphics[r],{pathIndex:n,pointIndex:a}=o.attributes;e[n][a]=[s,i],o.geometry=t.geometry}return e}_moveSelectedHandleCoordinates(e,t,s,i,o){for(const r of this.selectedHandles)if(r!==t){const{pathIndex:t,pointIndex:n,relatedGraphicIndices:a}=r.attributes,h=H(r.geometry,s,i,this.view),c=e[t].length-1;e[t][n]=[h.x,h.y],r.geometry=h,o&&(0===n?e[t][c]=[h.x,h.y]:n===c&&(e[t][0]=[h.x,h.y]));for(const s of a){const t=this.handleGraphics[s],{pathIndex:i,pointIndex:o}=t.attributes;e[i][o]=[h.x,h.y],t.geometry=h}}return e}_syncEditGeometryAfterHandleMove(e,t,s){const i=this._getVertexFromEditGeometry(e),o=t-i.pos[0],r=s-i.pos[1];this._geometryHelper.moveVertices([i],o,r,0)}_onGraphicPointerOverCallback(e){const t=e.graphic;this._isHandle(t)&&!this._isSelected(t)&&(t.symbol=this.symbols.vertices.hover),this._updateHoverCursor(t)}_onGraphicPointerOutCallback(e){const t=e.graphic;this._isHandle(t)&&!this._isSelected(t)&&(t.symbol=this.symbols.vertices.default),this.view.cursor="default"}_createHandleFromMidpoint(e){const{_graphicAttributes:t}=this,s=[],i=o(this.graphic.geometry).clone(),{pathIndex:r,pointIndexStart:n,pointIndexEnd:a}=e.attributes,{x:h,y:c}=e.geometry,l=0===a?n+1:a,p="polyline"===i.type?i.paths:i.rings;return p[r].splice(l,0,[h,c]),e.attributes={...t,pathIndex:r,pointIndex:l,relatedGraphicIndices:[]},s.push({coordinates:p[r][l],componentIndex:r,vertexIndex:l}),this.graphic.geometry=i,s}_removeHandles(e){const t=o(this.graphic.geometry).clone(),s="polygon"===t.type?t.rings:t.paths,i=[];e instanceof v&&(e=[e]);for(const o of e){const{x:e,y:t}=o.geometry;for(let o=0;o<s.length;o++){const r=s[o];for(let n=0;n<r.length;n++){const[a,h]=r[n];e===a&&t===h&&(i.push({coordinates:s[o][n],componentIndex:o,vertexIndex:n}),s[o].splice(Number(n),1))}}}if("polygon"===t.type)for(const o of s){const[e,t]=o[0],[i,r]=o[o.length-1];(1===o.length||o.length<3&&e===i&&t===r)&&s.splice(s.indexOf(o),1),o.length>2&&(e!==i||t!==r)&&o.push(o[0])}else for(const o of s)1===o.length&&s.splice(s.indexOf(o),1);return this.graphic.geometry=t,i}_addToSelection(e){e instanceof v&&(e=[e]);for(const t of e)t.symbol=this.symbols.vertices.selected;this._set("selectedHandles",this.selectedHandles.concat(e)),this._emitSelectEvent(e)}_removeFromSelection(e,t){const{vertices:s}=this.symbols,i=t?s.hover:s.default;e instanceof v&&(e=[e]);for(const o of e)this.selectedHandles.splice(this.selectedHandles.indexOf(o),1),this._set("selectedHandles",this.selectedHandles),o.set("symbol",i);this._emitDeselectEvent(e)}_clearSelection(){if(this.selectedHandles.length){const e=this.selectedHandles;for(const t of this.selectedHandles)t.set("symbol",this.symbols.vertices.default);this._set("selectedHandles",[]),this._emitDeselectEvent(e)}}_keyDownHandler(e){z.removeVertex.includes(e.key)&&!e.repeat&&this.selectedHandles.length&&this._removeVertex(this.selectedHandles)}_removeVertex(e){if("polygon"===this.graphic.geometry.type&&this.handleGraphics.length<4||this.handleGraphics.length<3)return;const t=this.graphic.clone();e instanceof v&&(e=[e]);const s=this._removeHandles(e);this.refresh(),this._emitVertexRemoveEvent(e,t,s)}_isHandle(e){return this.handleGraphics.includes(e)}_isSelected(e){return this._isHandle(e)&&this.selectedHandles.includes(e)}_isMidpoint(e){return this.midpointGraphics.includes(e)}_updateHoverCursor(e){this.view.cursor=this._isMidpoint(e)?"copy":"move"}_emitMoveStartEvent(e,t){const s=new I(this.graphic,e,t);this.emit("move-start",s),this.callbacks.onMoveStart&&this.callbacks.onMoveStart(s)}_emitMoveEvent(e,t){const s=new C(this.graphic,e,t);this.emit("move",s),this.callbacks.onMove&&this.callbacks.onMove(s)}_emitMoveStopEvent(){const e=new R(this.graphic,this._totalDx,this._totalDy);this.emit("move-stop",e),this.callbacks.onMoveStop&&this.callbacks.onMoveStop(e)}_emitReshapeStartEvent(e){const t=new k(this.graphic,e,this.selectedHandles);this.emit("reshape-start",t),this.callbacks.onReshapeStart&&this.callbacks.onReshapeStart(t)}_emitReshapeEvent(e){const t=new E(this.graphic,e,this.selectedHandles);this.emit("reshape",t),this.callbacks.onReshape&&this.callbacks.onReshape(t)}_emitReshapeStopEvent(e){const t=new V(this.graphic,e,this.selectedHandles);this.emit("reshape-stop",t),this.callbacks.onReshapeStop&&this.callbacks.onReshapeStop(t)}_emitSelectEvent(e){const t=new j(e);this.emit("select",t),this.callbacks.onVertexSelect&&this.callbacks.onVertexSelect(t)}_emitDeselectEvent(e){const t=new A(e);this.emit("deselect",t),this.callbacks.onVertexDeselect&&this.callbacks.onVertexDeselect(t)}_emitVertexAddEvent(e,t,s){const i=new D(e,this.graphic,t,s);this.emit("vertex-add",i),this.callbacks.onVertexAdd&&this.callbacks.onVertexAdd(i)}_emitVertexRemoveEvent(e,t,s){const i=new O(e,this.graphic,t,s);this.emit("vertex-remove",i),this.callbacks.onVertexRemove&&this.callbacks.onVertexRemove(i)}};e([n()],U.prototype,"callbacks",void 0),e([n()],U.prototype,"enableMidpoints",void 0),e([n()],U.prototype,"graphic",void 0),e([n({readOnly:!0})],U.prototype,"handleGraphics",void 0),e([n()],U.prototype,"layer",void 0),e([n({readOnly:!0})],U.prototype,"midpointGraphics",void 0),e([n()],U.prototype,"midpointSymbol",void 0),e([n({readOnly:!0})],U.prototype,"selectedHandles",void 0),e([n()],U.prototype,"snappingManager",void 0),e([n({readOnly:!0})],U.prototype,"state",null),e([n({value:F})],U.prototype,"symbols",null),e([n({readOnly:!0})],U.prototype,"type",void 0),e([n()],U.prototype,"view",void 0),U=e([a("esri.views.draw.support.Reshape")],U);var P=U;export default P;
