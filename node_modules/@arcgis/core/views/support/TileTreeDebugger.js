/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../core/has.js";import{isSome as s,isNone as o}from"../../core/maybe.js";import"../../core/Logger.js";import"../../core/accessorSupport/ensureType.js";import{property as t}from"../../core/accessorSupport/decorators/property.js";import{subclass as r}from"../../core/accessorSupport/decorators/subclass.js";import"../../core/urlUtils.js";import"../../core/uuid.js";import"../../portal/support/resourceExtension.js";import i from"../../core/Accessor.js";import{lerp as l}from"../../core/mathUtils.js";import a from"../../Color.js";import n from"../../symbols/TextSymbol3DLayer.js";import h from"../../symbols/PointSymbol3D.js";import p from"../../symbols/SimpleFillSymbol.js";import c from"../../symbols/TextSymbol.js";import m from"../../Graphic.js";const y=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let b=class extends i{constructor(e){super(e),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._enabled=!0}initialize(){this._symbols=y.map((e=>new p({color:[e[0],e[1],e[2],.6],outline:{color:"black",width:1}}))),this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this.update())}update(){if(!this._enabled)return void this.clear();const e=e=>{if(s(e.label))return e.label;let o=e.lij.toString();return s(e.loadPriority)&&(o+=` (${e.loadPriority})`),o},t=this.getTiles(),r=new Array,i=new Set((this._labels.size,this._labels.keys()));t.forEach(((p,y)=>{const b=p.lij.toString();i.delete(b);const g=p.lij[0],d=p.geometry;if(this.enablePolygons&&!this._polygons.has(b)){const e=new m({geometry:d,symbol:this._symbols[g%this._symbols.length]});this._polygons.set(b,e),r.push(e)}if(this.enableLabels){const i=e(p),g=y/(t.length-1),u=l(0,200,g),_=l(20,6,g)/.75,f=s(p.loadPriority)&&p.loadPriority>=t.length,w=new a([u,f?0:u,f?0:u]),j="3d"===this.view.type?()=>new h({verticalOffset:{screenLength:40/.75},callout:{type:"line",color:"white",border:{color:"black"}},symbolLayers:[new n({text:i,halo:{color:"white",size:1/.75},material:{color:w},size:_})]}):()=>new c({text:i,haloColor:"white",haloSize:1/.75,color:w,size:_});if(this._labels.has(b)){const e=this._labels.get(b),s=j();(o(e.symbol)||JSON.stringify(s)!==JSON.stringify(e.symbol))&&(e.symbol=s)}else{const e=new m({geometry:d.extent.center,symbol:j()});this._labels.set(b,e),r.push(e)}}}));const p=new Array;i.forEach((e=>{this._polygons.has(e)&&(p.push(this._polygons.get(e)),this._polygons.delete(e)),this._labels.has(e)&&(p.push(this._labels.get(e)),this._labels.delete(e))})),this.view.graphics.removeMany(p),this.view.graphics.addMany(r)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};e([t({constructOnly:!0})],b.prototype,"view",void 0),e([t({readOnly:!0})],b.prototype,"updating",void 0),e([t()],b.prototype,"enabled",null),b=e([r("esri.views.support.TileTreeDebugger")],b);export{b as TileTreeDebugger};
