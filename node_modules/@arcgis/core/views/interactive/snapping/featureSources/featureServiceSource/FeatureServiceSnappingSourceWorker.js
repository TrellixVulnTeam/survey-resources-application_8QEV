/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import"../../../../../core/has.js";import{isSome as t}from"../../../../../core/maybe.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import{property as r}from"../../../../../core/accessorSupport/decorators/property.js";import{subclass as i}from"../../../../../core/accessorSupport/decorators/subclass.js";import"../../../../../core/urlUtils.js";import"../../../../../core/uuid.js";import"../../../../../portal/support/resourceExtension.js";import{createDeferred as s,throwIfAborted as a,whenOrAbort as o}from"../../../../../core/promiseUtils.js";import n from"../../../../../geometry/SpatialReference.js";import p from"../../../../../core/Evented.js";import u from"../../../../../core/Handles.js";import{whenNotOnce as c}from"../../../../../core/watchUtils.js";import l from"../../../../../layers/support/TimeInfo.js";import h from"../../../../../tasks/support/Query.js";import{WatchUpdatingTracking as d}from"../../../../support/WatchUpdatingTracking.js";import f from"../../../../../layers/support/TileInfo.js";import m from"../../../../../layers/graphics/data/FeatureStore.js";import g from"../../../../../layers/graphics/data/QueryEngine.js";import{FeatureServiceTiledFetcher as y}from"./FeatureServiceTiledFetcher.js";import{FeatureServiceTileStore as S}from"./FeatureServiceTileStore.js";let w=class extends p.EventedAccessor{constructor(){super(...arguments),this.isInitializing=!0,this.whenSetup=s(),this.handles=new u,this.updatingHandles=new d,this.pendingApplyEdits=new Map}get updating(){return this.featureFetcher.updating||this.isInitializing||this.updatingHandles.updating}destroy(){this.featureFetcher.destroy(),this.queryEngine.destroy(),this.featureStore.clear(),this.handles.destroy()}async setup(e){const{geometryType:t,objectIdField:r,timeInfo:i,fields:s}=e.serviceInfo;return this.featureStore=new m({...e.serviceInfo,hasZ:!1,hasM:!1}),this.queryEngine=new g({spatialReference:e.spatialReference,featureStore:this.featureStore,geometryType:t,fields:s,hasZ:!1,hasM:!1,objectIdField:r,timeInfo:i?l.fromJSON(i):null}),this.featureFetcher=new y({store:new S({featureStore:this.featureStore}),url:e.serviceInfo.url,objectIdField:e.serviceInfo.objectIdField,capabilities:e.serviceInfo.capabilities,spatialReference:n.fromJSON(e.spatialReference),sourceSpatialReference:n.fromJSON(e.serviceInfo.spatialReference)}),this.handles.add([this.featureFetcher.watch("availability",(e=>this.emit("notify-availability",{availability:e})),!0),this.watch("updating",(()=>this.notifyUpdating()))]),this.whenSetup.resolve(),this.isInitializing=!1,this.configure(e.configuration)}async configure(e){return await this.updatingHandles.addPromise(this.whenSetup.promise),this.updateFeatureFetcherConfiguration(e),{result:{}}}async fetchCandidates(e,r){await this.whenSetup.promise,a(r);return{result:await this.queryEngine.executeQueryForSnapping({point:e.point,distance:e.distance,types:e.types,query:t(e.filter)?e.filter:{where:"1=1"}},t(r)?r.signal:null)}}async updateTiles(e,r){return await this.updatingHandles.addPromise(this.whenSetup.promise),a(r),this.featureFetcher.tileSize=e.tileSize,this.featureFetcher.tilesOfInterest=e.tiles,this.featureFetcher.tileInfo=t(e.tileInfo)?f.fromJSON(e.tileInfo):null,{result:{}}}async refresh(e,t){return await this.updatingHandles.addPromise(this.whenSetup.promise),a(t),this.featureFetcher.refresh(),{result:{}}}async whenNotUpdating(e,t){return await this.updatingHandles.addPromise(this.whenSetup.promise),a(t),await o(c(this,"updating"),t),{result:{}}}async getDebugInfo(e,t){return a(t),{result:this.featureFetcher.debugInfo}}async beginApplyEdits(e,t){this.updatingHandles.addPromise(this.whenSetup.promise),a(t);const r=s();return this.pendingApplyEdits.set(e.id,r),this.featureFetcher.applyEdits(r.promise),this.updatingHandles.addPromise(r.promise),{result:{}}}async endApplyEdits(e,t){const r=this.pendingApplyEdits.get(e.id);return r&&r.resolve(e.edits),a(t),{result:{}}}updateFeatureFetcherConfiguration(e){this.featureFetcher.filter=t(e.filter)?h.fromJSON(e.filter):null,this.featureFetcher.customParameters=e.customParameters}notifyUpdating(){this.emit("notify-updating",{updating:this.updating})}};function j(){return new w}e([r({readOnly:!0})],w.prototype,"updating",null),e([r()],w.prototype,"isInitializing",void 0),w=e([i("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceSnappingSourceWorker")],w);export default j;export{w as FeatureServiceSnappingSourceWorker};
