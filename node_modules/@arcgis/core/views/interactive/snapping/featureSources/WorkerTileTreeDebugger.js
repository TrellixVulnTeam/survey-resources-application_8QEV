/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import"../../../../core/has.js";import"../../../../core/Logger.js";import"../../../../core/accessorSupport/ensureType.js";import{makeHandle as t}from"../../../../core/handleUtils.js";import{property as r}from"../../../../core/accessorSupport/decorators/property.js";import{subclass as o}from"../../../../core/accessorSupport/decorators/subclass.js";import"../../../../core/urlUtils.js";import"../../../../core/uuid.js";import"../../../../portal/support/resourceExtension.js";import s from"../../../../geometry/Polygon.js";import i from"../../../../core/Handles.js";import{toExtent as a}from"../../../../geometry/support/aaBoundingRect.js";import{TileTreeDebugger as n}from"../../../support/TileTreeDebugger.js";let p=class extends n{constructor(e){super(e),this.handles=new i}initialize(){const e=setInterval((()=>this.fetchDebugInfo()),2e3);this.handles.add(t((()=>clearInterval(e))))}destroy(){this.handles.destroy()}getTiles(){if(!this.debugInfo)return[];const e=new Map,t=new Map;this.debugInfo.storedTiles.forEach((t=>{e.set(t.data.id,t.featureCount)})),this.debugInfo.pendingTiles.forEach((r=>{e.set(r.data.id,r.featureCount),t.set(r.data.id,r.state)}));const r=r=>{var o;const s=t.get(r),i=null!=(o=e.get(r))?o:"?";return s?`${s}:${i}\n${r}`:`store:${i}\n${r}`},o=new Map;return this.debugInfo.storedTiles.forEach((e=>{o.set(e.data.id,e.data)})),this.debugInfo.pendingTiles.forEach((e=>{o.set(e.data.id,e.data)})),Array.from(o.values()).map((e=>({lij:[e.level,e.row,e.col],geometry:s.fromExtent(a(e.extent,this.view.spatialReference)),label:r(e.id)})))}fetchDebugInfo(){this.handle.getDebugInfo(null).then((e=>{this.debugInfo=e,this.update()}))}};e([r({constructOnly:!0})],p.prototype,"handle",void 0),p=e([o("esri.views.interactive.snapping.featureSources.WorkerTileTreeDebugger")],p);export{p as WorkerTileTreeDebugger};
