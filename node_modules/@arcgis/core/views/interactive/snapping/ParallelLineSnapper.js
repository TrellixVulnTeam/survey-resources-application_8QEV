/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{unwrap as e}from"../../../core/maybe.js";import{a as t}from"../../../chunks/vec2f64.js";import{j as r}from"../../../chunks/vec2.js";import{defaults as o}from"./Settings.js";import{anyMapPointToScreenPoint as i,squareDistance as s}from"./snappingUtils.js";import{SnappingAlgorithm as n}from"./SnappingAlgorithm.js";import{projectPointToLine as l}from"../../support/geometry2dUtils.js";import{ParallelLineSnappingCandidate as a}from"./candidates/ParallelLineSnappingCandidate.js";class c extends n{constructor(){super(...arguments),this._tmpProjection=t()}snapNewVertex(e,t){const r=t.geometry.editGeometry.components[0],o=r.edges.length,s=r.vertices.length,n=[];if(o<2)return n;const l=i(e,t.coordinateHelper,t.elevationInfo,this.view),a=r.vertices[s-1],c=r.vertices[0],h=r.edges[o-1];let p=h;do{this.edgeExceedsShortLineThreshold(p,t)&&(this._checkEdgeForParalleLines(p,a.pos,e,l,t,n),this._checkEdgeForParalleLines(p,c.pos,e,l,t,n)),p=p.left.left}while(p&&p!==h);return n}snapExistingVertex(t,r){const o=[],s=e(r.vertexHandle),n=s.component;if(n.edges.length<3)return o;const l=i(t,r.coordinateHelper,r.elevationInfo,this.view),a=s.left,c=s.right,h=n.vertices[0],p=n.vertices.length,d=n.vertices[p-1],g=n.edges[0];let m=g;do{m!==a&&m!==c&&this.edgeExceedsShortLineThreshold(m,r)&&(a&&this._checkEdgeForParalleLines(m,a.left.pos,t,l,r,o),c&&this._checkEdgeForParalleLines(m,c.right.pos,t,l,r,o),s===h?this._checkEdgeForParalleLines(m,d.pos,t,l,r,o):s===d&&this._checkEdgeForParalleLines(m,h.pos,t,l,r,o)),m=m.right.right}while(m&&m!==g);return o}_checkEdgeForParalleLines(e,t,n,c,h,p){const d=e.left.pos,g=e.right.pos;if(l(this._tmpProjection,t,d,g),r(this._tmpProjection,t)<o.parallelLineThreshold)return;l(this._tmpProjection,n,d,g,t);const m=h.coordinateHelper,f=m.fromXYZ(this._tmpProjection,m.getZ(n,0));if(s(c,i(f,m,h.elevationInfo,this.view))<this.squaredProximityTreshold(h.pointer)){if(this.parallelToPreviousCandidate(e,p))return;p.push(new a({coordinateHelper:m,referenceLine:e,lineStart:t,targetPoint:f}))}}parallelToPreviousCandidate(e,t){const i=e.left.pos,s=e.right.pos;for(const n of t)if(l(this._tmpProjection,s,n.constraint.start,n.constraint.end,i),r(this._tmpProjection,s)<o.parallelLineThreshold)return n.addReferenceLine(e),!0;return!1}}export{c as ParallelLineSnapper};
