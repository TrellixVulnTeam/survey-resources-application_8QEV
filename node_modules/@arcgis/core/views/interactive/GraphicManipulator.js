/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../core/has.js";import{get as t,isNone as o,isSome as i}from"../../core/maybe.js";import s from"../../core/Logger.js";import"../../core/accessorSupport/ensureType.js";import{property as r}from"../../core/accessorSupport/decorators/property.js";import{subclass as l}from"../../core/accessorSupport/decorators/subclass.js";import"../../core/urlUtils.js";import"../../core/uuid.js";import"../../portal/support/resourceExtension.js";import a from"../../core/Accessor.js";import n from"../../core/Evented.js";import{pt2px as c,screenPointObjectToArray as h,createScreenPointArray as p}from"../../core/screenUtils.js";import{c as m}from"../../chunks/vec3f64.js";import{k as u}from"../../chunks/vec3.js";import{canProjectWithoutEngine as y,project as g,projectPointToVector as d}from"../../geometry/projection.js";import b from"../../symbols/support/ElevationInfo.js";import{getDefaultSymbol2D as f}from"../../symbols/support/defaults.js";import{j as _}from"../../chunks/vec2.js";import{getGraphicEffectiveElevationMode as v}from"../../support/elevationInfoUtils.js";import{intersectsDrapedGeometry as S}from"../support/drapedUtils.js";const j=s.getLogger("esri.views.interactive.GraphicManipulator");let C=class extends a{constructor(e){super(e),this.layer=null,this.interactive=!0,this.selectable=!1,this.grabbable=!0,this.dragging=!1,this.cursor=null,this.events=new n.EventEmitter,this._circleCollisionCache=null,this._graphicSymbolChangedHandle=null,this._originalSymbol=null}set graphic(e){"mesh"!==t(e.geometry,"type")?(this._circleCollisionCache=null,this._originalSymbol=e.symbol,this._set("graphic",e),this.attachSymbolChanged()):j.error("Mesh geometries are not supported")}get elevationInfo(){const e="elevationInfo"in this.graphic.layer&&this.graphic.layer.elevationInfo,t=v(this.graphic),o=e?e.offset:0;return new b({mode:t,offset:o})}set focusedSymbol(e){e!==this._get("focusedSymbol")&&(this._set("focusedSymbol",e),this._updateGraphicSymbol(),this._circleCollisionCache=null)}grabbableForEvent(){return!0}set grabbing(e){e!==this._get("grabbing")&&(this._set("grabbing",e),this._updateGraphicSymbol())}set hovering(e){e!==this._get("hovering")&&(this._set("hovering",e),this._updateGraphicSymbol())}set selected(e){e!==this._get("selected")&&(this._set("selected",e),this._updateGraphicSymbol(),this.events.emit("select-changed",{action:e?"select":"deselect"}))}get _focused(){return this._get("hovering")||this._get("grabbing")}destroy(){this.detachSymbolChanged(),this._resetGraphicSymbol(),this._set("view",null)}intersectionDistance(e){const t=this.graphic;if(!1===t.visible)return null;const s=t.geometry;if(o(s))return null;const r=this._get("focusedSymbol"),l=i(r)?r:t.symbol;return"2d"===this.view.type?this._intersectDistance2D(this.view,e,s,l):this._intersectDistance3D(this.view,e,t)}attach(){this.attachSymbolChanged(),i(this.layer)&&this.layer.add(this.graphic)}detach(){this.detachSymbolChanged(),this._resetGraphicSymbol(),i(this.layer)&&this.layer.remove(this.graphic)}attachSymbolChanged(){this.detachSymbolChanged(),this._graphicSymbolChangedHandle=this.graphic.watch("symbol",(e=>{i(e)&&e!==this.focusedSymbol&&e!==this._originalSymbol&&(this._originalSymbol=e,this._focused&&i(this.focusedSymbol)&&(this.graphic.symbol=this.focusedSymbol))}),!0)}detachSymbolChanged(){i(this._graphicSymbolChangedHandle)&&(this._graphicSymbolChangedHandle.remove(),this._graphicSymbolChangedHandle=null)}_updateGraphicSymbol(){this.graphic.symbol=this._focused&&i(this.focusedSymbol)?this.focusedSymbol:this._originalSymbol}_resetGraphicSymbol(){this.graphic.symbol=this._originalSymbol}_intersectDistance2D(e,t,s,r){if(r=r||f(s),o(r))return null;const l=1;let a=this._circleCollisionCache;if("point"!==s.type||"simple-marker"!==r.type)return S(t,s,e)?l:null;if(o(a)||!a.originalPoint.equals(s)){const t=s,o=e.spatialReference;if(y(t.spatialReference,o)){const e=g(t,o);a={originalPoint:t.clone(),mapPoint:e,radiusPx:c(r.size)},this._circleCollisionCache=a}}if(i(a)){const o=h(t,G),i=e.toScreen(a.mapPoint),s=a.radiusPx,n=i.x+c(r.xoffset),p=i.y-c(r.yoffset);return _(o,[n,p])<s*s?l:null}return null}_intersectDistance3D(e,t,o){const i=e.toMap(t,{include:[o]});return i&&d(i,w,e.renderSpatialReference)?u(w,e.state.camera.eye):null}};e([r({constructOnly:!0,nonNullable:!0})],C.prototype,"graphic",null),e([r({readOnly:!0})],C.prototype,"elevationInfo",null),e([r({constructOnly:!0,nonNullable:!0})],C.prototype,"view",void 0),e([r({value:null})],C.prototype,"focusedSymbol",null),e([r({constructOnly:!0})],C.prototype,"layer",void 0),e([r()],C.prototype,"interactive",void 0),e([r()],C.prototype,"selectable",void 0),e([r()],C.prototype,"grabbable",void 0),e([r({value:!1})],C.prototype,"grabbing",null),e([r()],C.prototype,"dragging",void 0),e([r()],C.prototype,"hovering",null),e([r({value:!1})],C.prototype,"selected",null),e([r()],C.prototype,"cursor",void 0),C=e([l("esri.views.interactive.GraphicManipulator")],C);const w=m(),G=p();export{C as GraphicManipulator};
