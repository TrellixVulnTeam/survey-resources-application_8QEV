/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import"../../../core/has.js";import{isNone as e,isSome as r,disposeMaybe as s}from"../../../core/maybe.js";import{isSVG as t}from"../../../core/urlUtils.js";import{createTask as i}from"../../../core/promiseUtils.js";import{clamp as a}from"../../../core/mathUtils.js";import o from"../../../request.js";import n from"../../../core/Handles.js";import{init as l}from"../../../core/watchUtils.js";import"../../../chunks/builtins.js";import h from"../../webgl/BufferObject.js";import m from"../../webgl/Texture.js";import d from"../../webgl/VertexArrayObject.js";import"../../webgl/FramebufferObject.js";import{DisplayObject as u}from"../engine/DisplayObject.js";import{loadMagnifierResources as c}from"../../magnifier/resources.js";import{WGLDrawPhase as p}from"../engine/webgl/enums.js";import{createMagnifierProgram as _,magnifierProgramTemplate as g}from"../engine/webgl/shaders/MagnifierPrograms.js";class f extends u{constructor(){super(),this._handles=new n,this._resourcePixelRatio=1,this.visible=!1}destroy(){this._handles.destroy(),this._handles=null,this._disposeRenderResources(),this._resourcesTask&&(this._resourcesTask.abort(),this._resourcesTask=null)}get background(){return this._background}set background(e){this._background=e,this.requestRender()}get magnifier(){return this._magnifier}set magnifier(e){this._magnifier=e,this._handles.removeAll(),this._handles.add([l(e,"version",(()=>{this.visible=e.visible&&r(e.position)&&e.size>0,this.requestRender()})),e.watch(["mask","overlay"],(()=>this._reloadResources())),e.watch("size",(()=>{this._disposeRenderResources(),this.requestRender()}))])}doRender(r){var s;const t=r.context;if(!this._resourcesTask)return void this._reloadResources();if(r.drawPhase!==p.MAP||!this._canRender())return;this._updateResources(r);const i=this._magnifier;if(e(i.position))return;const o=r.pixelRatio,n=i.size*o,l=1/i.factor,h=Math.ceil(l*n);this._readbackTexture.resize(h,h);const{size:m}=r.state,d=o*m[0],u=o*m[1],c=.5*h,_=.5*h,g=a(o*i.position.x,c,d-c-1),f=a(u-o*i.position.y,_,u-_-1);t.setBlendingEnabled(!0);const b=g-c,x=f-_,y=this._readbackTexture;t.bindTexture(y,0),t.gl.copyTexImage2D(y.descriptor.target,0,y.descriptor.pixelFormat,b,x,h,h,0);const k=null==(s=this.background)?void 0:s.color,T=k?[k.a*k.r/255,k.a*k.g/255,k.a*k.b/255,k.a]:[1,1,1,1],v=(g+i.offset.x*o)/d*2-1,R=(f-i.offset.y*o)/u*2-1,w=n/d*2,j=n/u*2,A=this._program;t.bindVAO(this._vertexArrayObject),t.bindTexture(this._overlayTexture,6),t.bindTexture(this._maskTexture,7),t.bindProgram(A),A.setUniform4fv("u_background",T),A.setUniform1i("u_readbackTexture",0),A.setUniform1i("u_overlayTexture",6),A.setUniform1i("u_maskTexture",7),A.setUniform4f("u_drawPos",v,R,w,j),A.setUniform1i("u_maskEnabled",i.maskEnabled?1:0),A.setUniform1i("u_overlayEnabled",i.overlayEnabled?1:0),t.setStencilTestEnabled(!1),t.setColorMask(!0,!0,!0,!0),t.drawArrays(5,0,4),t.bindVAO()}_canRender(){return this.mask&&this.overlay&&null!=this._magnifier}_reloadResources(){this._resourcesTask&&this._resourcesTask.abort();const s=r(this._magnifier)?this._magnifier.maskUrl:null,t=r(this._magnifier)?this._magnifier.overlayUrl:null;this._resourcesTask=i((async i=>{const a=e(s)||e(t)?c(i):null,n=r(s)?o(s,{responseType:"image",signal:i}).then((e=>e.data)):a.then((e=>e.mask)),l=r(t)?o(t,{responseType:"image",signal:i}).then((e=>e.data)):a.then((e=>e.overlay)),[h,m]=await Promise.all([n,l]);this.mask=h,this.overlay=m,this._disposeRenderResources(),this.requestRender()}))}_disposeRenderResources(){this._readbackTexture=s(this._readbackTexture),this._overlayTexture=s(this._overlayTexture),this._maskTexture=s(this._maskTexture),this._vertexArrayObject=s(this._vertexArrayObject),this._program=s(this._program)}_updateResources(e){if(e.pixelRatio!==this._resourcePixelRatio&&this._disposeRenderResources(),this._readbackTexture)return;const r=e.context;this._resourcePixelRatio=e.pixelRatio;const s=Math.ceil(this._magnifier.size*e.pixelRatio);this._program=_(r);const i={geometry:[{name:"a_pos",count:2,type:5123,offset:0,stride:4,normalized:!1,divisor:0}]},a=new Uint16Array([0,1,0,0,1,1,1,0]),o=g.attributes;this._vertexArrayObject=new d(r,o,i,{geometry:h.createVertex(r,35044,a)}),this.overlay.width=s,this.overlay.height=s,this._overlayTexture=new m(r,{target:3553,pixelFormat:6408,internalFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9728,flipped:!0,preMultiplyAlpha:!t(this.overlay.src)||!e.driverTestResult.svgAlwaysPremultipliesAlpha},this.overlay),this.mask.width=s,this.mask.height=s,this._maskTexture=new m(r,{target:3553,pixelFormat:6406,internalFormat:6406,dataType:5121,wrapMode:33071,samplingMode:9728,flipped:!0},this.mask);const n=1/this._magnifier.factor;this._readbackTexture=new m(r,{target:3553,pixelFormat:6408,internalFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9729,flipped:!1,width:Math.ceil(n*s),height:Math.ceil(n*s)})}}export default f;
