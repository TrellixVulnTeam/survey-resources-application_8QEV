/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../core/maybe.js";import{allocateTypedArrayBuffer as t,copyMeshData as r,forEachGeometryType as s}from"./Utils.js";import{DisplayRecordReader as i}from"./cpuMapped/DisplayRecordReader.js";import a from"./MemoryRequirements.js";import o from"./TileBufferData.js";import f from"./WGLDisplayRecord.js";import n from"./WGLDisplayObject.js";import l,{groupRecordsByGeometryType as u}from"./TileDisplayData.js";import{VertexBuffers as c}from"./mesh/VertexBuffer.js";import m from"./util/Writer.js";import{VertexVectors as D}from"./mesh/VertexVector.js";const d=new a,p=new a,h=1.5,x=5;function B(e,r){const s={};for(const i in e){const a={data:t(r,e[i]),stride:e[i]};s[i]=a}return s}function y(e){return[e.fill||{},e.line||{},e.icon||{},e.text||{},e.label||{}]}class g{constructor(){this.tileDisplayData=null,this.tileBufferData=null}reshuffle(){d.reset();const e=u(this.tileDisplayData.displayObjects);for(const t of e)for(const e of t)e&&d.needMore(e.geometryType,e.meshData?e.meshData.vertexCount:e.vertexCount,e.meshData?e.meshData.indexData.length:e.indexCount);const s=e.length,i=new o;for(let r=0;r<s;++r){i.geometries[r].indexBuffer=new Uint32Array(Math.round(h*d.indicesFor(r)));const e=[];for(const t in this.tileBufferData.geometries[r].vertexBuffer)e.push(this.tileBufferData.geometries[r].vertexBuffer[t].stride);const s=g._computeVertexAlignment(e),a=Math.round(h*d.verticesFor(r)),o=g._align(a,s);for(const f in this.tileBufferData.geometries[r].vertexBuffer){const e=this.tileBufferData.geometries[r].vertexBuffer[f].stride;i.geometries[r].vertexBuffer[f]={stride:e,data:t(o,e)}}}p.reset(),this.tileDisplayData.displayList.clear();for(let t=0;t<s;++t){const s=e[t];for(const e of s){if(e.meshData)e.writeMeshDataToBuffers(p.verticesFor(t),i.geometries[t].vertexBuffer,p.indicesFor(t),i.geometries[t].indexBuffer),e.meshData=null;else{const s=this.tileBufferData.geometries[t].vertexBuffer,a=this.tileBufferData.geometries[t].indexBuffer,o=i.geometries[t].vertexBuffer,f=i.geometries[t].indexBuffer,n=p.verticesFor(t),l=p.indicesFor(t);r(n,l,o,f,e,s,a),e.vertexFrom=n,e.indexFrom=l}p.needMore(t,e.vertexCount,e.indexCount)}}for(const t of this.tileDisplayData.displayObjects)this.tileDisplayData.displayList.addToList(t.displayRecords);this.tileBufferData=i}getStrides(){const e=[];for(let t=0;t<this.tileBufferData.geometries.length;++t){const r=this.tileBufferData.geometries[t];e[t]={};for(const s in r.vertexBuffer)e[t][s]=r.vertexBuffer[s].stride}return e}clone(){const e=new g;return e.tileBufferData=this.tileBufferData.clone(),e.tileDisplayData=this.tileDisplayData.clone(),e}_guessSize(){const{displayObjects:e}=this.tileDisplayData,t=Math.min(e.length,4),r=12,s=40;let i=0;for(let a=0;a<t;a++)i=Math.max(i,e[a].displayRecords.length);return 2*(e.length*r+e.length*i*s)}serialize(){const e=this.tileBufferData.serialize(),t=this.tileBufferData.getBuffers(),r=this.tileDisplayData.serialize(new m(Int32Array,this._guessSize())).buffer();return t.push(r),{result:{displayData:r,bufferData:e},transferList:t}}static fromVertexData(t){const r=[],a={},o=new Map;return s((s=>{const l=t.data[s];if(e(l)){const e=i.from(l.records).getCursor();for(;e.next();){const t=e.id,i=e.materialKey,a=e.insertAfter,l=e.indexFrom,u=e.indexCount,c=e.vertexFrom,m=e.vertexCount;if(!o.has(t)){const e=new n(t);e.insertAfter=a,o.set(t,e),r.push(e)}const D=o.get(t),d=new f(t,s,i);d.indexFrom=l,d.indexCount=u,d.vertexFrom=c,d.vertexCount=m,D.displayRecords.push(d)}a[s]=c.fromVertexData(l,s)}else a[s]=new D(s,0).intoBuffers()})),r.sort(((e,t)=>e.id-t.id)),g.fromMeshData({displayObjects:r,vertexBuffersMap:a})}static fromMeshData(e){const t=new g,r=new l,s=new o;r.displayObjects=e.displayObjects;for(const i in e.vertexBuffersMap){const t=e.vertexBuffersMap[i];s.geometries[i].indexBuffer=t.indexBuffer,s.geometries[i].vertexBuffer=t.namedBuffers}return t.tileDisplayData=r,t.tileBufferData=s,t}static bind(e,t){const r=new g;return r.tileDisplayData=e,r.tileBufferData=t,r}static create(e,t){const r=new g;r.tileDisplayData=new l,r.tileDisplayData.displayObjects=e;const s=[0,0,0,0,0],i=[0,0,0,0,0],a=[[],[],[],[],[]];for(const o of e)for(const e of o.displayRecords)a[e.geometryType].push(e),s[e.geometryType]+=e.meshData.vertexCount,i[e.geometryType]+=e.meshData.indexData.length;const n=new o,u=y(t);for(let o=0;o<x;o++){const e=new Uint32Array(i[o]),t=B(u[o],s[o]);f.writeAllMeshDataToBuffers(a[o],t,e),n.geometries[o]={indexBuffer:e,vertexBuffer:t}}return r.tileBufferData=n,r}static _align(e,t){const r=e%t;return 0===r?e:e+(t-r)}static _computeVertexAlignment(e){let t=!1,r=!1;for(const s of e)s%4==2?t=!0:s%4!=0&&(r=!0);return r?4:t?2:1}}export{g as TileData};
