/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import e from"../../../../../core/Logger.js";import t from"../../../../../core/Error.js";import{createRendererExpression as i}from"../../../../../support/arcadeOnDemand.js";import{createLabelOverrideFunction as s}from"../../../../../symbols/cim/utils.js";import r from"../../../../../core/LRUCache.js";import a from"../../../arcade/callExpressionWithFeature.js";import{expandSymbol as n}from"../../../../../symbols/cim/cimSymbolUtils.js";import{createSymbolSchema as l}from"../../../layers/features/schemaUtils.js";const o=e.getLogger("esri/views/2d/engine/webgl/util/Matcher");class u{constructor(){this.type="feature",this._defaultResult=null}static async fromBasicRenderer(e,t,i){const s=new u;if(e.symbol){const r=await n(e.symbol,i),a=t.createTemplateGroup(r,null);s.setDefault(a)}return s}size(){return 1}getDefault(){return this._defaultResult}setDefault(e){this._defaultResult=e}match(e,t,i,s,r){return this.getDefault()}async analyze(e,t,i,s,r){return null}}class c extends u{constructor(e,t,i,s){super(),this.type="interval",this._intervals=[],this._isMaxInclusive=t,this._fieldIndex=s,this._field=e,this._normalizationInfo=i}static async fromCBRenderer(e,t,i){const{isMaxInclusive:s,normalizationField:r,normalizationTotal:a,normalizationType:l}=e,o=e.field,u=new c(o,s,{normalizationField:r,normalizationTotal:a,normalizationType:l},e.fieldIndex),d=await n(e.backgroundFillSymbol,i);await Promise.all(e.intervals.map((async e=>{const s=await n(e.symbol,i),r=await t.createTemplateGroup(s,d),a={min:e.min,max:e.max};u.add(a,r)})));const f=await n(e.defaultSymbol,i);if(f){const e=await t.createTemplateGroup(f,d);u.setDefault(e)}return u}add(e,t){this._intervals.push({interval:e,result:t}),this._intervals.sort(((e,t)=>e.interval.min-t.interval.min))}size(){return super.size()+this._intervals.length}match(e,t,i,s,r){if(null==this._fieldIndex&&!this._field)return this.getDefault();const a=null!=this._fieldIndex?t.getComputedNumericAtIndex(this._fieldIndex):this._getValueFromField(t);if(!a&&(null==a||isNaN(a)))return this.getDefault();for(let n=0;n<this._intervals.length;n++){const{interval:e,result:t}=this._intervals[n],i=a>=e.min,s=this._isMaxInclusive?a<=e.max:a<e.max;if(i&&s)return t}return this.getDefault()}_needsNormalization(){const e=this._normalizationInfo;return e&&(e.normalizationField||e.normalizationTotal||e.normalizationType)}_getValueFromField(e){const t=e.readAttribute(this._field);if(!this._needsNormalization()||null==t)return t;const{normalizationField:i,normalizationTotal:s,normalizationType:r}=this._normalizationInfo,a=!!i&&e.readAttribute(i);if(r)switch(r){case"esriNormalizeByField":return a?t/a:void 0;case"esriNormalizeByLog":return Math.log(t)*Math.LOG10E;case"esriNormalizeByPercentOfTotal":return t/s*100;default:return void o.error(`Found unknown normalization type: ${r}`)}else o.error("Normalization is required, but no type was set!")}}class d extends u{constructor(e,t,i){super(),this.type="map",this._nullResult=null,this._resultsMap=new Map,this._fieldsIndex=i,this._fields=e,this._seperator=t||""}static async fromUVRenderer(e,t,i){const s=e.fieldDelimiter,r=[e.field];e.field2&&r.push(e.field2),e.field3&&r.push(e.field3);const a=await n(e.backgroundFillSymbol,i),l=new d(r,s,e.fieldIndex);await Promise.all(e.map.map((async e=>{const s=await n(e.symbol,i),r=await t.createTemplateGroup(s,a);"<Null>"===e.value?l.setNullResult(r):l.add(e.value,r)})));const o=await n(e.defaultSymbol,i);if(o){const e=await t.createTemplateGroup(o,a);l.setDefault(e)}return l}setNullResult(e){this._nullResult=e}add(e,t){this._resultsMap.set(e.toString(),t)}size(){return super.size()+this._resultsMap.size}match(e,t,i,s,r){if(null==this._fieldsIndex&&!this._fields)return this.getDefault();const a=null!=this._fieldsIndex?t.getComputedStringAtIndex(this._fieldsIndex):this._getValueFromFields(t);if(null!==this._nullResult&&(null==a||""===a||"<Null>"===a))return this._nullResult;if(!a&&null==a)return this.getDefault();const n=a.toString();return this._resultsMap.has(n)?this._resultsMap.get(n):this.getDefault()}_getValueFromFields(e){const t=[];for(const i of this._fields){const s=e.readAttribute(i);t.push(s)}return t.join(this._seperator)}}async function f(e,t){const s=e||1;if("number"==typeof s)return(e,t,i)=>s;const r=await i(s,t.spatialReference,t.fields);return(e,i,s)=>a(r,e,{$view:s},t.geometryType,i)||1}class m extends u{constructor(e,t,i,s){super(),this.type="dictionary",this._groupIdCache=new r(100),this._renderer=e,this._fieldMap=e.fieldMap,this._symbolFields=e.getSymbolFields(),this._templates=t,this._info=i,this._scaleFn=s}static async fromDictionaryRenderer(e,t,i){const s=(await import("../../../../../renderers/DictionaryRenderer.js")).default.fromJSON(e.renderer);await s.fetchResources({spatialReference:i.spatialReference,fields:i.fields});const r=await f(s.scaleExpression,i);return new m(s,t,i,r)}async _analyzeFeature(e,i,r,a){const u=e.readLegacyFeature(),c=this._scaleFn(u,i,r),d=this._attributeHash(u)+"-"+c,f=this._groupIdCache.get(d);if(f)return f;const m={...r,spatialReference:this._info.spatialReference,abortOptions:a,fields:this._info.fields},h=await this._renderer.getSymbolAsync(u,m),p=l(h,this._renderer),_=n(p,this._info,a).then((e=>{if("expanded-cim"!==e.type)return o.error(new t("mapview-bad-type",`Found unexpected type ${e.type} in dictionary response`)),null;e.hash+="-"+c;for(const t of e.layers)t.scaleFactor=c,t.templateHash+="-"+c,"text"===t.type&&"string"==typeof t.text&&t.text.indexOf("[")>-1&&(t.text=s(this._fieldMap,t.text,t.cim.textCase));return this._templates.createTemplateGroup(e,null)}));return this._groupIdCache.put(d,_,1),_}async analyze(e,t,i,s,r){const a=t.getCursor(),n=[];for(;a.next();)n.push(this._analyzeFeature(a,i,s,r));return Promise.all(n)}match(e,t,i,s,r){return null}_attributeHash(e){let t="";for(const i of this._symbolFields){const s=this._fieldMap[i];s&&(t+=e.attributes[s]+"-")}return t}}export{m as DictionaryMatcher,u as FeatureMatcher,c as IntervalMatcher,d as MapMatcher};
