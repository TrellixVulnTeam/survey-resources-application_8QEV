/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import"../../../../../../core/has.js";import{isSome as e}from"../../../../../../core/maybe.js";import{isAborted as t}from"../../../../../../core/promiseUtils.js";import{isAggregateId as r}from"../../../../layers/features/support/AttributeStore.js";import o from"../templates/WGLLabelTemplate.js";import s from"../templates/WGLMarkerTemplate.js";import{isDynamicId as a}from"../templates/WGLTemplateStore.js";class i{constructor(e,t,r){this._geometryType=e,this._idField=t,this._templateStore=r}update(t,r){e(t.mesh.labels)&&this._setLabelTemplates(t.mesh.labels,r)}_setLabelTemplates(e,t){this._labelTemplates=e.map((e=>o.fromLabelClass(e,t)))}get templates(){return this._templateStore}async analyze(o,s,i,l,p,n){if(t(n))return;let m;"dictionary"===s.type&&(m=await s.analyze(this._idField,o.copy(),l,p,n));let f=0;for(;o.next();){let t;if(t=m?m[f++]:e(i)&&r(o.getDisplayId())&&1!==o.readAttribute("cluster_count")?i.match(this._idField,o,this._geometryType,l,p):s.match(this._idField,o,this._geometryType,l,p),o.setGroupId(t),a(t)){const e=this._templateStore.getDynamicTemplateGroup(t);for(const t of e)t&&t.analyze&&t.analyze(this._templateStore,o,l,p)}}return this._templateStore.finalize(n)}async analyzeGraphics(e,r,o,s,i){if(t(i))return;const l=e.getCursor();for(r&&await r.analyze(this._idField,l.copy(),o,s,i);l.next();){let e=l.getGroupId();if(null!=e&&-1!==e||(e=r.match(this._idField,l,l.geometryType,o,s),l.setGroupId(e)),a(e)){const t=this._templateStore.getDynamicTemplateGroup(e);for(const e of t)e&&e.analyze&&e.analyze(this._templateStore,l,o,s)}l.setGroupId(e)}return this._templateStore.finalize(i)}writeGraphic(e,t){const r=t.getGroupId(),o=t.getDisplayId(),s=this._templateStore.getTemplateGroup(r);if(e.featureStart(t.insertAfter),null!=o){if(a(r))for(const e of s)e.bindFeature(t,null,null);if(s){for(const r of s)r&&r.write(e,t);e.featureEnd()}}}writeCursor(t,r,o,s,i,l){const p=r.getGroupId(),n=r.getDisplayId(),m=this._templateStore.getTemplateGroup(p);if(r.getObjectId(),null!=n&&m){if(a(p))for(const e of m)e.bindFeature(r,o,s);for(const e of m)e.write(t,r);if(e(l)&&t.hasRecords){const e=l&&this._findLabelRef(m);this._writeLabels(t,r,l,e,i)}}}_findLabelRef(e){for(const t of e)if(t instanceof s)return t;return null}_writeLabels(t,r,o,s,a){for(const i of o)if(e(i)&&i){const{glyphs:e,rtl:o,index:l}=i,p=this._labelTemplates[l];p.setZoomLevel(a),p.bindReferenceTemplate(s),p.bindTextInfo(e,o),p.write(t,r)}}}export{i as WGLMeshFactory};
