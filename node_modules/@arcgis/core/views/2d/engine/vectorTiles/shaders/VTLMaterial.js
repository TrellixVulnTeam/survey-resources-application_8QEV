/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{c as t}from"../../../../../chunks/vec4f32.js";import e from"../MemoryBuffer.js";class o{constructor(e){this._color=t(),this._key=e}get key(){return this._key}get type(){return 7&this._key}defines(){return[]}getStride(){return this._layoutInfo||this._buildAttributesInfo(),this._stride}getAttributeLocations(){return this._locations||this._buildAttributesInfo(),this._locations}getLayoutInfo(){return this._layoutInfo||this._buildAttributesInfo(),this._layoutInfo}getEncodingInfos(){return this._propertyEncodingInfo||this._buildAttributesInfo(),this._propertyEncodingInfo}getUniforms(){return this._uniforms||this._buildAttributesInfo(),this._uniforms}getShaderHeader(){return this._shaderHeader||this._buildAttributesInfo(),this._shaderHeader}getShaderMain(){return this._shaderMain||this._buildAttributesInfo(),this._shaderMain}setDataUniforms(t,e,o,n){const s=this.getUniforms();for(const r in s){const i=s[r];switch(i.type){case"float":t.setUniform1f(i.name,i.getValue(o,e,n));break;case"vec2":t.setUniform2fv(i.name,i.getValue(o,e,n));break;case"vec4":{const s=i.getValue(o,e,n),r=s[3];this._color[0]=r*s[0],this._color[1]=r*s[1],this._color[2]=r*s[2],this._color[3]=r,t.setUniform4fv(i.name,this._color)}}}}encodeAttributes(t,e,o){const n=this.attributesInfo(),s=this.getEncodingInfos(),r=[];for(const a of Object.keys(s)){var i;const c=s[a],{type:u,precisionFactor:f,isLayout:h}=n[a],d=h?o.getLayoutProperty(a):o.getPaintProperty(a),l=null==(i=d.interpolator)?void 0:i.getInterpolationRange(e);let _=0;for(const o of c){o.dataIndex>=r.length&&r.push(0);const n=d.getValue(l?l[_]:e,t);switch(u){case 0:r[o.dataIndex]|=this._encodeByte(n*(f||1),8*o.offset);break;case 1:r[o.dataIndex]|=this._encodeByte(n*(f||1)+128,8*o.offset);break;case 2:r[o.dataIndex]=this._encodeColor(n);break;default:throw new Error("Unsupported encoding type")}++_}}return r}getAtributeState(t){let e=0;const o=3+2*t;return e|=this._bit(o),e|=this._bit(o+1)<<1,e}_buildAttributesInfo(){const t=[],e={},n={};let s=-1;const r=this.attributesInfo(),i=this.attributes();let a=-1;for(const d of i){++a;const i=this.getAtributeState(a);if(0===i)continue;const c=r[d],u=[];e[d]=u;const f=c.type;for(let e=0;e<i;++e){const{dataType:e,bytesPerElement:r,count:i,normalized:a}=o._encodingInfo[f],c=e<<2|i;let h=n[c];h&&4!==h.offset||(++s,n[c]=h={dataIndex:s,offset:0},t.push({location:-1,name:"a_data_"+s,count:4/r,type:e,normalized:a})),u.push({dataIndex:h.dataIndex,offset:h.offset}),h.offset+=r*i}}this._buildVertexBufferLayout(t);const c={};let u=0;const f=this._layoutInfo.geometry;for(const o of f)c[o.name]=u++;const h=this._layoutInfo.opacity;if(h)for(const o of h)c[o.name]=u++;this._buildShaderInfo(t,e),this._propertyEncodingInfo=e,this._locations=c}_buildVertexBufferLayout(t){const e={},o=this.geometryInfo();let s=o[0].stride;if(0===t.length)e.geometry=o;else{const r=[];let i=s;s+=4*t.length;for(const t of o){const e={...t};e.stride=s,r.push(e)}for(const e of t)r.push({name:e.name,count:e.count,type:e.type,offset:i,stride:s,normalized:e.normalized||!1,divisor:0}),i+=n(e.type)*e.count;e.geometry=r}this.opacityInfo()&&(e.opacity=this.opacityInfo()),this._layoutInfo=e,this._stride=s}_buildShaderInfo(t,e){let n="\n",s="\n";const r=[];for(const o of t)n+=`attribute ${this._getType(o.count)} ${o.name};\n`;const i=this.attributes(),a=this.attributesInfo();let c=-1;for(const u of i){++c;const{name:t,type:i,precisionFactor:f,isLayout:h}=a[u],d=f&&1!==f?" * "+1/f:"",{bytesPerElement:l,count:_}=o._encodingInfo[i],y=t=>{const e=2===i?"":`[${t.offset/l}]`;return`a_data_${t.dataIndex}${e}`};switch(this.getAtributeState(c)){case 0:{const e=this._getType(_),o=`u_${t}`;r.push({name:o,type:e,getValue:(t,e)=>h?t.getLayoutValue(u,e):t.getPaintValue(u,e)}),n+=`uniform ${e} ${o};\n`,s+=`${e} ${t} = ${o};\n`}break;case 1:{const o=y(e[u][0]);s+=`${this._getType(_)} ${t} = ${o}${d};\n`}break;case 2:{const o=`u_t_${t}`;r.push({name:o,type:"float",getValue:(t,e,o)=>(h?t.getLayoutProperty(u):t.getPaintProperty(u)).interpolator.interpolationUniformValue(o,e)}),n+=`uniform float ${o};\n`;const i=y(e[u][0]),a=y(e[u][1]);s+=`${this._getType(_)} ${t} = mix(${i}${d}, ${a}${d}, ${o});\n`}}}this._shaderHeader=n,this._shaderMain=s,this._uniforms=r}_bit(t){return(this._key&1<<t)>>t}_getType(t){switch(t){case 1:return"float";case 2:return"vec2";case 4:return"vec4"}throw new Error("Invalid count")}_encodeColor(t){const o=255*t[3];return e.i8888to32(t[0]*o,t[1]*o,t[2]*o,o)}_encodeByte(t,e){return(255&t)<<e}}o._encodingInfo=[{dataType:5121,bytesPerElement:1,count:1,normalized:!1},{dataType:5121,bytesPerElement:1,count:1,normalized:!1},{dataType:5121,bytesPerElement:1,count:4,normalized:!0}];const n=t=>{switch(t){case 5126:case 5124:case 5125:return 4;case 5122:case 5123:return 2;case 5120:case 5121:return 1}};export{o as VTLMaterial};
