/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import t from"../../../../../core/has.js";import{isNone as r}from"../../../../../core/maybe.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import{property as s}from"../../../../../core/accessorSupport/decorators/property.js";import{subclass as i}from"../../../../../core/accessorSupport/decorators/subclass.js";import"../../../../../core/urlUtils.js";import"../../../../../core/uuid.js";import"../../../../../portal/support/resourceExtension.js";import{ignoreAbortErrors as a,after as o,throwIfAborted as n,throwIfNotAbortError as u,isAbortError as h}from"../../../../../core/promiseUtils.js";import{whenFalseOnce as d}from"../../../../../core/watchUtils.js";import{convertToGeometry as c}from"../../../../../layers/graphics/featureConversionUtils.js";import l from"../../../../../layers/support/FieldsIndex.js";import{HandleOwner as p}from"../../../../../core/HandleOwner.js";import{FeatureSetReaderJSON as g}from"../support/FeatureSetReaderJSON.js";import{QueueProcessor as f}from"../../../../support/QueueProcessor.js";import m from"../support/AttributeStore.js";import{ComputedAttributeStorage as y}from"../support/ComputedAttributeStorage.js";import{FeatureStore2D as _}from"../FeatureStore2D.js";import S from"../../../../../layers/graphics/data/QueryEngine.js";import{UpdateToken as v}from"../support/UpdateToken.js";import{createSource as b}from"../sources/createSource.js";import{ClusterStore as I}from"../support/ClusterStore.js";const w=5e3,j="tileRenderer.featuresView.attributeView.initialize",C="tileRenderer.featuresView.attributeView.requestUpdate",E="tileRenderer.featuresView.requestRender";function T(e){return"worker:port-closed"===e.name}function k(e){if(!h(e)&&!T(e))throw e}function F(e){return"feature"===e.type&&"snapshot"===e.mode}let R=class extends p{constructor(){super(...arguments),this._storage=new y,this._markedIdsBufId=this._storage.createBitset(),this._lastCleanup=performance.now(),this._cleanupNeeded=!1,this._invalidated=!1,this._tileToResolver=new Map,this.tileStore=null,this.config=null,this.processor=null,this.remoteClient=null,this.service=null}initialize(){this._initAttributeStore(),this._initStores(),this._initQueryEngine(),this._initSource(),this._updateQueue=new f({concurrency:"geoevent"===this._source.type?1:4,process:(e,t)=>this._onTileMessage(e,{signal:t})}),this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this)),this.watch("updating",(e=>!e&&this.onIdle()))]),this._checkUpdating=setInterval((()=>this.notifyChange("updating")),300)}async startup(){this._initAttributeStore(),this.tileStore.tiles.forEach((e=>this._source.subscribe(e)))}_initSource(){const e=this.tileStore.tileScheme,t=()=>this._updateQueue.length<50,r=(e,t)=>(this._invalidated=!0,this._patchTile(e,t));this._source=b(this.service,this.spatialReference,e,r,t,this.featureStore),this._proxyEvents()}_proxyEvents(){if("geoevent"===this._source.type){const e=this._source.events;this.handles.add([e.on("connectionStatus",(e=>this.remoteClient.invoke("setProperty",{propertyName:"connectionStatus",value:e}).catch(k))),e.on("errorString",(e=>this.remoteClient.invoke("setProperty",{propertyName:"errorString",value:e}).catch(k))),e.on("feature",(e=>this.remoteClient.invoke("emitEvent",{name:"data-received",event:{attributes:e.attributes,centroid:e.centroid,geometry:e.geometry}}).catch(k))),e.on("updateRate",(e=>this.remoteClient.invoke("emitEvent",{name:"update-rate",event:{...e}}).catch(k)))])}}_initAttributeStore(){this.attributeStore?this.attributeStore.invalidateResources():this.attributeStore=new m({type:"remote",initialize:(e,t)=>a(this.remoteClient.invoke(j,e,{signal:t}).catch(k)),update:(e,t)=>a(this.remoteClient.invoke(C,e,{signal:t}).catch(k)),render:e=>a(this.remoteClient.invoke(E,void 0,{signal:e}).catch(k))},this.config)}_initStores(){const e="snapshot"===this.service.type?"snapshot":"on-demand",t={geometryInfo:{geometryType:this.service.geometryType,hasM:!1,hasZ:!1},spatialReference:this.spatialReference,fieldsIndex:this.fieldsIndex,fields:this.service.fields};this.featureStore=new _(t,this._storage,e),this.aggregateStore=new I(t,this.spatialReference,this._storage),this.handles.add(this.aggregateStore.events.on("valueRangesChanged",(e=>{this.remoteClient.invoke("emitEvent",{name:"valueRangesChanged",event:{valueRanges:e.valueRanges}}).catch(k)})))}_initQueryEngine(){var e;const t=this;null==(e=this.queryEngine)||e.destroy(),this.queryEngine=new S({definitionExpression:this.config.definitionExpression,fields:this.service.fields,geometryType:this.service.geometryType,objectIdField:this.service.objectIdField,hasM:!1,hasZ:!1,spatialReference:this.spatialReference.toJSON(),cacheSpatialQueries:!0,featureStore:this.featureStore,aggregateAdapter:{getFeatureObjectIds:e=>t.aggregateStore.getFeatureDisplayIdsForAggregate(e).map((e=>t.getObjectId(e)))},timeInfo:this.service.timeInfo})}destroy(){this._updateQueue.destroy(),this._source.destroy(),this.queryEngine.destroy(),this.attributeStore&&this.attributeStore.destroy(),clearInterval(this._checkUpdating)}get fieldsIndex(){return new l(this.service.fields)}get hasAggregates(){return!!this.config.schema.targets.aggregate}get spatialReference(){return this.tileStore.tileScheme.spatialReference}get updating(){return this.isUpdating()}isUpdating(){return this._source.updating||!!this._updateQueue.length}enableEvent(e){this._source.enableEvent(e.name,e.value)}pause(){this._updateQueue.pause(),this._updateQueue.clear()}async update(e,r){this._set("config",r),this._schema=r.schema,this._initQueryEngine(),await Promise.all([this._source.update(e,r.schema.source),this.featureStore.updateSchema(e,r.schema.targets.feature),this.attributeStore.update(e,r),this.attributeStore.updateFilters(e,this)]),await this.aggregateStore.updateSchema(e,r.schema.targets.aggregate),t("esri-2d-update-debug")&&e.describe()}async applyUpdate(e){e.mesh&&this.clearTiles(),this._updateQueue.clear(),this._updateQueue.resume(),await this._source.applyUpdate(e),this.notifyChange("updating"),await d(this,"updating",!0),this.hasAggregates&&(await o(10),await d(this,"updating",!0))}async onEdits(e){try{const t=e.deletedFeatures.map((e=>({...e,objectId:e.objectId&&-1!==e.objectId?e.objectId:this._lookupObjectIdByGlobalId(e.globalId)})));this.featureStore.invalidate(),await this._source.edit({...e,deletedFeatures:t})}catch(t){}}async refresh(){this.featureStore.invalidate(),this.clearTiles(),this._source.refresh(),this._cleanupNeeded=!0,this.notifyChange("updating"),await d(this,"updating",!0)}clearTiles(){for(const e of this.tileStore.tiles)this.processor.onTileClear(e)}onTileUpdate(e){this.aggregateStore.onTileUpdate(e);for(const t of e.added)this._source.subscribe(t),this._level=t.level;for(const t of e.removed)this._source.unsubscribe(t),this._cleanupNeeded=!0,this._tileToResolver.has(t.id)&&(this._tileToResolver.get(t.id).resolve(),this._tileToResolver.delete(t.id));this.notifyChange("updating")}onIdle(){this._invalidated&&((this.hasAggregates||"heatmap"===this.processor.type)&&this._repushTiles(),this._invalidated=!1),this._markAndSweep()}queryExtent(e){return this.queryEngine.executeQueryForExtent(e)}queryFeatures(e){return this.queryEngine.executeQuery(e)}queryFeatureCount(e){return this.queryEngine.executeQueryForCount(e)}queryLatestObservations(e){return this.queryEngine.executeQueryForLatestObservations(e)}queryObjectIds(e){return this.queryEngine.executeQueryForIds(e)}async queryStatistics(){return{...this.featureStore.storeStatistics,displayedFeatureCount:0,displayedVertexCount:0,displayPreProcessTime:0}}getObjectId(e){return this.featureStore.lookupObjectId(e,this._storage)}getDisplayId(e){if(this._schema.targets.aggregate){const t=this.aggregateStore.getDisplayId(e);if(r(t)){const t=this.featureStore.lookupDisplayId(e);return this.aggregateStore.getDisplayIdForReferenceId(t)}return t}return this.featureStore.lookupDisplayId(e)}getFeature(e){const t=this.featureStore.lookupFeatureByDisplayId(e,this._storage);if(r(t))return null;const s=t.readHydratedGeometry(),i=c(s,t.geometryType,t.hasZ,t.hasM);return{attributes:t.readAttributes(),geometry:i}}getAggregate(e){return this.aggregateStore.getAggregate(e)}async setHighlight(e){const t=e.map((e=>this.getDisplayId(e)));return this.attributeStore.setHighlight(e,t)}_lookupObjectIdByGlobalId(e){const t=this.service.globalIdField;if(r(t))throw new Error("Expected globalIdField to be defined");let s=null;if(this.featureStore.forEach((r=>{e===r.readAttribute(t)&&(s=r.getObjectId())})),r(s))throw new Error(`Expected to find a feature with globalId ${e}`);return s}_repushTiles(){for(const e of this.tileStore.tiles)this._patchTile({type:"append",id:e.key.id,addOrUpdate:g.fromOptimizedFeatures([],this.service.geometryType),remove:[],end:!0,status:v.empty()})}_maybeForceCleanup(){performance.now()-this._lastCleanup>w&&this._markAndSweep()}_patchTile(e,t){const r=this._updateQueue.push(e,t).then((()=>{this.notifyChange("updating")})).catch((e=>{this.notifyChange("updating")}));return this.notifyChange("updating"),r}async _onTileMessage(e,t){n(t);const s=this.tileStore.get(e.id);if(!s)return;if(e.clear)return this.processor.onTileClear(s);const i=e.status;e.remove.length&&(this._cleanupNeeded=!0);const a=[];for(const r of e.remove)a.push(this.featureStore.lookupDisplayId(r));e.remove=a;try{if(r(e.addOrUpdate))return void this.processor.onTileMessage(s,{...e,addOrUpdate:null},this.hasAggregates,t).catch(u);if(e.addOrUpdate.setArcadeSpatialReference(this.spatialReference),this.featureStore.hasInstance(e.addOrUpdate.instance)&&i.targets.feature||(i.targets.feature=!0,this.featureStore.onTileData(s,e)),i.storage.data&&i.storage.filters||(i.storage.data=!0,i.storage.filters=!0,this.attributeStore.onTileData(s,e),"geoevent"===this._source.type?(await this.attributeStore.sendUpdates(),n(t)):this.attributeStore.sendUpdates()),this.hasAggregates&&!i.targets.aggregate){i.targets.aggregate=!0;const t=F(this._source)&&this._source.loading,r=!F(this._source)||t||e.end;if(this.aggregateStore.onTileData(s,e,this._storage,this.attributeStore,r),!r)return;i.mesh||(this.attributeStore.onTileData(s,e),this.attributeStore.sendUpdates(),this.processor.onTileClear(s))}i.mesh||(i.mesh=!0,await this.processor.onTileMessage(s,e,this.hasAggregates,t),n(t)),this._maybeForceCleanup()}catch(o){u(o)}}_mark(e,t,r){const s=(4294901760&this._storage.getInstanceId(e))>>>16;e&&(t.add(s),r.set(e))}_markAndSweep(){if(this._lastCleanup=performance.now(),!this._cleanupNeeded||"geoevent"===this._source.type||"snapshot"===this._source.mode)return;this._cleanupNeeded=!1;const e=this._storage.getBitset(this._markedIdsBufId),t=new Set;e.clear();for(const s of this.tileStore.tiles)this._source.forEachRequest(s.key.id,(s=>{if(r(s.addOrUpdate))return;const i=s.addOrUpdate.getCursor();for(;i.next();){let r=i.getDisplayId();if(!r){const e=i.getObjectId();r=this.featureStore.lookupDisplayId(e)}this._mark(r,t,e)}}));this._source.forEachPendingEdit((r=>{const s=this.featureStore.lookupDisplayId(r);this._mark(s,t,e)})),this._updateQueue.forEach((r=>{for(const s of r.remove){const r=this.featureStore.lookupDisplayId(s);this._mark(r,t,e)}})),this.config.schema.targets.aggregate&&(this.aggregateStore.sweepFeatures(e,this.featureStore),this.aggregateStore.sweepClusters(this._storage,this.attributeStore,this._level)),this.featureStore.sweepFeatures(e,this._storage,this.attributeStore),this.featureStore.sweepFeatureSets(t)}};e([s({constructOnly:!0})],R.prototype,"tileStore",void 0),e([s()],R.prototype,"config",void 0),e([s({readOnly:!0})],R.prototype,"fieldsIndex",null),e([s()],R.prototype,"processor",void 0),e([s({constructOnly:!0})],R.prototype,"remoteClient",void 0),e([s({constructOnly:!0})],R.prototype,"service",void 0),e([s()],R.prototype,"spatialReference",null),e([s()],R.prototype,"updating",null),R=e([i("esri.views.2d.layers.features.controllers.FeatureController2D")],R);var O=R;export default O;
