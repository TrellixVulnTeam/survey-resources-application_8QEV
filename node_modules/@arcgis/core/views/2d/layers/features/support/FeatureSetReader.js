/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import"../../../../../core/has.js";import{isSome as t,isNone as e,unwrapOr as r}from"../../../../../core/maybe.js";import{fromJSON as i}from"../../../../../geometry/support/jsonUtils.js";import"../../../../../geometry.js";import s from"../../../../../layers/graphics/OptimizedGeometry.js";import{convertToGeometry as n}from"../../../../../layers/graphics/featureConversionUtils.js";import{getCentroidOptimizedGeometry as a}from"../../../../../layers/graphics/centroid.js";import{StaticBitSet as o}from"./StaticBitSet.js";let h=0;class d{constructor(t){this.type="FeatureSetReader",this.seen=!1,this.instance=0,this._tx=0,this._ty=0,this._sx=1,this._sy=1,this._xmin=-1,this._xmax=0,this._ymin=0,this._ymax=0,this._deleted=null,this._joined=[],this.instance=t}static createInstance(){return h++,h=h>65535?0:h,h}get isEmpty(){return t(this._deleted)&&this._deleted.countSet()===this.getApproximateSize()}get _hasFilter(){return-1!==this._xmin}setArcadeSpatialReference(t){this._arcadeSpatialReference=t}attachStorage(t){this._storage=t}getQuantizationTransform(){throw new Error("Unable to find transform for featureSet")}getStorage(){return this._storage}getComputedNumeric(t){return this.getComputedNumericAtIndex(0)}setComputedNumeric(t,e){return this.setComputedNumericAtIndex(e,0)}getComputedString(t){return this.getComputedStringAtIndex(0)}setComputedString(t,e){return this.setComputedStringAtIndex(0,e)}getComputedNumericAtIndex(t){return this._storage.getComputedNumericAtIndex(this.getDisplayId(),t)}setComputedNumericAtIndex(t,e){this._storage.setComputedNumericAtIndex(this.getDisplayId(),t,e)}getComputedStringAtIndex(t){return this._storage.getComputedStringAtIndex(this.getDisplayId(),t)}setComputedStringAtIndex(t,e){return this._storage.setComputedStringAtIndex(this.getDisplayId(),t,e)}transform(t,e,r,i){const s=this.copy();return s._tx+=t,s._ty+=e,s._sx*=r,s._sy*=i,s}extent(t,e,r,i){const s=this.copy();return s._xmin=t,s._xmax=r,s._ymin=e,s._ymax=i,s}hasFilter(){return this._hasFilter}readAttribute(t,e=!1){const r=this._readAttribute(t,e);if(void 0!==r)return r;for(const i of this._joined){i.setIndex(this.getIndex());const r=i._readAttribute(t,e);if(void 0!==r)return r}}readAttributes(){return this._readAttributes()}joinAttributes(t){this._joined.push(t)}readArcadeFeature(){return this}geometry(){const t=this.readHydratedGeometry(),e=n(t,this.geometryType,this.hasZ,this.hasM),r=i(e);return r.spatialReference=this._arcadeSpatialReference,r}field(t){return this.readAttribute(t,!0)}hasField(t){return!0}setField(t,e){}keys(){return[]}castToText(){return""}removeAtIndex(t){e(this._deleted)&&(this._deleted=o.create(this.getApproximateSize())),this._deleted.set(t)}_getExists(){return e(this._deleted)||!this._deleted.has(this.getIndex())}_computeCentroid(){if("esriGeometryPolygon"!==this.geometryType)return null;const t=this.readUnquantizedGeometry();if(!t||t.hasIndeterminateRingOrder)return null;const e=r(this.getQuantizationTransform(),null);return a(new s,t,this.hasM,this.hasZ,e)}copyInto(t){t.seen=this.seen,t._storage=this._storage,t._arcadeSpatialReference=this._arcadeSpatialReference,t._joined=this._joined,t._tx=this._tx,t._ty=this._ty,t._sx=this._sx,t._sy=this._sy,t._xmin=this._xmin,t._xmax=this._xmax,t._ymin=this._ymin,t._ymax=this._ymax}}export{d as FeatureSetReader};
