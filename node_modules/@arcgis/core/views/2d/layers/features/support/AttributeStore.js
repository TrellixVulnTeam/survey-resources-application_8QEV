/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import t from"../../../../../core/has.js";import{isNone as e,isSome as i,mapMany as s,forEachSome as r,andThen as a,unwrap as o}from"../../../../../core/maybe.js";import n from"../../../../../core/Logger.js";import l from"../../../../../core/Error.js";import{createAbortController as h,createResolver as c,isAbortError as u}from"../../../../../core/promiseUtils.js";import{clamp as d}from"../../../../../core/mathUtils.js";import{diff as p}from"../../../../../core/accessorSupport/diffUtils.js";import _ from"../../../../../layers/support/FieldsIndex.js";import{MAX_FILTERS as g,HIGHLIGHT_FLAG as f,ATTRIBUTE_DATA_VV as m,NAN_MAGIC_NUMBER as y,ATTRIBUTE_DATA_ANIMATION as x}from"../../../engine/webgl/definitions.js";import{getPixelArrayCtor as b}from"../../../engine/webgl/Utils.js";import{createDebugLogger as z,DEBUG_ATTR_UPDATES as T}from"../../../engine/webgl/util/debug.js";import{getVisualVariableSizeValueRepresentationRatio as S}from"../tileRenderers/support/visualVariablesUtils.js";const w=n.getLogger("esri.views.layers.2d.features.support.AttributeStore"),A=z(T,w),k=2147483647,D=2147483648,E=254,F=255,U=0,R=1,C=t=>(t&D)>>>31,M=t=>t&k,B=t=>C(t)===R?E:F;function v(t){return C(t)===R}const j={sharedArrayBuffer:t("esri-shared-array-buffer"),atomics:t("esri-atomics")};function I(t,e){return i=>e(t(i))}class P{constructor(t,e,i,s){this.size=0,this.texelSize=4;const{pixelType:r,layout:a,textureOnly:o}=s;this.textureOnly=o||!1,this.pixelType=r,this._ctype=e,this.layout=a,this._resetRange(),this._shared=t,this.size=i,o||(this.data=this._initData(r,i,t,e))}get buffer(){return a(this.data,(t=>t.buffer))}unsetComponentAllTexels(t,e){const i=o(this.data);for(let s=0;s<this.size*this.size;s++)i[s*this.texelSize+t]&=~e;this.dirtyStart=0,this.dirtyEnd=this.size*this.size-1}setComponentAllTexels(t,e){const i=o(this.data);for(let s=0;s<this.size*this.size;s++)i[s*this.texelSize+t]|=255&e;this.dirtyStart=0,this.dirtyEnd=this.size*this.size-1}setComponent(t,e,i){const s=o(this.data);for(const r of i)s[r*this.texelSize+t]|=e,this.dirtyStart=Math.min(this.dirtyStart,r),this.dirtyEnd=Math.max(this.dirtyEnd,r)}setComponentTexel(t,e,i){o(this.data)[i*this.texelSize+t]|=e,this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,i)}unsetComponentTexel(t,e,i){o(this.data)[i*this.texelSize+t]&=~e,this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,i)}getData(t,e){const i=M(t);return o(this.data)[i*this.texelSize+e]}setData(t,e,i){const s=M(t),r=1<<e;0!=(this.layout&r)?(this.data[s*this.texelSize+e]=i,this.dirtyStart=Math.min(this.dirtyStart,s),this.dirtyEnd=Math.max(this.dirtyEnd,s)):w.error("mapview-attributes-store","Tried to set a value for a texel's readonly component")}lock(){5121===this.pixelType&&this._shared&&j.atomics&&"local"!==this._ctype&&Atomics.store(this.data,0,1)}unlock(){5121===this.pixelType&&this._shared&&j.atomics&&"local"!==this._ctype&&Atomics.store(this.data,0,0)}expand(t){if(this.size=t,!this.textureOnly){const e=this._initData(this.pixelType,t,this._shared,this._ctype),i=o(this.data);e.set(i),this.data=e}}toMessage(){const t=this.dirtyStart,e=this.dirtyEnd,i=this.texelSize;if(t>e)return null;this._resetRange();const s=!(this._shared||"local"===this._ctype),r=this.pixelType,a=this.layout,n=o(this.data);if(!n.slice){if(!s)return{start:t,end:e,data:null,pixelType:r,layout:a};return{start:t,end:e,data:new(b(this.pixelType))(Array.prototype.slice.call(this.data,t*i,(e+1)*i)),pixelType:r,layout:a}}return{start:t,end:e,data:s&&n.slice(t*i,(e+1)*i)||null,pixelType:r,layout:a}}_initData(t,e,i,s){const r=i&&"local"!==s?SharedArrayBuffer:ArrayBuffer,a=b(t),o=new a(new r(e*e*4*a.BYTES_PER_ELEMENT));for(let n=0;n<o.length;n+=4)o[n+1]=255;return o}_resetRange(){this.dirtyStart=2147483647,this.dirtyEnd=0}}class O{constructor(t,e){this._client=t,this.config=e,this._attributeComputeMap=new Map,this._blocks=new Array,this._filters=new Array(g),this._targetType=0,this._abortController=h(),this._hasScaleExpr=!1,this._size=32,this._idsToHighlight=new Set;const i=e.supportsTextureFloat?5126:5121;A(`Creating AttributeStore ${j.sharedArrayBuffer?"with":"without"} shared memory`),this._blockDescriptors=[{pixelType:5121,layout:1},{pixelType:5121,layout:15,textureOnly:!0},{pixelType:i,layout:15},{pixelType:i,layout:15}],this._blocks=this._blockDescriptors.map((()=>null))}destroy(){this._abortController.abort()}get hasScaleExpr(){return this._hasScaleExpr}get _signal(){return this._abortController.signal}update(i,s){this.config=s;const r=s.schema.processors[0].storage,a=p(this._schema,r);if((i.targets.feature||i.targets.aggregate)&&(i.storage.data=!0),a&&(t("esri-2d-update-debug")&&console.debug("Applying Update - AttributeStore:",a),i.storage.data=!0,this._schema=r,this._attributeComputeMap.clear(),!e(r))){switch(r.target){case"feature":this._targetType=U;break;case"aggregate":this._targetType=R}for(const t of r.mapping)this._bindAttribute(t)}}onTileData(t,i){if(e(i.addOrUpdate))return;const s=i.addOrUpdate.getCursor();for(;s.next();){const t=s.getDisplayId();this.setAttributeData(t,s)}}invalidateResources(){this._createResourcesPromise=null,this._abortController.abort(),this._abortController=h()}async setHighlight(t,e){const i=1,s=this._getBlock(0),r=e.map((t=>M(t)));s.lock(),s.unsetComponentAllTexels(0,i),s.setComponent(0,i,r),s.unlock(),this._idsToHighlight.clear();for(const a of t)this._idsToHighlight.add(a);await this.sendUpdates()}async updateFilters(e,i){const{config:s,service:r,spatialReference:a}=i,{filters:o}=s,n=o.map(((t,e)=>this._updateFilter(t,e,r,a)));(await Promise.all(n)).some((t=>t))&&(e.storage.filters=!0,t("esri-2d-update-debug")&&console.debug("Applying Update - AttributeStore:","Filters changed"))}setData(t,e,i,s){const r=M(t);this._ensureSizeForTexel(r),this._getBlock(e).setData(t,i,s)}getData(t,e,i){return this._getBlock(e).getData(t,i)}getHighlightFlag(t){return this._idsToHighlight.has(t)?f:0}unsetAttributeData(t){const e=M(t);this._getBlock(0).setData(e,0,0)}setAttributeData(t,e){const i=M(t);if(this._ensureSizeForTexel(i),this._getBlock(0).setData(i,0,this.getFilterFlags(e)),this._targetType!==C(t))return;const s=this._attributeComputeMap,r=this.config.supportsTextureFloat?1:2,a=4;s.size&&s.forEach(((t,s)=>{const o=s*r%a,n=Math.floor(s*r/a),l=this._getBlock(n+m),h=t(e);if(this.config.supportsTextureFloat)l.setData(i,o,h);else if(h===y)l.setData(i,o,255),l.setData(i,o+1,255);else{const t=d(Math.round(h),-32767,32766)+32768,e=255&t,s=(65280&t)>>8;l.setData(i,o,e),l.setData(i,o+1,s)}}))}sendUpdates(){if(this._nextUpdate)return this._nextUpdate.promise;if(this._currUpdate)return this._nextUpdate=c(),this._nextUpdate.promise;const t={blocks:this._blocks.map((t=>i(t)?t.toMessage():null))};return this._currUpdate=this._createResources().then((()=>{const e=()=>{if(this._currUpdate=null,this._nextUpdate){const t=this._nextUpdate;this._nextUpdate=null,this.sendUpdates().then((()=>t.resolve()))}},i=this._client.update(t,this._signal).then(e).catch(e);return this._client.render(this._signal),i})).catch((t=>u(t)?(this._createResourcesPromise=null,this._createResources()):(w.error(new l("mapview-attribute-store","Encountered an error during client update",t)),Promise.resolve()))),this._currUpdate}_ensureSizeForTexel(t){for(;t>=this._size*this._size;)if(this._expand())return}_bindAttribute(t){function e(){return t.normalizationField?e=>{const i=e.readAttribute(t.normalizationField);if(!i)return null;return e.readAttribute(t.field)/i}:e=>e.readAttribute(t.field)}function i(){return t.normalizationField&&w.warn("mapview-arcade","Ignoring normalizationField specified with an arcade expression which is not supported."),e=>e.getComputedNumericAtIndex(t.fieldIndex)}let s;if(null!=t.fieldIndex)s=i();else{if(!t.field)return;s=e()}if(t.valueRepresentation){s=I(s,(e=>S(e,t.valueRepresentation)))}const r=t=>null===t||isNaN(t)||t===1/0?y:t;this._attributeComputeMap.set(t.binding,I(s,r))}_createResources(){if(i(this._createResourcesPromise))return this._createResourcesPromise;this._getBlock(x),A("Initializing AttributeStore");const t={shared:j.sharedArrayBuffer&&!("local"===this._client.type),size:this._size,blocks:s(this._blocks,(t=>({textureOnly:t.textureOnly,buffer:t.buffer,pixelType:t.pixelType})))},r=this._client.initialize(t,this._signal).catch((t=>{u(t)?this._createResourcesPromise=null:w.error(new l("mapview-attribute-store","Encountered an error during client initialization",t))}));return this._createResourcesPromise=r,r.then((()=>e(this._createResourcesPromise)?this._createResources():void 0)),r}_getBlock(t){const e=this._blocks[t];if(i(e))return e;A(`Initializing AttributeBlock at index ${t}`);const s=j.sharedArrayBuffer,r=this._client.type,a=new P(s,r,this._size,this._blockDescriptors[t]);return this._blocks[t]=a,this._createResourcesPromise=null,a}_expand(){if(this._size<this.config.maxTextureSize){const t=this._size<<=1;return A("Expanding block size to",t,this._blocks),r(this._blocks,(e=>e.expand(t))),this._createResourcesPromise=null,this._size=t,0}return w.error(new l("mapview-limitations","Maximum number of onscreen features exceeded.")),-1}async _updateFilter(t,s,r,a){const o=this._filters[s],n=i(o)&&o.hash;if(!o&&!t)return!1;if(n===JSON.stringify(t))return!1;if(e(t)){const t=1<<s+1,e=this._getBlock(0);return this._filters[s]=null,e.setComponentAllTexels(0,t),this.sendUpdates(),!0}const l=await this._getFilter(s,r);return await l.update(t,a),!0}async _getFilter(t,e){const s=this._filters[t];if(i(s))return s;const{default:r}=await import("../../../../../layers/graphics/data/FeatureFilter.js"),a=new r({geometryType:e.geometryType,hasM:!1,hasZ:!1,timeInfo:e.timeInfo,fieldsIndex:new _(e.fields)});return this._filters[t]=a,a}isVisible(t){return!!(2&this._getBlock(0).getData(t,0))}getFilterFlags(t){let i=0;const s=B(t.getDisplayId());for(let a=0;a<this._filters.length;a++){const r=!!(s&1<<a),o=this._filters[a];i|=(!r||e(o)||o.check(t)?1:0)<<a}let r=0;if(this._idsToHighlight.size){const e=t.getObjectId();r=this.getHighlightFlag(e)}return i<<1|r}}export default O;export{R as DISPLAY_ID_TYPE_AGGREGATE,U as DISPLAY_ID_TYPE_FEATURE,B as getDisplayIdFilterMask,M as getDisplayIdTexel,C as getDisplayIdType,v as isAggregateId};
