/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import t from"../../../../../core/has.js";import{isSome as r,andThen as s,isNone as i,unwrap as o}from"../../../../../core/maybe.js";import a from"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import"../../../../../core/accessorSupport/decorators/property.js";import{subclass as n}from"../../../../../core/accessorSupport/decorators/subclass.js";import"../../../../../core/Error.js";import"../../../../../core/urlUtils.js";import"../../../../../core/uuid.js";import"../../../../../portal/support/resourceExtension.js";import{throwIfAborted as c,all as l,isAbortError as d}from"../../../../../core/promiseUtils.js";import m from"../../../../../geometry/SpatialReference.js";import{diff as p,hasDiff as h}from"../../../../../core/accessorSupport/diffUtils.js";import{COLLISION_EARLY_REJECT_BUCKET_SIZE as f}from"../../../engine/webgl/definitions.js";import{bidiText as u}from"../../../engine/webgl/util/BidiText.js";import{CollisionGrid as g}from"../../../engine/webgl/collisions/CollisionGrid.js";import{forEachGeometryType as y}from"../../../engine/webgl/Utils.js";import{DisplayRecordReader as _}from"../../../engine/webgl/cpuMapped/DisplayRecordReader.js";import{isAggregateId as b}from"../support/AttributeStore.js";import{MeshData as w}from"../../../engine/webgl/mesh/MeshData.js";import{createMatcher as j}from"../../../engine/webgl/mesh/factories/matcherUtils.js";import{codepoints as v}from"../textUtils.js";import{WGLTemplateStore as S}from"../../../engine/webgl/mesh/templates/WGLTemplateStore.js";import{WGLMeshFactory as D}from"../../../engine/webgl/mesh/factories/WGLMeshFactory.js";import T from"./BaseProcessor.js";a.getLogger("esri.views.2d.layers.features.processors.SymbolProcessor");function k(e,t){return(!e.minScale||e.minScale>=t)&&(!e.maxScale||e.maxScale<=t)}function x(e){const t=e.message,i={message:{data:{},tileKey:t.tileKey},transferList:new Array};for(const o in t.data){const e=t.data[o];if(i.message.data[o]=null,r(e)){const t=e.stride,r=e.indices.slice(0),a=e.vertices.slice(0),n=e.records.slice(0),c={stride:t,indices:r,vertices:a,records:n,metrics:s(e.metrics,(e=>e.slice(0)))};i.transferList.push(r,a,n),i.message.data[o]=c}}return i}let C=class extends T{constructor(){super(...arguments),this.type="symbol",this._matchers={feature:null,aggregate:null},this._bufferData=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))])}destroy(){}get supportsTileUpdates(){return!0}async update(e,r){const s=r.schema.processors[0];if("symbol"!==s.type)return;const i=p(this._schema,s);h(i,"mesh")&&(t("esri-2d-update-debug")&&console.debug("Applying Update - Processor:",i),e.mesh=!0,e.why.mesh.push("Symbology changed"),this._schema=s,this._factory=this._createFactory(s),this._factory.update(s,this.tileStore.tileScheme.tileInfo))}onTileMessage(e,t,r,s){return c(s),this._onTileData(e,t,r,s)}onTileClear(e){const t={clear:!0};return this._bufferData.delete(e.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t})}onTileError(e,t,r){const s=r.signal,i={tileKey:e.id,error:t};return this.remoteClient.invoke("tileRenderer.onTileError",i,{signal:s})}onTileUpdate(e){for(const t of e.removed){if(!this._bufferData.has(t.key.id))continue;this._bufferData.get(t.key.id).forEach((e=>{const t=new Set;y((s=>{const i=e.message.data[s];if(r(i)){const e=_.from(i.records).getCursor();for(;e.next();)t.add(e.id)}}));const s=e.message.tileKey,i={type:"update",addOrUpdate:null};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:s,data:i})})),this._bufferData.delete(t.key.id)}for(const t of e.added)this._bufferData.forEach((e=>{for(const r of e)r.message.tileKey===t.id&&this._updateTileMesh("append",t,x(r),[],!1,!1,null)}))}_addBufferData(e,t){this._bufferData.has(e)||this._bufferData.set(e,[]),this._bufferData.get(e).push(x(t))}_createFactory(e){const{geometryType:t,objectIdField:r,fields:i}=this.service,o=(e,t)=>this.remoteClient.invoke("tileRenderer.getMaterialItems",e,t),a={geometryType:t,fields:i,spatialReference:m.fromJSON(this.spatialReference)},n=new S(o,!1),{matcher:c,aggregateMatcher:l}=e.mesh;return this._store=n,this._matchers.feature=j(c,n,a),this._matchers.aggregate=s(l,(e=>j(e,n,a))),new D(t,r,n)}async _onTileData(e,t,r,s){const{type:o,addOrUpdate:a,remove:n}=t,c=t.end;if(!a){const t={type:o,addOrUpdate:null,remove:n,clear:!1,end:c};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},s)}const d=this._processFeatures(e,a,r,s);try{const r=await d;if(i(r)){const t={type:o,addOrUpdate:null,remove:n,clear:!1,end:c};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},s)}for(const t of r)e.key.id!==t.message.tileKey&&this._addBufferData(e.key.id,t);await l(r.map((r=>{const i=e.key.id===r.message.tileKey,a=i?t.remove:[],n=i&&t.end;return this._updateTileMesh(o,e,r,a,n,t.clear,s.signal)})))}catch(m){this._handleError(e,m,s)}}async _updateTileMesh(e,t,r,i,a,n,l){const d=e,m=r.message.tileKey;m!==t.key.id&&(a=!1);const p=s(r,(e=>e.message)),h=s(r,(e=>e.transferList))||[],f={type:d,addOrUpdate:p,remove:i,clear:!1,end:a},u={transferList:o(h)||[],signal:l};return c(u),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:m,data:f},u)}async _processFeatures(e,t,r,s){if(i(t)||!t.hasFeatures)return null;const o={transform:e.transform,hasZ:!1,hasM:!1},a=this._factory,n={viewingMode:"",scale:e.scale},l=await this._matchers.feature,d=await this._matchers.aggregate;c(s);const m=this._getLabelInfos(e,t);return await a.analyze(t.getCursor(),l,d,o,n),c(s),this._writeFeatureSet(e,t,o,m,a,r)}_writeFeatureSet(e,t,s,i,o,a){const n=t.getApproximateSize(),c="simple"===this._schema.mesh.matcher.type&&this._schema.mesh.matcher.isDotDensity,l=new w(e.key.id,{features:n,records:n,metrics:0},c,a,!0),d={viewingMode:"",scale:e.scale},m=t.getCursor();for(;m.next();)try{const t=m.getDisplayId(),a=r(i)?i.get(t):null;o.writeCursor(l,m,s,d,e.level,a)}catch(h){}const p=e.tileInfoView.tileInfo.isWrappable;return l.serialize(p)}_handleError(e,t,r){if(!d(t)){const s={tileKey:e.id,error:t.message};return this.remoteClient.invoke("tileRenderer.onTileError",s,{signal:r.signal})}}_getLabelInfos(e,t){const r=this._schema.mesh.labels,o=s(r,(t=>t.filter((t=>k(t,e.scale)))));if(i(o)||0===o.length)return null;const a=new Map,n=(new g(f),t.getCursor());for(;n.next();){const e=n.getDisplayId(),t=[],r=b(e),s=r&&1!==n.readAttribute("cluster_count")?"aggregate":"feature";for(const i of o){if(i.target!==s)continue;const o=n.getStorage(),a=r&&"feature"===s?o.getComputedStringAtIndex(n.readAttribute("referenceId"),i.fieldIndex):o.getComputedStringAtIndex(e,i.fieldIndex);if(!a)continue;const c=u(a.toString()),l=c[0],d=c[1];this._store.getMosaicItem(i.symbol,v(l)).then((e=>{t[i.index]={glyphs:e.glyphMosaicItems,rtl:d,index:i.index}}))}a.set(e,t)}return a}_shouldDiscard(e,t){switch(this.service.geometryType){case"esriGeometryPoint":{const r=t.readLegacyPointGeometry();return!r||e.checkOverlap(r.x,r.y)}case"esriGeometryPolygon":{const r=t.readLegacyCentroid();return!r||e.checkOverlap(r.x,r.y)}default:return!1}}_markUsed(e,t){switch(this.service.geometryType){case"esriGeometryPoint":{const{x:r,y:s}=t.readLegacyPointGeometry();return e.markUsed(r,s)}case"esriGeometryPolygon":{const{x:r,y:s}=t.readLegacyCentroid();return e.markUsed(r,s)}}}};C=e([n("esri.views.2d.layers.features.processors.SymbolProcessor")],C);var U=C;export default U;
