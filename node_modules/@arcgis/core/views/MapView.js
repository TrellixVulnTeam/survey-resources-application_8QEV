/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import t from"../core/has.js";import{isSome as i}from"../core/maybe.js";import r from"../core/Logger.js";import"../core/accessorSupport/ensureType.js";import{property as s}from"../core/accessorSupport/decorators/property.js";import{subclass as a}from"../core/accessorSupport/decorators/subclass.js";import n from"../core/Error.js";import"../core/urlUtils.js";import"../core/uuid.js";import"../portal/support/resourceExtension.js";import o from"../core/Collection.js";import h from"../Graphic.js";import p from"../core/CollectionFlattener.js";import{init as l}from"../core/watchUtils.js";import d from"../webmap/background/ColorBackground.js";import{initialize as c}from"../core/workers/workers.js";import{toRenderSettings as g}from"./support/screenshotUtils.js";import{BreakpointsOwner as u}from"./BreakpointsOwner.js";import{DOMContainer as m}from"./DOMContainer.js";import{isSupportedScreenPointEvent as w,createScreenPointFromSupportedEvent as y}from"./support/screenUtils.js";import f from"./MapViewBase.js";import v from"./2d/input/MapViewInputManager.js";import V from"./2d/support/HighlightOptions.js";import{check as b}from"./support/WebGLRequirements.js";import _ from"./ui/2d/DefaultUI2D.js";const M=r.getLogger("esri.views.MapView");let j,O,C,L,S,k;async function E(){const[,{GraphicsView2D:e,GraphicContainer:t,LabelManager:i,MapViewNavigation:r,MagnifierView2D:s,Stage:a}]=await Promise.all([import("./webgl.js"),import("./2d/mapViewDeps.js")]);O=e,C=t,L=i,S=r,k=s,j=a}function x(e){return e instanceof h}function N(e,t,i){if(e)if(Array.isArray(e)||o.isCollection(e)){if(0===e.length)return;e.forEach((e=>N(e,t,i)))}else x(e)?t.add(e):i.add(e)}let P=class extends(u(m(f))){constructor(e){super(e),this._magnifierView=null,this._stage=null,this._resolveWhenReady=[],this.rootLayerViews=new p({root:this,rootCollectionNames:["basemapView.baseLayerViews","layerViews","basemapView.referenceLayerViews"],getChildrenFunction:e=>null}),this.floors=new o,this.graphicsView=null,this.highlightOptions=new V,this.inputManager=new v({view:this}),this.mapViewNavigation=null,this.supersampleScreenhotsEnabled=!0,this.ui=new _,this.rendering=!1,c()}destroy(){this.rootLayerViews.destroy(),this.inputManager.destroy(),this._set("inputManager",null)}get background(){return this.get("map.initialViewProperties.background")||null}set background(e){void 0===e?this._clearOverride("background"):this._override("background",e)}get textureManager(){return this._stage.painter.textureManager}get navigating(){return!(!this.mapViewNavigation||!this.mapViewNavigation.interacting)}toMap(e){if(w(e)){const t=y(this,e);return super.toMap(t)}return super.toMap(e)}hitTest(e,t){const i=w(e)?y(this,e):e;if(!this.ready||isNaN(i.x)||isNaN(i.y))return Promise.resolve({screenPoint:i,results:[]});const r=this.toMap(i),s=[this.graphicsView];s.push.apply(s,this.allLayerViews.toArray().reverse());const a=new Set,n=new Set,o=new Set,h=new Set;return t&&(N(t&&t.include,a,o),N(t&&t.exclude,n,h)),Promise.all(s.map((e=>!e||!e.hitTest||o.size>0&&!e.layer||o.size>0&&e.layer&&!o.has(e.layer)||h.size>0&&e.layer&&h.has(e.layer)?null:e.hitTest(i.x,i.y)))).then((e=>({screenPoint:i,results:e.filter((e=>null!=e&&(!(a.size>0)||a.has(e))&&(!(n.size>0)||!n.has(e)))).map((e=>({mapPoint:r,graphic:e})))})))}takeScreenshot(e){return this.ready?this._stage.takeScreenshot(g(e,this),this.allLayerViews):Promise.reject("Map view cannot be used before it is ready")}on(e,t,i,r){const s=this.inputManager&&this.viewEvents.on(e,t,i,r);return s||super.on(e,t)}hasEventListener(e){return super.hasEventListener(e)||this.viewEvents.hasHandler(e)}whenLayerView(e){return super.whenLayerView(e)}graphicChanged(e){if(this.graphicsView){this.graphicsView.graphicUpdateHandler(e)}}whenReady(){return new Promise((e=>{this.ready?e(this):this._resolveWhenReady.push(e)}))}forceDOMReadyCycle(){this.forceReadyCycle()}validate(){let e=b({checkMajorWebPerformanceCaveat:!1});return t("safari")&&t("safari")<9&&(e=new n("mapview:browser-not-supported","This browser is not supported by MapView (Safari < 9)",{type:"safari",requiredVersion:9,detectedVersion:t("safari")})),i(e)?(M.warn("#validate()",e.message),Promise.reject(e)):E()}_startup(){this.timeline.begin("MapView Startup"),super._startup(),this.graphics.owner=this;const e={disabledExtensions:this.deactivatedWebGLExtensions,debugWebGLExtensions:this.debugWebGLExtensions},t=new j(this.surface,{canvas:this.renderCanvas,supersampleScreenshots:this.supersampleScreenhotsEnabled,contextOptions:e,renderingOptions:this.renderingOptions,timeline:this.timeline}),i=new O({view:this,graphics:this.graphics,requestUpdateCallback:()=>this.requestUpdate(),container:new C(this.featuresTilingScheme)}),r=new S({view:this,animationManager:this.animationManager}),s=new L({view:this});this._magnifierView=new k,this._magnifierView.magnifier=this.magnifier,this._stage=t,this.frameTask.graphicsView=i,this._set("graphicsView",i),this._set("mapViewNavigation",r),this._set("labelManager",s),this.handles.add([this.rootLayerViews.on("change",(()=>this._updateStageChildren())),t.on("post-render",(()=>this._set("rendering",t.renderRequested))),t.on("will-render",(()=>this._set("rendering",t.renderRequested))),t.on("webgl-error",(e=>this.fatalError=e.error)),l(this,"stationary",(e=>t.stationary=e),!0),l(this,"state.id",(()=>t.state=this.state),!0),l(this,"background",(e=>{t.background=e,this._magnifierView.background=e}),!0),l(this,"magnifier",(e=>this._magnifierView.magnifier=e),!0),l(this,"renderingOptions",(e=>t.renderingOptions=e),!0),l(this,"highlightOptions",(()=>t.highlightOptions=this.highlightOptions),!0)],"map-view"),t.state=this.state,this._updateStageChildren();const a=this._resolveWhenReady;this._resolveWhenReady=[],a.forEach((e=>e(this))),this.timeline.end("MapView Startup")}_teardown(){this.handles.remove("map-view"),this.layerViewManager.clear(),this.labelManager.destroy(),this._magnifierView.destroy(),this._stage.destroy();this.graphicsView.destroy(),this.mapViewNavigation.destroy(),this._stage=null,this._set("graphicsView",null),this._magnifierView=null,this._set("labelManager",null),this._set("mapViewNavigation",null),this.graphics.owner=null,super._teardown()}_updateStageChildren(){this._stage.removeAllChildren(),this.rootLayerViews.forEach((e=>{this._stage.addChild(e.container)}));const e=this.graphicsView;this._stage.addChild(e.container),this._stage.addChild(this._magnifierView)}};e([s({type:d})],P.prototype,"background",null),e([s()],P.prototype,"floors",void 0),e([s()],P.prototype,"graphicsView",void 0),e([s({type:V})],P.prototype,"highlightOptions",void 0),e([s({readOnly:!0})],P.prototype,"inputManager",void 0),e([s({readOnly:!0})],P.prototype,"textureManager",null),e([s({readOnly:!0})],P.prototype,"mapViewNavigation",void 0),e([s({type:Boolean})],P.prototype,"navigating",null),e([s({type:Boolean,constructOnly:!0})],P.prototype,"supersampleScreenhotsEnabled",void 0),e([s({type:_})],P.prototype,"ui",void 0),e([s({readOnly:!0})],P.prototype,"rendering",void 0),e([s({constructOnly:!0})],P.prototype,"renderCanvas",void 0),e([s({constructOnly:!0})],P.prototype,"deactivatedWebGLExtensions",void 0),e([s({constructOnly:!0})],P.prototype,"debugWebGLExtensions",void 0),P=e([a("esri.views.MapView")],P);var W=P;export default W;
