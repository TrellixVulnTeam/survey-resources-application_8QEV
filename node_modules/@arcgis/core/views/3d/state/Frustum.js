/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{c as t}from"../../../chunks/vec3f64.js";import{g as i}from"../../../chunks/vec3.js";import{directionFromTo as s}from"../support/mathUtils.js";import{c as e,a as r,b as n,d as o,i as u,e as h,g as a,h as p,p as l}from"../../../chunks/frustum.js";class c{constructor(i){this.renderCoordsHelper=i,this.frustum=e(),this._points=r(),this.lines=new Array(12),this.origin=t(),this.direction=t(),this._altitude=null;for(let s=0;s<12;s++)this.lines[s]={origin:null,direction:t(),endpoint:null}}get planes(){return this.frustum}get points(){return this._points}get mutablePoints(){return this._points}update(t){n(t.viewMatrix,t.projectionMatrix,this.frustum,this._points),i(this.origin,t.eye),i(this.direction,t.viewForward),this._altitude=this.renderCoordsHelper.getAltitude(this.origin),this.updateLines()}updatePoints(t){for(let s=0;s<this._points.length;s++)i(this._points[s],t[s]);o(this.frustum,this._points),this.updateLines()}get altitude(){return this._altitude}intersectsSphere(t){return u(this.frustum,t)}intersectsRay(t){return h(this.frustum,t)}intersectsLineSegment(t,i){return a(this.frustum,t,i)}intersectsPoint(t){return p(this.frustum,t)}updateLines(){const t=this._points;for(let i=0;i<4;i++){const s=i,e=i+4;d(this.lines[i],t[s],t[e]),d(this.lines[i+4],t[s],3===i?t[0]:t[s+1]),d(this.lines[i+8],t[e],3===i?t[4]:t[e+1])}}}function d(t,i,e){t.origin=i,t.endpoint=e,s(t.direction,i,e)}c.planePointIndices=l,c.nearFarLineIndices=[[0,4],[1,5],[2,6],[3,7]];export{c as Frustum};
