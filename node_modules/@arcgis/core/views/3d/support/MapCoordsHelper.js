/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import e from"../../../core/Error.js";import r from"../../../geometry/SpatialReference.js";import t from"../../../geometry/Point.js";import"../../../geometry.js";import{result as o}from"../../../core/asyncUtils.js";import i from"../../../tasks/support/ProjectParameters.js";import{getReferenceEllipsoid as s}from"../../../geometry/projectionEllipsoid.js";import{getMetersPerUnitForSR as a}from"../../../core/unitUtils.js";import{create as m}from"../../../portal/support/geometryServiceUtils.js";class c{constructor(e,r,t=null){this.spatialReference=r,this.unitInMeters=a(this.spatialReference,s(this.spatialReference).metersPerDegree),this._geometryServicePromise=o(this.loadGeometryService(e,t))}async loadGeometryService(r,t){if(t)return t;try{return await m(r&&r.get("portalItem"))}catch{throw new e("mapcoordshelper:missing-geometry-service","Must specify geometryService in esri/config")}}async awaitGeometryService(){const e=await this._geometryServicePromise;if(!0===e.ok)return e.value;throw e.error}async toGeographic(e){const o=await this.awaitGeometryService();let s,a=!0;Array.isArray(e[0])&&"number"!=typeof e[0]?s=e:(s=[e],a=!1);const m=s.map((e=>e instanceof t?e:new t(e,this.spatialReference))),c=new i({geometries:m,outSpatialReference:r.WGS84}),p=(await o.project(c)).map((e=>"point"===e.type?[e.x,e.y]:void 0));return a?p:p[0]}}export default c;export{c as MapCoordsHelper};
