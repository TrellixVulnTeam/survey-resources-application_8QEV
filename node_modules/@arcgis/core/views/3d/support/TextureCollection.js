/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../core/maybe.js";import{isSVG as t}from"../../../core/urlUtils.js";import{throwIfAborted as r,createAbortController as s,onAbort as u,createAbortError as o}from"../../../core/promiseUtils.js";import{Task as i,ImmediateTask as n}from"../../support/Scheduler.js";import{testWebGLDriver as a}from"../webgl-engine/lib/WebGLDriverTest.js";import{Texture as l}from"../webgl-engine/lib/Texture.js";class h{constructor(t,r,s,u){this._streamDataRequester=t,this._stage=r,this._textureOptions=s,this._textureRequests=new Map,this._frameTask=e(u)?u.registerTask(i.TEXTURE_UNLOAD,(e=>this._frameTask.processQueue(e)),(()=>!1)):n}destroy(){this._frameTask.remove(),this._textureRequests.forEach((e=>this.releaseTextureRequest(e))),this._textureRequests.clear()}async fromUrl(t,i,n){r(n);const a=e(n)&&n.signal,l=this.makeUid(t,i);let h=this._textureRequests.get(l);if(!h){const e=s(),r=this._streamDataRequester.request(t,"image",{uid:l,signal:e.signal});h={referenceCount:0,texture:null,textureAsync:null,abortController:e},this._textureRequests.set(l,h),h.textureAsync=r.then((e=>{const r=this.createTexture(t,e,i);return h.texture=r,h.abortController=null,this.addToStage(r),{uid:l,texture:r}}),(e=>{throw h.abortController=null,e}))}return h.referenceCount++,new Promise(((e,t)=>{u(a,(()=>{t(o())})),h.textureAsync.then(e,t)})).catch((e=>{throw this.release(l),e}))}fromData(e,t){const r=this.makeUid(e);let s=this._textureRequests.get(r);return s||(s={referenceCount:0,texture:t(),textureAsync:null,abortController:null},this.addToStage(s.texture),this._textureRequests.set(r,s)),s.referenceCount++,{uid:r,texture:s.texture}}release(e){if(!this._textureRequests)return;const t=this._textureRequests.get(e);t?(t.referenceCount<1&&console.warn("TextureCollection: reference count is < 1 for "+e),t.referenceCount--,t.referenceCount<1&&this._frameTask.schedule((()=>this.releaseNow(e)))):console.warn(`TextureCollection: texture doesn't exist: '${e}'`)}get test(){return{textureRequests:this._textureRequests}}releaseNow(e){if(!this._textureRequests)return;const t=this._textureRequests.get(e);!t||t.referenceCount>0||(this.releaseTextureRequest(t),this._textureRequests.delete(e))}releaseTextureRequest(e){e.texture?this.removeFromStage(e.texture):e.abortController&&(e.abortController.abort(),e.abortController=null)}createTexture(e,r,s){const u={...this._textureOptions,powerOfTwoResizeMode:2};if(t(e)){if(s||0===r.width&&0===r.height){const e=r.width?r.height/r.width:1;s=s||64,e>1?(r.width=Math.round(s/e),r.height=s):(r.width=s,r.height=Math.round(s*e))}this._stage.renderView&&a(this._stage.renderView.renderingContext).svgAlwaysPremultipliesAlpha&&(u.preMultiplyAlpha=!1)}return u.width=r.width,u.height=r.height,new l(r,u)}addToStage(e){this._stage.add(e)}removeFromStage(e){this._stage.remove(e)}makeUid(e,t){return null!=t?`${e}.${t}px`:e}}export default h;export{h as TextureCollection};
