/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{isNone as e,get as t,isSome as r}from"../../../../core/maybe.js";import n from"../../../../core/Error.js";import{pt2px as s}from"../../../../core/screenUtils.js";import{isCalloutSupport as o}from"../../../../symbols/callouts/calloutUtils.js";import{a as i}from"../../../../chunks/vec2f64.js";import a from"../../webgl-engine/lib/GeometryUtil.js";import{HUDMaterial as l}from"../../webgl-engine/materials/HUDMaterial.js";import{validateSymbolLayerSize as c,namedAnchorToHUDMaterialAnchorPos as d}from"./graphicUtils.js";import{SymbolUpdateType as h,needsElevationUpdates2D as f}from"./elevationAlignmentUtils.js";import{perObjectElevationAligner as m}from"./ElevationAligners.js";import{ElevationContext as p}from"./ElevationContext.js";import u from"./Graphics3DObject3DGraphicLayer.js";import{Graphics3DSymbolLayer as g}from"./Graphics3DSymbolLayer.js";import{placePointOnGeometry as y,createStageObjectForHUD as x,extendPointGraphicElevationContext as v}from"./pointUtils.js";import{TextRenderParameters as b}from"../../webgl-engine/lib/TextRenderParameters.js";import O from"../../webgl-engine/lib/TextTexture.js";const P=[0,0,1];class E extends g{constructor(e,t,r,n){super(e,t,r,n),this._elevationOptions={supportsOffsetAdjustment:!0,supportsOnTheGround:!1},this.ensureDrapedStatus(!1)}async doLoad(){if(!this._drivenProperties.size){const e=c(this.symbolLayer.size);if(e)throw new n("graphics3dtextsymbollayer:invalid-size",e)}this._createTextRenderParameters()}_createTextRenderParameters(){const e=this._context.layerView.view.pixelRatio;this._textRenderParameters=b.fromSymbol(this.symbolLayer,e)}destroy(){super.destroy()}createGraphics3DGraphic(t){const r=t.graphic,n=y(r.geometry);if(e(n))return this.logger.warn(`unsupported geometry type for text symbol: ${r.geometry.type}`),null;const s=this.symbolLayer.text;if(!s)return null;const i=o(this.symbol)&&this.symbol.hasVisibleVerticalOffset()?this.symbol:null;return this._createAs3DShape(r,n,s,i)}createLabel(t,r,n,s){const o=t.graphic,i=y(o.geometry);if(e(i))return this.logger.warn(`unsupported geometry type for label: ${o.geometry.type}`),null;const a=r.text;return!a||/^\s+$/.test(a)?null:this._createAs3DShape(o,i,a,r,r,n,s)}setGraphicElevationContext(e,t,r=0){const n=super.setGraphicElevationContext(e,t);return n.addOffsetRenderUnits(r),n}layerOpacityChanged(){return this.logger.warn("layer opacity change not yet implemented in Graphics3DTextSymbolLayer"),!1}layerElevationInfoChanged(e,t){return S(e,t,((e,t)=>{this.updateGraphicElevationContext(t,e)})),h.UPDATE}slicePlaneEnabledChanged(e,t){return S(e,t,(e=>{for(const t of e.stageObject.geometryRecords)t.material.setParameterValues({slicePlaneEnabled:this._context.slicePlaneEnabled})})),!0}physicalBasedRenderingChanged(){return!0}pixelRatioChanged(){return!1}updateGraphicElevationContext(e,t){this.setGraphicElevationContext(e,t.elevationContext,t.metadata.elevationOffset),t.needsElevationUpdates=f(t.elevationContext.mode)||"absolute-height"===t.elevationContext.mode}_defaultElevationInfoNoZ(){return w}_createAs3DShape(n,o,c,h,g=j,y,b){const E=this.setGraphicElevationContext(n,new p,g.elevationOffset),S="polyline"===t(n.geometry,"type"),w=n.uid,_=this._context.stage.renderView.renderingContext,C=g.anchor in d?g.anchor:"center",G=d[C],L=e(b)?new O(_,c,this._textRenderParameters):null,D={occlusionTest:!0,screenOffset:g.screenOffset,anchorPos:G,polygonOffset:!0,color:[1,1,1,1],centerOffsetUnits:g.centerOffsetUnits,debugDrawBorder:g.debugDrawBorder,drawInSecondSlot:!0};if(r(L)&&(D.textureId=L.id,D.texCoordScale=L.texcoordScale),r(b)&&(D.textureId=b.id),r(h)&&r(h.verticalOffset)){const{screenLength:e,minWorldLength:t,maxWorldLength:r}=h.verticalOffset;D.verticalOffset={screenLength:s(e),minWorldLength:t||0,maxWorldLength:null!=r?r:1/0}}if(this._context.screenSizePerspectiveEnabled){const{screenSizePerspectiveSettings:e,screenSizePerspectiveSettingsLabels:t}=this._context.sharedResources;D.screenSizePerspective=t.overridePadding(this._textRenderParameters.haloSize),D.screenSizePerspectiveAlignment=e}let U;if(S&&(D.shaderPolygonOffset=1e-4),D.slicePlaneEnabled=this._context.slicePlaneEnabled,r(y)){const t=JSON.stringify(D);U=y.get(t),e(U)&&(U=new l(D),y.add(t,U))}else U=new l(D);const R=[U],z=g.translation,T=r(L)?[L.displayWidth,L.displayHeight]:[0,0],A=g.centerOffset,W=P,I=[0,0],V=[a.createPointGeometry(W,z,null,T,A,I,null)],B=this._context.layer.uid,H=x(this._context,o,V,R,null,null,E,B,w);if(null===H)return null;const $=m,N=new u(this,H.object,V,e(y)?R:null,r(L)?[L]:null,$,E);N.alignedSampledElevation=H.sampledElevation,N.needsElevationUpdates=f(E.mode)||"absolute-height"===E.mode;const{displayWidth:k,displayHeight:J}=r(L)?L:g;N.getScreenSize=(e=i())=>(e[0]=k,e[1]=J,e);const M={labelText:c,elevationOffset:g.elevationOffset};return N.metadata=M,v(N,o,this._context.elevationProvider),N}}function S(e,t,n){e&&e.forEach((e=>{const s=t(e);r(s)&&n(s,e.graphic)}))}const w={mode:"relative-to-ground",offset:0},j={text:null,translation:[0,0,0],elevationOffset:0,centerOffset:[0,0,0,1],screenOffset:[0,0],anchor:"center",verticalOffset:null,centerOffsetUnits:null,debugDrawBorder:!1,displayWidth:0,displayHeight:0};export default E;export{E as Graphics3DTextSymbolLayer};
