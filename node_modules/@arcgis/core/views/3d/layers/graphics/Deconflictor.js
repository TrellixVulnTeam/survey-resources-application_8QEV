/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as i}from"../../../../chunks/tslib.es6.js";import"../../../../core/has.js";import{isNone as t,isSome as s}from"../../../../core/maybe.js";import"../../../../core/Logger.js";import"../../../../core/accessorSupport/ensureType.js";import{property as e}from"../../../../core/accessorSupport/decorators/property.js";import{subclass as r}from"../../../../core/accessorSupport/decorators/subclass.js";import"../../../../core/urlUtils.js";import"../../../../core/uuid.js";import"../../../../portal/support/resourceExtension.js";import o from"../../../../core/PooledArray.js";import a from"../../../../core/Accessor.js";import{lerp as c}from"../../../../core/mathUtils.js";import{Z as n,c as h}from"../../../../chunks/vec3f64.js";import{i as l,a as p,s as u,g as d}from"../../../../chunks/vec3.js";import{getReferenceEllipsoid as f}from"../../../../geometry/projectionEllipsoid.js";import{a as m}from"../../../../chunks/mat4.js";import{create as g,empty as b,offset as v,width as y,height as G,expand as B,intersects as S}from"../../../../geometry/support/aaBoundingRect.js";import{a as w}from"../../../../chunks/mat4f64.js";import{a as j}from"../../../../chunks/vec2f64.js";import{a as D}from"../../../../chunks/vec4f64.js";import{s as V,t as N,b as _}from"../../../../chunks/vec4.js";import{i as P}from"../../../../chunks/sphere.js";import{sphere as C,ray as x,boundedPlane as I}from"../../support/geometryUtils.js";import A from"../../webgl-engine/lib/Camera.js";import M from"../../support/debugFlags.js";import{drawAccelerationStruct as z,prepare as E,drawPoly as O}from"./deconflictorDebug.js";import{applyPrecomputedScaleFactor as T}from"../../webgl-engine/lib/screenSizePerspectiveUtils.js";import{HUDMaterial as F}from"../../webgl-engine/materials/HUDMaterial.js";const X=h(),Y=D(),R=D(),k=h(),U=w(),W=C.create(),L=x.create(),H=h(),Z=g();class q{constructor(){this.aabr=g(),this.distance=0,this.culled=!1,this.visible=!1}}class J{constructor(i,t,s={}){this.graphics3DGraphic=i,this.slicePlaneEnabled=t,this.info=s}}class K{constructor(){this.active=new Map,this.visible=new Map}clear(){this.active.clear(),this.visible.clear()}}class Q{}class ${constructor(){this.sortArray=new o({allocator:i=>i||new Q})}}class ii{constructor(){this.camera=new A,this.slicePlane=I.create(),this.slicePlaneEnabled=!1}copyFrom(i){this.camera.copyFrom(i.camera),I.copy(i.slicePlane,this.slicePlane),this.slicePlaneEnabled=i.slicePlaneEnabled}}let ti=class extends a{constructor(){super(...arguments),this._dirty=!1,this._runningViewState=new ii,this._state=0,this.graphics=new K,this.iterators=new $,this.accBinsNumX=15,this.accBinsNumY=20,this.accBinsSizeX=0,this.accBinsSizeY=0,this.accBins=null,this.accNumTests=0}get dirty(){return this._dirty}get state(){return this._state}destroy(){this.graphics.clear(),this.iterators=null}setDirty(){!this._dirty&&this.graphics.active.size>0&&(this._dirty=!0,this.notifyChange("updating"))}get updating(){return 0!==this._state||this._dirty}get updatingProgress(){if(!this.updating)return 1;const i=this._state/4;return this._dirty?.5*i:i}needsUpdate(){return this.view.ready&&null!=this.view.state&&this.updating}update(i){switch(this._state){case 0:this.startUpdate(),i.madeProgress();case 1:if(this._state=1,!this.processActiveGraphics(i))return;case 2:if(this._state=2,!this.sortVisibleGraphics(i))return;case 3:if(this._state=3,!this.deconflictVisibleGraphics(i))return;default:z(this,this.graphics.visible),this._state=0,this.notifyChange("updating")}}modifyGraphics(i,t){t?i.forEach((i=>this.addToActiveGraphics(i))):i.forEach((i=>this.removeFromActiveGraphics(i))),this.setDirty()}layerSupportsDeconfliction(i){if(t(i)||"object3d"!==i.type)return!1;const s=i.stageObject;if(1!==(s?s.getNumGeometryRecords():0))return!1;return s.getGeometryRecord(0).material instanceof F}startUpdate(){E(this.view),this._dirty=!1,this._runningViewState.copyFrom(this.viewState);const{fullWidth:i,fullHeight:t}=this._runningViewState.camera;this.initBins(i,t),this.resetIterators()}addToActiveGraphics(i){i.info[this.visibilityGroup]=new q,this.graphics.active.set(i.graphics3DGraphic.graphic.uid,i),this.setDirty()}removeFromActiveGraphics(i){this.removeFromVisibleGraphics(i),si(i,this.visibilityGroup),delete i.info[this.visibilityGroup],this.graphics.active.delete(i.graphics3DGraphic.graphic.uid),this.setDirty()}addToVisibleGraphics(i){this.graphics.visible.set(i.graphics3DGraphic.graphic.uid,i)}removeFromVisibleGraphics(i){this.graphics.visible.delete(i.graphics3DGraphic.graphic.uid)}processActiveGraphics(i){const t=this.ensureActiveGraphicsIterator(),e=m(U,this._runningViewState.camera.projectionMatrix),r="global"===this.view.viewingMode&&1===this.view.map.ground.opacity&&this._runningViewState.camera.relativeElevation>0?W:null;let o=0;for(s(r)&&(l(r,n,this._runningViewState.camera.viewMatrix),r[3]=f(this.view.spatialReference).radius,o=C.distanceToSilhouette(r,n));!i.done;){i.madeProgress();const s=t.next();if(s.done)return this.resetActiveGraphicsIterator(),!0;const a=s.value,c=a&&a.info[this.visibilityGroup];c&&(this.collectGraphics3DGraphics(a,e,r,o),c.culled?this.removeFromVisibleGraphics(a):this.addToVisibleGraphics(a))}return!1}sortVisibleGraphics(i){const t=this.ensureSortGraphicsIterator();for(;!i.done;){const s=t.next();if(i.madeProgress(),s.done)return this.resetSortGraphicsIterator(),!0}return!1}deconflictVisibleGraphics(i){const t=this.ensureVisibleGraphicsIterator(),s=1===this.visibilityGroup;for(;!i.done;){i.madeProgress();const e=t.next();if(e.done)return this.resetVisibleGraphicsIterator(),!0;const r=e.value,o=r.info[this.visibilityGroup];if(!o||o.culled)continue;const a=r.graphics3DGraphic,c=(!s||a.isVisible())&&!this.isConflicted(r);c&&this.addToBins(r),o.visible=c,this.setGraphicVisibility(r,c),O(o,c)}return!1}resetIterators(){this.iterators.active=null,this.iterators.visible=null,this.iterators.sort=null}ensureActiveGraphicsIterator(){return this.iterators.active||(this.iterators.active=ei(this.graphics.active)),this.iterators.active}resetActiveGraphicsIterator(){this.iterators.active=null}ensureVisibleGraphicsIterator(){return this.iterators.visible||(this.iterators.visible=ei(this.graphics.visible)),this.iterators.visible}resetVisibleGraphicsIterator(){this.iterators.visible=null}ensureSortGraphicsIterator(){return this.iterators.sort||(this.iterators.sort=ri(this.graphics.visible,this.iterators.sortArray,this.visibilityGroup)),this.iterators.sort}resetSortGraphicsIterator(){this.iterators.sort=null}collectGraphics3DGraphics(i,e,r,o){const a=i.graphics3DGraphic;if(a.destroyed)return;const c=i.info[this.visibilityGroup];if(!a.isVisible(0,3))return void(c.culled=!0);const n=this.getGraphicsLayers(a);b(c.aabr);let h=null;for(const l of n){if(!this.layerSupportsDeconfliction(l))continue;const a=l.stageObject.getGeometryRecord(0).material;if(t(h)){if(h=this.getProjectionInfo(l,e,ci),h.isOutsideScreen||this.isCulledBySlice(i,X)||s(r)&&this.isCulledByHorizon(h,r,o))return void(c.culled=!0);!M.DISABLE_DECONFLICTOR_VISIBILITY_OFFSET&&c.visible&&(h.distance*=.7)}this.expandBoundingRect(c,l,a,h)}t(h)?c.culled=!0:(c.distance=h.distance,c.culled=!1)}getProjectionInfo(i,t,s){const e=this._runningViewState.camera,r=i.stageObject,o=r.getGeometryRecord(0),a=o.material,c=C.getCenter(r.getBounds());l(X,c,e.viewMatrix);const n=o.geometry.vertexAttributes,h=n.get("normal").data,d=n.get("auxpos1").data;return a.applyShaderOffsetsView(X,h,r.transformation,d,e,s.scaleInfo,X),V(Y,X[0],X[1],X[2],1),N(R,Y,e.projectionMatrix),p(s.positionNDC,R,1/R[3]),a.applyShaderOffsetsNDC(s.positionNDC,d,e,s.positionNDC,k),s.distanceWithoutPolygonOffset=e.depthNDCToWorld(k[2]),s.distance=k[2]===s.positionNDC[2]?s.distanceWithoutPolygonOffset:e.depthNDCToWorld(s.positionNDC[2]),V(R,s.positionNDC[0],s.positionNDC[1],s.positionNDC[2],1),N(Y,R,t),_(Y,Y,1/Y[3]),u(s.positionView,X[0],X[1],X[2]),s}isCulledByHorizon(i,t,s){return d(L.direction,i.positionView),u(L.origin,0,0,0),!!P(t,L,H)&&i.distanceWithoutPolygonOffset>s}isCulledBySlice(i,t){return i.slicePlaneEnabled&&this._runningViewState.slicePlaneEnabled&&I.extrusionContainsPoint(this._runningViewState.slicePlane,t)}expandBoundingRect(i,t,s,{positionNDC:e,scaleInfo:r}){const o=this._runningViewState.camera,a=t.getScreenSize(oi);T(a,r.factor,a),a[0]*=o.pixelRatio,a[1]*=o.pixelRatio;const n=v(s.calculateRelativeScreenBounds(a,r.factorAlignment.scale,Z),c(0,o.fullWidth,.5+.5*e[0]),c(0,o.fullHeight,.5+.5*e[1])),h=this.iconMarginFactor;if(0!==h){const i=h*Math.min(y(n),G(n));n[0]-=i,n[1]-=i,n[2]+=i,n[3]+=i}B(i.aabr,n)}isConflicted(i){const t=i.graphics3DGraphic.graphic.uid,s=i.info[this.visibilityGroup];for(let e=Math.floor(s.aabr[0]/this.accBinsSizeX);e<=Math.floor(s.aabr[2]/this.accBinsSizeX);e++)if(!(e<0||e>=this.accBinsNumX))for(let i=Math.floor(s.aabr[1]/this.accBinsSizeY);i<=Math.floor(s.aabr[3]/this.accBinsSizeY);i++){if(i<0||i>=this.accBinsNumY)continue;const r=this.accBins[e][i];for(let i=0;i<r.length;i++){const e=r.data[i],o=e.info[this.visibilityGroup];if(o&&o.visible&&(e.graphics3DGraphic.graphic.uid!==t&&(this.accNumTests++,S(o.aabr,s.aabr))))return!0}}return!1}initBins(i,t){if(null==this.accBins){this.accBins=[];for(let i=0;i<this.accBinsNumX;i++){this.accBins.push([]);const i=this.accBins[this.accBins.length-1];for(let t=0;t<this.accBinsNumY;t++)i.push(new o)}}else for(let s=0;s<this.accBinsNumX;s++)for(let i=0;i<this.accBinsNumY;i++)this.accBins[s][i].clear();this.accBinsSizeX=i/this.accBinsNumX,this.accBinsSizeY=t/this.accBinsNumY,this.accNumTests=0}addToBins(i){const t=i.info[this.visibilityGroup],s=Math.floor(t.aabr[0]/this.accBinsSizeX),e=Math.floor(t.aabr[2]/this.accBinsSizeX),r=Math.floor(t.aabr[1]/this.accBinsSizeY),o=Math.floor(t.aabr[3]/this.accBinsSizeY);for(let a=s;a<=e;a++)if(!(a<0||a>=this.accBinsNumX))for(let t=r;t<=o;t++)t<0||t>=this.accBinsNumY||this.accBins[a][t].push(i)}setGraphicVisibility(i,t){const s=i.graphics3DGraphic;s.destroyed||(s.setVisibilityFlag(3,t,this.visibilityGroup),1===this.visibilityGroup&&this.view.labeler.setLabelGraphicVisibility(s,t))}};function si(i,t){const s=i.graphics3DGraphic;s.destroyed||s.clearVisibilityFlag(3,t)}function*ei(i){if(Map.prototype.entries){const t=i.entries();for(let i=t.next();!i.done;i=t.next())yield i.value[1]}else yield*i.values()}function*ri(i,t,s){t.clear(),i.forEach(((i,e)=>{const r=t.pushNew();r.id=e,r.prio=i.info?-i.info[s].distance:Number.MAX_VALUE})),yield;const e=t.iterableSort(((i,t)=>t.prio-i.prio));for(let r=e.next();!r.done;r=e.next())yield;t.forAll((t=>{const s=i.get(t.id);s&&(i.delete(t.id),i.set(t.id,s))})),t.clear()}i([e({constructOnly:!0})],ti.prototype,"view",void 0),i([e({type:Boolean,readOnly:!0})],ti.prototype,"updating",null),ti=i([r("esri.views.3d.layers.graphics.Deconflictor")],ti);const oi=j();class ai{constructor(){this.positionView=h(),this.positionNDC=h(),this.distance=0,this.distanceWithoutPolygonOffset=0,this.scaleInfo={factor:{scale:0,factor:0,minPixelSize:0,paddingPixels:0},factorAlignment:{scale:0,factor:0,minPixelSize:0,paddingPixels:0}}}get isOutsideScreen(){const i=this.positionNDC;return i[0]<-1||i[1]<-1||i[2]<-1||i[0]>=1||i[1]>=1}}const ci=new ai;export{ti as Deconflictor,J as DeconflictorGraphic,ii as DeconflictorViewState};
