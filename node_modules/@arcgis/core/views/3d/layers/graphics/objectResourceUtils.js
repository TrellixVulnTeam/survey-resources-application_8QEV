/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{get as e,isSome as t,isNone as r}from"../../../../core/maybe.js";import{c as s}from"../../../../chunks/vec3f64.js";import{i as o,f as i,C as a,l as u,n,e as l}from"../../../../chunks/vec3.js";import{a as c}from"../../../../chunks/mat4.js";import{adjustStaticAGOUrl as m}from"../../../../core/devEnvironmentUtils.js";import{a as d}from"../../../../chunks/mat3f64.js";import{a as f}from"../../../../chunks/mat4f64.js";import{n as p}from"../../../../chunks/mat3.js";import{BufferViewVec3f as x,BufferViewVec4f as g,BufferViewVec2f as h,BufferViewVec4u8 as b,BufferViewVec4u16 as v,BufferViewVec3u8 as R,BufferViewVec3u16 as y}from"../../support/buffer/BufferView.js";import{t as B,a as M,s as w}from"../../../../chunks/vec32.js";import{empty as j,expandWithVec3 as C}from"../../../../geometry/support/aaBoundingBox.js";import{Geometry as E}from"../../webgl-engine/lib/Geometry.js";import{COLOR_GAMMA as T,DefaultMaterial as S}from"../../webgl-engine/materials/DefaultMaterial.js";import{Texture as A}from"../../webgl-engine/lib/Texture.js";import{DefaultLoadingContext as F}from"../../glTF/DefaultLoadingContext.js";import{n as O}from"../../../../chunks/vec22.js";import{c as I}from"../../../../chunks/vec33.js";import{c as k,f as L}from"../../../../chunks/vec43.js";import{createBuffer as N}from"../../support/buffer/utils.js";import{load as P}from"../../glTF/loader.js";import{triangleFanToTriangles as z,triangleStripToTriangles as D,trianglesToTriangles as V}from"../../glTF/internal/indexUtils.js";import{load as _,processLoadResult as W}from"./wosrLoader.js";import{t as U,s as G}from"../../../../chunks/vec42.js";async function $(r,s){const o=q(m(r));if("wosr"===o.fileType){const e=await(s.cache?s.cache.loadWOSR(o.url,s):_(o.url,s)),t=W(e,s);return{lods:[t],referenceBoundingBox:t.boundingBox,isEsriSymbolResource:!1,isWosr:!0,remove:e.remove}}const i=await(s.cache?s.cache.loadGLTF(o.url,s,s.usePBR):P(new F(s.streamDataRequester),o.url,s,s.usePBR)),a=e(i.model.meta,"ESRI_proxyEllipsoid");i.meta.isEsriSymbolResource&&t(a)&&-1!==i.meta.uri.indexOf("/RealisticTrees/")&&J(i,a);const u=i.meta.isEsriSymbolResource?{usePBR:s.usePBR,isSchematic:!1,treeRendering:i.customMeta.esriTreeRendering,mrrFactors:[0,1,.2]}:{usePBR:s.usePBR,isSchematic:!1,mrrFactors:[0,1,.5]},n={...s.materialParamsMixin,treeRendering:i.customMeta.esriTreeRendering};if(null!=o.specifiedLodIndex){const e=K(i,u,n,o.specifiedLodIndex);let t=e[0].boundingBox;if(0!==o.specifiedLodIndex){t=K(i,u,n,0)[0].boundingBox}return{lods:e,referenceBoundingBox:t,isEsriSymbolResource:i.meta.isEsriSymbolResource,isWosr:!1,remove:i.remove}}const l=K(i,u,n);return{lods:l,referenceBoundingBox:l[0].boundingBox,isEsriSymbolResource:i.meta.isEsriSymbolResource,isWosr:!1,remove:i.remove}}function q(e){const t=e.match(/(.*\.(gltf|glb))(\?lod=([0-9]+))?$/);if(t)return{fileType:"gltf",url:t[1],specifiedLodIndex:null!=t[4]?Number(t[4]):null};return e.match(/(.*\.(json|json\.gz))$/)?{fileType:"wosr",url:e,specifiedLodIndex:null}:{fileType:"unknown",url:e,specifiedLodIndex:null}}function K(e,r,s,o){const i=e.model,a=d(),u=new Array,n=new Map,l=new Map;return i.lods.forEach(((e,c)=>{if(void 0!==o&&c!==o)return;const m={name:e.name,stageResources:{textures:new Array,materials:new Array,geometries:new Array},lodThreshold:t(e.lodThreshold)?e.lodThreshold:null,pivotOffset:[0,0,0],numberOfVertices:0,boundingBox:j()};u.push(m),e.parts.forEach((e=>{const o=e.material+(e.attributes.normal?"_normal":"")+(e.attributes.color?"_color":"")+(e.attributes.texCoord0?"_texCoord0":"")+(e.attributes.tangent?"_tangent":""),u=i.materials.get(e.material),c=t(e.attributes.texCoord0),d=t(e.attributes.normal);if(!n.has(o)){if(c){if(t(u.textureColor)&&!l.has(u.textureColor)){const e=i.textures.get(u.textureColor),t={...e.parameters,preMultiplyAlpha:!0};l.set(u.textureColor,new A(e.data,t))}if(t(u.textureNormal)&&!l.has(u.textureNormal)){const e=i.textures.get(u.textureNormal),t={...e.parameters,preMultiplyAlpha:!0};l.set(u.textureNormal,new A(e.data,t))}if(t(u.textureOcclusion)&&!l.has(u.textureOcclusion)){const e=i.textures.get(u.textureOcclusion),t={...e.parameters,preMultiplyAlpha:!0};l.set(u.textureOcclusion,new A(e.data,t))}if(t(u.textureEmissive)&&!l.has(u.textureEmissive)){const e=i.textures.get(u.textureEmissive),t={...e.parameters,preMultiplyAlpha:!0};l.set(u.textureEmissive,new A(e.data,t))}if(t(u.textureMetallicRoughness)&&!l.has(u.textureMetallicRoughness)){const e=i.textures.get(u.textureMetallicRoughness),t={...e.parameters,preMultiplyAlpha:!0};l.set(u.textureMetallicRoughness,new A(e.data,t))}}const a=u.color[0]**(1/T),m=u.color[1]**(1/T),f=u.color[2]**(1/T),p=u.emissiveFactor[0]**(1/T),x=u.emissiveFactor[1]**(1/T),g=u.emissiveFactor[2]**(1/T);n.set(o,new S({...r,transparent:"BLEND"===u.alphaMode,textureAlphaMode:Q(u.alphaMode),textureAlphaCutoff:u.alphaCutoff,diffuse:[a,m,f],ambient:[a,m,f],opacity:u.opacity,doubleSided:u.doubleSided,doubleSidedType:"winding-order",cullFace:u.doubleSided?0:2,vertexColors:!!e.attributes.color,vertexTangents:!!e.attributes.tangent,normals:d?"default":"screenDerivative",castShadows:!0,receiveSSAO:!0,textureId:t(u.textureColor)&&c?l.get(u.textureColor).id:void 0,colorMixMode:u.colorMixMode,normalTextureId:t(u.textureNormal)&&c?l.get(u.textureNormal).id:void 0,textureAlphaPremultiplied:!0,occlusionTextureId:t(u.textureOcclusion)&&c?l.get(u.textureOcclusion).id:void 0,emissiveTextureId:t(u.textureEmissive)&&c?l.get(u.textureEmissive).id:void 0,metallicRoughnessTextureId:t(u.textureMetallicRoughness)&&c?l.get(u.textureMetallicRoughness).id:void 0,emissiveFactor:[p,x,g],mrrFactors:[u.metallicFactor,u.roughnessFactor,r.mrrFactors[2]],isSchematic:!1,...s}))}const f=H(e.indices||e.attributes.position.count,e.primitiveType),j=e.attributes.position.count,F=N(x,j);B(F,e.attributes.position,e.transform);const P=[["position",{data:F.typedBuffer,size:F.elementCount,exclusive:!0}]],z=[["position",f]];if(t(e.attributes.normal)){const t=N(x,j);p(a,e.transform),M(t,e.attributes.normal,a),P.push(["normal",{data:t.typedBuffer,size:t.elementCount,exclusive:!0}]),z.push(["normal",f])}if(t(e.attributes.tangent)){const t=N(g,j);p(a,e.transform),U(t,e.attributes.tangent,a),P.push(["tangent",{data:t.typedBuffer,size:t.elementCount,exclusive:!0}]),z.push(["tangent",f])}if(t(e.attributes.texCoord0)){const t=N(h,j);O(t,e.attributes.texCoord0),P.push(["uv0",{data:t.typedBuffer,size:t.elementCount,exclusive:!0}]),z.push(["uv0",f])}if(t(e.attributes.color)){const t=N(b,j);if(4===e.attributes.color.elementCount)e.attributes.color instanceof g?G(t,e.attributes.color,255):e.attributes.color instanceof b?k(t,e.attributes.color):e.attributes.color instanceof v&&G(t,e.attributes.color,1/256);else{L(t,255,255,255,255);const r=new R(t.buffer,0,4);e.attributes.color instanceof x?w(r,e.attributes.color,255):e.attributes.color instanceof R?I(r,e.attributes.color):e.attributes.color instanceof y&&w(r,e.attributes.color,1/256)}P.push(["color",{data:t.typedBuffer,size:t.elementCount,exclusive:!0}]),z.push(["color",f])}const D=new E(P,z);m.stageResources.geometries.push(D),m.stageResources.materials.push(n.get(o)),c&&(t(u.textureColor)&&m.stageResources.textures.push(l.get(u.textureColor)),t(u.textureNormal)&&m.stageResources.textures.push(l.get(u.textureNormal)),t(u.textureOcclusion)&&m.stageResources.textures.push(l.get(u.textureOcclusion)),t(u.textureEmissive)&&m.stageResources.textures.push(l.get(u.textureEmissive)),t(u.textureMetallicRoughness)&&m.stageResources.textures.push(l.get(u.textureMetallicRoughness))),m.numberOfVertices+=j;const V=D.boundingInfo;t(V)&&(C(m.boundingBox,V.getBBMin()),C(m.boundingBox,V.getBBMax()))}))})),u}function Q(e){switch(e){case"BLEND":return 0;case"MASK":return 2;case"OPAQUE":return 1;default:return 0}}function H(e,t){switch(t){case 4:return V(e);case 5:return D(e);case 6:return z(e)}}function J(e,t){for(let m=0;m<e.model.lods.length;++m){const d=e.model.lods[m];e.customMeta.esriTreeRendering=!0;for(const p of d.parts){const d=p.attributes.normal;if(r(d))return;const g=p.attributes.position,h=g.count,v=s(),R=s(),y=s(),B=N(b,h),M=N(x,h),w=c(f(),p.transform);for(let r=0;r<h;r++){g.getVec(r,R),d.getVec(r,v),o(R,R,p.transform),i(y,R,t.center),a(y,y,t.radius);const s=y[2],c=u(y),f=Math.min(.45+.55*c*c,1);a(y,y,t.radius),o(y,y,w),n(y,y),m+1!==e.model.lods.length&&e.model.lods.length>1&&l(y,y,v,s>-1?.2:Math.min(-4*s-3.8,1)),M.setVec(r,y),B.set(r,0,255*f),B.set(r,1,255*f),B.set(r,2,255*f),B.set(r,3,255)}p.attributes.normal=M,p.attributes.color=B}}}export{$ as fetch,K as gltfToEngineResources,q as parseUrl};
