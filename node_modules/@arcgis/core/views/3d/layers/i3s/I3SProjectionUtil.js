/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{c as t}from"../../../../chunks/vec3f64.js";import{getReferenceEllipsoid as o}from"../../../../geometry/projectionEllipsoid.js";import{computeLinearTransformation as r}from"../../../../geometry/projection.js";import{a}from"../../../../chunks/mat4f64.js";function n(t,o,n,s){const c=h(t,o,n),i=a();return r(n,c,i,s),i}const s=1,c=5-s;function h(r,a,n){const h=t(),i=r[3],e=2**(Math.ceil(Math.log(i)*Math.LOG2E/c)*c+s);if(n.isGeographic){const t=e/o(n).radius*180/Math.PI,a=Math.round(r[1]/t),s=Math.max(-90,Math.min(90,a*t)),c=t/Math.cos((Math.abs(s)-t/2)/180*Math.PI),i=Math.round(r[0]/c)*c;h[0]=i,h[1]=s}else{const t=Math.round(r[0]/e),o=Math.round(r[1]/e);h[0]=t*e,h[1]=o*e}const M=r[2]+a,m=Math.round(M/e);return h[2]=m*e,h}export{n as computeGlobalTransformation,h as getLocalOrigin};
