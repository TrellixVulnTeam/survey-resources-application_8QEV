/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import{isSome as r,isNone as i}from"../../../core/maybe.js";import s from"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{handlesGroup as t}from"../../../core/handleUtils.js";import{property as o}from"../../../core/accessorSupport/decorators/property.js";import{subclass as n}from"../../../core/accessorSupport/decorators/subclass.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import{createAbortController as l,isAbortError as a}from"../../../core/promiseUtils.js";import u from"../../../core/Accessor.js";import p from"../../../core/Collection.js";import c from"../../../Graphic.js";import{init as h}from"../../../core/watchUtils.js";import"../../../layers/buildingSublayers/BuildingGroupSublayer.js";import{LayerView3D as y}from"./LayerView3D.js";import{updatingProgress as d}from"./support/layerViewUpdatingProperties.js";import g from"../../layers/BuildingSceneLayerView.js";import{checkSpatialReference as m}from"./i3s/I3SUtil.js";import{BuildingSublayerView3DMixin as f}from"./BuildingSublayerView3D.js";import{parseFilterMode as w}from"./i3s/BuildingFilterUtil.js";import b from"./BuildingComponentSublayerView3D.js";const V=s.getLogger("esri.views.3d.layers.BuildingSceneLayerView3D"),j=f(u);let C=class extends(y(g)){constructor(){super(...arguments),this.sublayerViews=new p,this._abortController=l(),this._loadingComponents=0}get filterExpression(){const e=this.layer.activeFilterId,r=null!=e?this.layer.filters.find((r=>r.id===e)):null,i=null!=r?r.filterBlocks.find((e=>"solid"===e.filterMode.type)):null;return i?i.filterExpression:null}get filterExpressions(){const e=this.layer.activeFilterId,r=null!=e?this.layer.filters.find((r=>r.id===e)):null;return r&&r.filterBlocks?r.filterBlocks.toArray().map((e=>[e.filterExpression,w(e)])):[]}get updatingProgressValue(){const e=this.sublayerViews,r=this._loadingComponents+(e?e.length:0);return e.reduce(((e,r)=>e+r.updatingProgress),0)/r}isUpdating(){return this._loadingComponents>0||this.sublayerViews&&this.sublayerViews.some((e=>e.updating))}initialize(){m(this.layer.spatialReference,this.view.spatialReference,this.view.viewingMode),this.initializeSubLayerViews(this.layer.sublayers,this)}destroy(){this.sublayerViews&&(this.sublayerViews.forEach((e=>e.destroy())),this.sublayerViews=null),this._abortController.abort(),this._abortController=null}initializeSubLayerViews(e,r){const i=this,s=this.view;e.forEach((e=>{if(!e.isEmpty)if("building-group"===e.type){const i=new j({sublayer:e,view:s,parent:r});this.initializeSubLayerViews(e.sublayers,i)}else"mesh"===e.geometryType&&(this._loadingComponents++,e.load({signal:this._abortController.signal}).then((()=>{const t=new b({sublayer:e,layerView:i,view:s,parent:r});this.sublayerViews.push(t),this.handles.add([h(t,"updating",(()=>this.notifyChange("updating")),!0),h(t,"updatingProgress",(()=>this.notifyChange("updatingProgressValue")),!0)])})).catch((r=>{a(r)||V.error(`Error while creating view for sublayer ${e.id}\nLayer: ${this.layer.url}\n`,r)})).then((()=>{this._loadingComponents--,this.notifyChange("updating"),this.notifyChange("updatingProgressValue")})))}))}getGraphicFromIntersectorMetadata(e){for(const r of this.sublayerViews.items)if(r.sublayer.uid===e.sublayerUid)return r.getGraphicFromIntersectorMetadata(e);return null}async fetchPopupFeatures(e,s){if(!r(s)||!s.clientGraphics||0===s.clientGraphics.length)return;const t=this._findComponent(s.clientGraphics[0].sourceLayer);return i(t)?void 0:t.fetchPopupFeatures(e,s)}whenGraphicBounds(e){const r=this._findComponent(e.sourceLayer);return i(r)?Promise.reject():r.whenGraphicBounds(e)}_findComponent(e){return this.sublayerViews.find((r=>e===r.sublayer))}highlight(e){e instanceof c?e=[e]:e instanceof p&&(e=e.toArray());const r=[];if(Array.isArray(e)&&e.length>0&&e[0]instanceof c){const i=e,s=new Map;for(const e of i){let r=s.get(e.sourceLayer);null==r&&(r=[],s.set(e.sourceLayer,r)),r.push(e)}this.sublayerViews.forEach((e=>{const i=s.get(e.sublayer);i&&r.push(e.highlight(i))}))}return t(r)}getUsedMemory(){return this.sublayerViews.reduce(((e,r)=>e+r.getUsedMemory()),0)}getUnloadedMemory(){return this.sublayerViews.reduce(((e,r)=>e+r.getUnloadedMemory()),0)}ignoresMemoryFactor(){return!1}};e([o()],C.prototype,"sublayerViews",void 0),e([o({readOnly:!0})],C.prototype,"filterExpression",null),e([o({readOnly:!0})],C.prototype,"filterExpressions",null),e([o(d)],C.prototype,"updatingProgress",void 0),e([o({readOnly:!0,dependsOn:[]})],C.prototype,"updatingProgressValue",null),C=e([n("esri.views.3d.layers.BuildingSceneLayerView3D")],C);var v=C;export default v;
