/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../../chunks/tslib.es6.js";import"../../../../../core/has.js";import{isSome as e,unwrapOr as i,isNone as a,unwrap as s}from"../../../../../core/maybe.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import{makeHandle as r}from"../../../../../core/handleUtils.js";import{property as o}from"../../../../../core/accessorSupport/decorators/property.js";import{subclass as n}from"../../../../../core/accessorSupport/decorators/subclass.js";import"../../../../../core/urlUtils.js";import"../../../../../core/uuid.js";import"../../../../../portal/support/resourceExtension.js";import p from"../../../../../core/Evented.js";import{rad2deg as h}from"../../../../../core/mathUtils.js";import{screenPointObjectToArray as l}from"../../../../../core/screenUtils.js";import{b as c,c as d}from"../../../../../chunks/vec3f64.js";import{s as u,g as m,D as g,f as y,n as v,l as f,d as M}from"../../../../../chunks/vec3.js";import S from"../../../../../core/Handles.js";import{init as b}from"../../../../../core/watchUtils.js";import{getMetersPerUnitForSR as B}from"../../../../../core/unitUtils.js";import{g as w}from"../../../../../chunks/mat4.js";import{containsXY as x}from"../../../../../geometry/support/aaBoundingRect.js";import{a as D}from"../../../../../chunks/vec2f64.js";import{d as j,e as R,s as _}from"../../../../../chunks/vec2.js";import{getGraphicEffectiveElevationInfo as E}from"../../../../../support/elevationInfoUtils.js";import{sv2d as H,sv3d as G,sm4d as A}from"../../../support/stack.js";import{boundedPlane as P,plane as z,ray as U}from"../../../support/geometryUtils.js";import{evaluateElevationAlignmentAtPoint as T}from"../../../layers/graphics/elevationAlignmentUtils.js";import{ElevationContext as k}from"../../../layers/graphics/ElevationContext.js";import{Texture as Z}from"../../../webgl-engine/lib/Texture.js";import{EditGeometry as O}from"../../../../interactive/editGeometry/EditGeometry.js";import{createManipulatorDragEventPipeline as C,addScreenDelta as V,addMapDelta as X}from"../../../../interactive/dragEventPipeline.js";import{InteractiveToolBase as Y}from"../../../../interactive/InteractiveToolBase.js";import{screenToZConstrained as I,screenToRenderPlane as L}from"../dragEventPipeline3D.js";import{getGraphicAttachmentOrigin as N,calculateInputRotationTransform as F}from"../../manipulatorUtils.js";import{canMoveZ as q}from"../manipulatorUtils.js";import{createShiftManipulator as J,IsShiftEdgeOnScreenFlag as K,createResizeManipulator as Q,createRotateManipulator as W,resizeNormal as $,resizeOutlineOnly as tt,isDiagonalResizeHandle as et,calculateDiagonalResizeHandleScale as it,createRotatePlane as at,calculateBoundedPlaneTranslateRotate as st,updateRotateHeadingHandle as rt,updateResizeHandle as ot}from"../../analysisTools/slice/sliceToolUtils.js";import nt from"../../analysisTools/slice/images/heading-rotate-png.js";import{OutlineVisualElement as pt}from"../../visualElements/OutlineVisualElement.js";import{GraphicState as ht}from"../../../layers/graphics/GraphicState.js";import{createVisualElements as lt}from"../visualElementUtils.js";import{MoveXYGraphicManipulation as ct}from"../manipulations/MoveXYGraphicManipulation.js";import{ReshapeGeometryHelper as dt}from"../reshapeGraphic/ReshapeOperation.js";import{PreserveAspectRatio as ut}from"./PreserveAspectRatio.js";import{calculateOrientedBounds as mt,mapPlaneToRenderPlane as gt,apply as yt,unapply as vt}from"../../../../interactive/editGeometry/support/editPlaneUtils.js";let ft=class extends(p.EventedMixin(Y)){constructor(t){super(t),this.enableZ=!0,this.enableRotation=!0,this.enableScaling=!0,this._preserveAspectRatio=new ut,this.grabbing=!1,this.inputState=null,this.type="transform-3d",this.handles=new S,this.moveZManipulator=null,this.resizeManipulators=null,this.rotateManipulator=null,this.attachmentOrigin=null,this.outlineVisualElement=null,this.mapBounds=P.create(),this.mapBoundsStart=P.create(),this.displayBounds=P.create(),this.displayBoundsStart=P.create(),this.displayBoundsMarginStart=0,this.resizeHandles=[{direction:[1,0]},{direction:[1,1]},{direction:[0,1]},{direction:[-1,1]},{direction:[-1,0]},{direction:[-1,-1]},{direction:[0,-1]},{direction:[1,-1]}]}initialize(){this.graphicState=new ht({graphic:this.graphic});const t=this.graphic.geometry;this.reshapeHelper=new dt(O.fromGeometry(t,this.view.viewingMode),t.type),this.graphicMoveManipulation=new ct({tool:this,view:this.view,graphicState:this.graphicState}),this.handles.add(this._createMoveXYGraphicDragPipeline()),this.moveZManipulator=J(this.view,0),this.moveZManipulator.state|=K,this.handles.add(this.watch("enableZ",(()=>this.updateManipulatorAvailability(this.moveZManipulator,0)))),this.handles.add(this._createMoveZDragPipeline()),this.manipulators.add(this.moveZManipulator),this.resizeManipulators=this.resizeHandles.map((t=>{const e=Q(this.view,t);return this.handles.add(this.watch("enableScaling",(()=>this.updateManipulatorAvailability(e,2)))),e.events.on("grab-changed",(t=>this._onResizeGrab(t))),this.handles.add(this._createResizeDragPipeline(e,t)),e})),this.manipulators.addMany(this.resizeManipulators),this.rotateManipulatorTexture=new Z(nt,{width:64,height:64,mipmap:!0,preMultiplyAlpha:!0}),this.view._stage&&this.view._stage.add(this.rotateManipulatorTexture),this.rotateManipulator=W(this.view,this.rotateManipulatorTexture),this.handles.add(this.watch("enableRotation",(()=>this.updateManipulatorAvailability(this.rotateManipulator,3)))),this.rotateManipulator.events.on("grab-changed",(t=>{this._onRotateGrab(t)})),this.handles.add(this._createRotateDragPipeline(this.rotateManipulator)),this.manipulators.add(this.rotateManipulator),this.calculateMapBounds(),this.updateDisplayBounds(this.mapBounds);const i=lt({view:this.view,graphic:this.graphic,forEachManipulator:t=>this.forEachManipulator(t),onManipulatorsChanged:()=>r()});this.outlineVisualElement=i.visualElement instanceof pt?i.visualElement:null,e(this.outlineVisualElement)&&this.handles.add(this.outlineVisualElement.events.on("attachment-origin-changed",(()=>this.updateDisplayBounds(this.mapBounds)))),this.handles.add(i),this.handles.add([this.graphicState.on("changed",(()=>this.onGeometryChanged())),this.graphicState.watch("displaying",(()=>this.updateAllManipulatorAvailability())),b(this.graphicState,"isDraped",(()=>this.graphicDrapedChanged())),this.view.trackGraphicState(this.graphicState)]);const a=this.view.pointsOfInterest;a&&this.handles.add(a.focus.watch("location",(()=>this.updateDisplayBounds(this.mapBounds))));const s=t=>{this.handles.add(t.events.on("grab-changed",(()=>{this.grabbing=t.grabbing,this.updateAllManipulatorAvailability()})))};this.forEachManipulator(s),this.graphicMoveManipulation.forEachManipulator(s);const o=(t,e)=>{this.handles.add(t.events.on("immediate-click",(t=>{1===e&&this.emit("immediate-click",{...t,graphic:this.graphic}),t.stopPropagation()})))};this.forEachManipulator(o),this.graphicMoveManipulation.forEachManipulator(o),this.onGeometryChanged(),this.updateAllManipulatorAvailability()}graphicDrapedChanged(){this.handles.remove(Mt),this.updateDisplayBounds(this.mapBounds),this.graphicState.isDraped&&this.handles.add(this.view.elevationProvider.on("elevation-change",(t=>{e(this.attachmentOrigin)&&x(t.extent,this.attachmentOrigin.x,this.attachmentOrigin.y)&&this.updateDisplayBounds(this.mapBounds)})),Mt)}updateAllManipulatorAvailability(){this.forEachManipulator(((t,e)=>this.updateManipulatorAvailability(t,e)))}updateManipulatorAvailability(t,e){const i=this.graphicState.displaying,a=this.grabbing&&!t.grabbing;t.interactive=!a;const s=this.enableZ&&q(this.graphic);switch(e){case 3:t.available=i&&this.enableRotation;break;case 2:t.available=i&&(this.enableScaling||this.enableRotation||s),t.interactive=!a&&this.enableScaling,t.state=this.enableScaling?$:tt;break;case 0:t.available=i&&s;break;default:t.available=i}}forEachManipulator(t){this.resizeManipulators.forEach((e=>t(e,2))),t(this.rotateManipulator,3),t(this.moveZManipulator,0)}destroy(){this.view._stage&&this.view._stage.remove(this.rotateManipulatorTexture),this.handles.destroy(),this.graphicMoveManipulation.destroy(),this.reshapeHelper.destroy(),this._set("view",null),this._set("graphic",null)}get preserveAspectRatio(){return this._preserveAspectRatio.enabled}set preserveAspectRatio(t){this._preserveAspectRatio.enabled=t,this._set("preserveAspectRatio",t)}reset(){}onDetach(){this.mapBounds=null,this.displayBounds=null}onGeometryChanged(){this.updateDisplayBounds(this.mapBounds)}calculateMapBounds(){const t=this.graphic.geometry,e=this.reshapeHelper.editGeometry,a=e.components[0].edges[0],s=j(H.get(),a.left.pos,a.right.pos);R(s,s);const r=i(N(this.view,this.graphic),t.extent.center);let o=bt*this.view.pixelSizeAt(r);const n=this.view.spatialReference;n!==t.spatialReference&&(o*=B(n)/B(t.spatialReference)),mt(s,e,o,this.mapBounds)}updateDisplayBounds(t){const a=this.graphic.geometry,s=e(this.outlineVisualElement)&&!this.graphicState.isDraped&&e(this.outlineVisualElement.attachmentOrigin)?this.outlineVisualElement.attachmentOrigin:N(this.view,this.graphic);this.attachmentOrigin=i(s,a.extent.center);const r=e(s)?s.z:T(t.origin,this.view.elevationProvider,k.fromElevationInfo(E(this.graphic)),this.view.renderCoordsHelper),o=P.copy(t);u(o.origin,t.origin[0],t.origin[1],r),gt(o,this.view.renderCoordsHelper,a.spatialReference,this.displayBoundsMargin(),this.displayBounds),this.updateManipulators()}displayBoundsMargin(){const t=this.view.pointsOfInterest,e=t?t.focus.location:this.reshapeHelper.geometry.extent.center;return St*this.view.pixelSizeAt(e)}_createMoveXYGraphicDragPipeline(){return this.graphicMoveManipulation.createDragPipeline(((t,e,i)=>this.applyGraphicMoveSteps(e,i)))}_createMoveZDragPipeline(){const t=this.view,e=this.reshapeHelper.geometry.spatialReference;return C(this.moveZManipulator,((i,a,s)=>{const r=c(i.renderLocation),o=a.next(I(t,r,e)).next(V());this.applyGraphicMoveSteps(o,s)}))}applyGraphicMoveSteps(t,i){const a=t.next((t=>("start"===t.action&&(this.inputState={type:"move"},P.copy(this.mapBounds,this.mapBoundsStart),this.emit("graphic-translate-start",{graphic:this.graphic,dxScreen:t.screenDeltaX,dyScreen:t.screenDeltaY})),t))).next(X()).next(this._moveDragUpdateGeometry()).next((t=>{const e={graphic:this.graphic,dxScreen:t.screenDeltaX,dyScreen:t.screenDeltaY};switch(t.action){case"start":case"update":(t.mapEnd.x-t.mapStart.x||t.mapEnd.y-t.mapStart.y||t.mapEnd.z-t.mapStart.z)&&this.emit("graphic-translate",e);break;case"end":this.inputState=null,this.emit("graphic-translate-stop",e)}return t}));return i.next((()=>{e(this.inputState)&&this.emit("graphic-translate-stop",{graphic:this.graphic,dxScreen:0,dyScreen:0}),this.cancel()})),a}_moveDragUpdateGeometry(){return t=>{if(a(this.inputState)||"move"!==this.inputState.type)return t;const e=[];for(const a of this.reshapeHelper.editGeometry.components)e.push(...a.vertices);const i="start"===t.action?0:1,s=this.reshapeHelper.moveVertices(e,t.mapDeltaX,t.mapDeltaY,t.mapDeltaZ,i);return yt(s,this.mapBounds),this.graphic.geometry=this.reshapeHelper.geometry,t}}_onResizeGrab(t){if("start"!==t.action)return;const e=this._calculatePickRay(t.screenPoint);z.intersectRay(this.displayBounds.plane,e,G.get())&&(P.copy(this.displayBounds,this.displayBoundsStart),P.copy(this.mapBounds,this.mapBoundsStart),this.displayBoundsMarginStart=this.displayBoundsMargin(),this.inputState={type:"resize"})}_createResizeDragPipeline(t,i){return C(t,((t,s,r)=>{a(this.inputState)||(s.next((t=>("start"===t.action&&this.emit("graphic-scale-start",{graphic:this.graphic,xScale:1,yScale:1}),t))).next(L(this.view,this.displayBoundsStart.plane)).next((t=>({...t,handle:i}))).next(this._resizeDragRenderPlaneToFactors()).next(this._preserveAspectRatio.createDragEventPipelineStep(),this._preserveAspectRatio.next).next(this._resizeDragUpdateGeometry()).next((t=>{const e={graphic:this.graphic,xScale:t.factor1,yScale:t.factor2};switch(t.action){case"start":case"update":this.emit("graphic-scale",e);break;case"end":this.inputState=null,this.emit("graphic-scale-stop",e)}return t})),r.next((()=>{e(this.inputState)&&this.emit("graphic-scale-stop",{graphic:this.graphic,xScale:1,yScale:1}),this.cancel()})))}))}_resizeDragRenderPlaneToFactors(){return t=>{const e=this.displayBoundsStart,i=t.handle.direction,a=this.displayBoundsMargin(),s=this.displayBoundsMarginStart,r=m(G.get(),e.origin);g(r,r,e.basis1,-i[0]),g(r,r,e.basis2,-i[1]);const o=y(G.get(),t.renderEnd,r),n=y(G.get(),t.renderStart,r),p=et(t.handle),h=it(e),l=it(this.displayBounds)/h,c=(t,e)=>{if(0===t)return 1;let i=f(e),r=.5*t*M(e,o)/i;const h=r<0?-1:1;if(p){r+=(i-.5*t*M(e,n)/i)*h*l}const c=i<1.5*s?1:Bt;return i=Math.max(i-s,Bt),h>0&&(r-=a),h*Math.max(h*(r/i),c)};return{...t,factor1:c(i[0],e.basis1),factor2:c(i[1],e.basis2)}}}_resizeDragUpdateGeometry(){return t=>{const e=m(d(),this.mapBoundsStart.origin);g(e,e,this.mapBoundsStart.basis1,-t.handle.direction[0]),g(e,e,this.mapBoundsStart.basis2,-t.handle.direction[1]);const i=_(D(),this.mapBoundsStart.basis1[0],this.mapBoundsStart.basis1[1]);R(i,i);const a=[];for(const o of this.reshapeHelper.editGeometry.components)a.push(...o.vertices);const s="start"===t.action?0:1,r=this.reshapeHelper.scaleVertices(a,this.reshapeHelper.editGeometry.coordinateHelper.fromXYZ(e),i,t.factor1,t.factor2,s,1);return P.copy(this.mapBoundsStart,this.mapBounds),yt(r,this.mapBounds),this.graphic.geometry=this.reshapeHelper.geometry,t}}_onRotateGrab(t){if("start"!==t.action)return;const e=at(this.displayBounds,this.view.renderCoordsHelper,1,z.create()),i=this._calculatePickRay(t.screenPoint);z.intersectRay(e,i,G.get())&&(P.copy(this.displayBounds,this.displayBoundsStart),P.copy(this.mapBounds,this.mapBoundsStart),this.inputState={type:"rotate",rotatePlane:e})}_createRotateDragPipeline(t){return C(t,((t,i,s)=>{const r=this.inputState;a(r)||(i.next((t=>("start"===t.action&&this.emit("graphic-rotate-start",{graphic:this.graphic,angle:0}),t))).next(L(this.view,r.rotatePlane)).next(this._rotateDragRenderPlaneToRotate(r)).next(this._rotateDragUpdateGeometry()).next((t=>{const e={graphic:this.graphic,angle:h(t.rotateAngle)};switch(t.action){case"start":case"update":this.emit("graphic-rotate",e);break;case"end":this.inputState=null,this.emit("graphic-rotate-stop",e)}return t})),s.next((()=>{e(this.inputState)&&this.emit("graphic-rotate-stop",{graphic:this.graphic,angle:0}),this.cancel()})))}))}_rotateDragRenderPlaneToRotate(t){return e=>{const i=z.normal(t.rotatePlane),a=F(e.renderStart,e.renderEnd,this.displayBounds.origin,i);return{...e,rotateAxis:i,rotateAngle:a}}}_rotateDragUpdateGeometry(){return t=>{const e=m(d(),this.mapBoundsStart.origin),i=[];for(const r of this.reshapeHelper.editGeometry.components)i.push(...r.vertices);const a="start"===t.action?0:1,s=this.reshapeHelper.rotateVertices(i,this.reshapeHelper.editGeometry.coordinateHelper.fromXYZ(e),t.rotateAngle,a,1);return P.copy(this.mapBoundsStart,this.mapBounds),yt(s,this.mapBounds),this.graphic.geometry=this.reshapeHelper.geometry,t}}_calculatePickRay(t){const e=U.create(),i=l(t);return U.fromScreen(this.view.state.camera,i,e),v(e.direction,e.direction),e}updateManipulators(){if(!this.visible)return;const t=st(this.displayBounds,A.get());rt(this.rotateManipulator,t,this.displayBounds,this.view.renderCoordsHelper),this.updateZMoveHandle(this.moveZManipulator,t),this.resizeManipulators.forEach(((e,i)=>{ot(e,this.resizeHandles[i],t,this.displayBounds)}))}updateZMoveHandle(t,e){const i=this.displayBounds,a={basis:i.basis1,direction:-1,position:y(G.get(),i.origin,i.basis1),edge:2},s=A.get();w(s,e,a.edge*Math.PI/2),s[12]=0,s[13]=0,s[14]=0,t.modelTransform=s,t.renderLocation=a.position}cancel(){const t=this.reshapeHelper.editGeometry.lastOperation;a(t)||(this.reshapeHelper.undo(),this.graphic.geometry=this.reshapeHelper.geometry,vt(t,this.mapBounds),this.updateDisplayBounds(this.mapBounds),this.inputState=null)}canUndo(){return this.reshapeHelper.canUndo}undo(){if(e(this.inputState))this.view.activeTool=null;else if(this.canUndo()){const t=this.reshapeHelper.undo();this.graphic.geometry=this.reshapeHelper.geometry,vt(s(t),this.mapBounds),this.updateDisplayBounds(this.mapBounds)}}canRedo(){return this.reshapeHelper.canRedo}redo(){if(this.canRedo()){const t=this.reshapeHelper.redo();this.graphic.geometry=this.reshapeHelper.geometry,yt(s(t),this.mapBounds),this.updateDisplayBounds(this.mapBounds)}}};t([o({constructOnly:!0,nonNullable:!0})],ft.prototype,"view",void 0),t([o({constructOnly:!0,nonNullable:!0})],ft.prototype,"graphic",void 0),t([o({constructOnly:!0,nonNullable:!0})],ft.prototype,"enableZ",void 0),t([o()],ft.prototype,"enableRotation",void 0),t([o()],ft.prototype,"enableScaling",void 0),t([o()],ft.prototype,"preserveAspectRatio",null),t([o()],ft.prototype,"grabbing",void 0),t([o()],ft.prototype,"inputState",void 0),t([o({readOnly:!0})],ft.prototype,"type",void 0),ft=t([n("esri.views.3d.interactive.editingTools.graphicTransform3D.ExtentTransformTool")],ft);const Mt="draped-elevation-changes",St=10,bt=80,Bt=1e-6;export{Bt as EPSILON,ft as ExtentTransformTool};
