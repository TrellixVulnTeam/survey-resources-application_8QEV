/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{unwrap as t}from"../../../../../core/maybe.js";import e from"../../../../../Color.js";import{f as i}from"../../../../../chunks/vec3f64.js";import{s as a}from"../../../../../chunks/vec3.js";import r from"../../../../../core/Handles.js";import{p as s}from"../../../../../chunks/mat4.js";import{a as o}from"../../../../../chunks/mat4f64.js";import{getGraphicEffectiveElevationInfo as n}from"../../../../../support/elevationInfoUtils.js";import{sv3d as l,sm4d as p}from"../../../support/stack.js";import c from"../../../webgl-engine/lib/GeometryUtil.js";import{ColorMaterial as u}from"../../../webgl-engine/materials/ColorMaterial.js";import{createManipulatorDragEventPipeline as m,dragAtLocation as h,addScreenDelta as d}from"../../../../interactive/dragEventPipeline.js";import{screenToMapXYAtLocation as _}from"../dragEventPipeline3D.js";import{Manipulator3D as f}from"../../Manipulator3D.js";import{colors as g}from"../settings.js";import{DISC_RADIUS as M,DISC_HEIGHT as j,GEOMETRY_SEGMENTS as S,DISC_COLLISION_RADIUS as y}from"./config.js";import{Manipulation as T}from"./Manipulation.js";import{createGraphicMoveDragPipeline as v}from"./moveUtils.js";import{SnapToScene as w}from"../snapping/SnapToScene.js";class b extends T{constructor(t){super(),this._handles=new r,this._snapToScene=new w,this._discMaterial=this._createMaterial(),this._discMaterialTransparent=this._createMaterial(.5),this._scale=1,this._radius=M,this._view=t.view,this._tool=t.tool,null!=t.snapToScene&&(this.snapToScene=t.snapToScene),null!=t.radius&&(this._radius=t.radius),this._createManipulator(),this.forEachManipulator((t=>this._tool.manipulators.add(t)))}destroy(){this._handles.destroy(),this.forEachManipulator((t=>{this._tool.manipulators.remove(t),t.destroy()})),this._tool=null,this._view=null,this._manipulator=null}forEachManipulator(t){t(this._manipulator,1)}get displayScale(){return this._scale}set displayScale(t){this._scale=t,this._updateManipulatorTransform()}get snapToScene(){return this._snapToScene.enabled}set snapToScene(t){this._snapToScene.enabled=t}get radius(){return this._radius}set radius(t){t!==this._radius&&(this._radius=t,this._updateManipulator())}createGraphicDragPipeline(e,i,a){const r=i.graphic,s=n(r),o=t(r.geometry).spatialReference;return v(i,a,(t=>this.createDragPipeline(((i,a,r,s,o)=>t(i,e(i,a,r,s,o),r)),s,o,r)))}createDragPipeline(t,e,i,a){const r=this._view;return m(this._manipulator,((s,o,n,l,p)=>{const c=o.next(h(r,s.elevationAlignedLocation)).next(_(r,s.elevationAlignedLocation,e,i,a)).next(this._snapToScene.createDragEventPipelineStep(r,e),this._snapToScene.next).next((t=>({...t,manipulatorType:1}))).next(d());t(s,c,n,l,p)}))}_updateManipulatorTransform(){const t=s(p.get(),a(l.get(),this.displayScale,this.displayScale,this.displayScale));this._manipulator.modelTransform=t}_createManipulator(){const t=this._view;this._manipulator=new f({view:t,worldSized:!1,autoScaleRenderObjects:!1,focusMultiplier:1,touchMultiplier:1,collisionType:{type:"disc",direction:i(0,0,1)},worldOriented:!0}),this._updateManipulator()}_updateManipulator(){const t=c.createCylinderGeometry(j,1,S,i(0,0,1),i(0,0,0)),e=s(o(),i(this._radius,this._radius,this._radius));this._manipulator.renderObjects=[{geometry:t,material:this._discMaterial,transform:e,stateMask:2},{geometry:t,material:this._discMaterialTransparent,transform:e,stateMask:1}],this._manipulator.radius=y*(this._radius/M)}_createMaterial(t=1){const i=e.toUnitRGBA(g.main);return i[3]*=t,new u({color:i,transparent:1!==t,cullFace:2,renderOccluded:2})}get test(){return{discManipulator:this._manipulator}}}export{b as MoveXYDiscManipulation};
