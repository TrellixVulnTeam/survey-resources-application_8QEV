/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{unwrap as t}from"../../../../../core/maybe.js";import{handlesGroup as a}from"../../../../../core/handleUtils.js";import r from"../../../../../core/Evented.js";import e from"../../../../../Color.js";import{f as i}from"../../../../../chunks/vec3f64.js";import{s as o}from"../../../../../chunks/vec3.js";import s from"../../../../../core/Handles.js";import{w as n,i as l,x as p,m as u,r as h,p as m}from"../../../../../chunks/mat4.js";import{a as c}from"../../../../../chunks/mat4f64.js";import{getGraphicEffectiveElevationInfo as d}from"../../../../../support/elevationInfoUtils.js";import{sv3d as f,sm4d as _}from"../../../support/stack.js";import g from"../../../webgl-engine/lib/GeometryUtil.js";import{ColorMaterial as M}from"../../../webgl-engine/materials/ColorMaterial.js";import{createManipulatorDragEventPipeline as w,dragAtLocation as v,constrainToMapAxis as j,addScreenDelta as y}from"../../../../interactive/dragEventPipeline.js";import{screenToMapXYAtLocation as A}from"../dragEventPipeline3D.js";import{Manipulator3D as I}from"../../Manipulator3D.js";import{colors as T}from"../settings.js";import{DISC_RADIUS as b,DISC_HEIGHT as x,DISC_TRANSLATE_ARROW_OFFSET as D,DISC_TRANSLATE_ARROW_SIZE as P}from"./config.js";import{Manipulation as k}from"./Manipulation.js";import{createGraphicMoveDragPipeline as E}from"./moveUtils.js";class S extends k{constructor(t){super(),this._handles=new s,this._arrowManipulatorInfos=new Array,this._opaqueMaterial=this.createMaterial(),this._transparentMaterial=this.createMaterial(.5),this._angle=0,this._scale=1,this._radius=b,this._updateAfterDrag=!1,this.events=new r,this._tool=t.tool,this._view=t.view,null!=t.radius&&(this._radius=t.radius),this._createManipulators(),this.forEachManipulator((t=>this._tool.manipulators.add(t)))}set orthogonalAvailable(t){this._arrowManipulatorInfos[1].manipulator.available=t,this._arrowManipulatorInfos[3].manipulator.available=t}destroy(){this.forEachManipulator((t=>{this._tool.manipulators.remove(t),t.destroy()})),this._handles.removeAll(),this._tool=null,this._view=null,this._arrowManipulatorInfos.length=0}forEachManipulator(t){this._arrowManipulatorInfos.map((({manipulator:a})=>t(a,1)))}createGraphicDragPipeline(a,r,e){const i=r.graphic,o=d(i),s=t(i.geometry).spatialReference;return E(r,e,(t=>this.createDragPipeline(((r,e,i,o,s)=>t(r,a(r,e,i,o,s),i)),o,s,i)))}createDragPipeline(t,r,e,i){return a(this._arrowManipulatorInfos.map((({manipulator:a},o)=>w(a,((a,s,n,l,p)=>{const u=s.next((t=>({...t,manipulatorType:1}))).next(v(this._view,a.elevationAlignedLocation)).next(A(this._view,a.elevationAlignedLocation,r,e,i)).next(j(a.location,this.angle+(o+1)*Math.PI*.5)).next(y());t(a,u,n,l,p)})))))}get angle(){return this._angle}set angle(t){this._angle=t,this.dragging?this._updateAfterDrag=!0:this._updateManipulatorTransform()}get displayScale(){return this._scale}set displayScale(t){this._scale=t,this._updateManipulatorTransform()}get radius(){return this._radius}set radius(t){this._radius!==t&&(this._radius=t,this._updateManipulators())}_updateManipulators(){for(let t=0;t<this._arrowManipulatorInfos.length;t++)this._updateArrowManipulator(this._arrowManipulatorInfos[t],t);this._updateManipulatorTransform()}_updateArrowManipulator({manipulator:t,transform:a},r){const e=this._radius/b,i=P*e,s=Math.sqrt(i*i*3/4),h=g.createExtrudedTriangle(s,i/2,i/2,x);g.transformInPlace(h,n(_.get(),o(f.get(),0,-s/3,0))),t.renderObjects=[{geometry:h,material:this._opaqueMaterial,stateMask:2},{geometry:h,material:this._transparentMaterial,stateMask:1}],t.radius=s/3*2*1.2;const m=l(_.get());p(m,r*Math.PI/2);const c=l(_.get());n(c,o(f.get(),0,D*e,0)),u(a,m,c)}_createManipulators(){for(let t=0;t<4;t++){const a=this._createArrowManipulator(t);this._arrowManipulatorInfos.push(a)}this._updateManipulatorTransform()}_updateManipulatorTransform(){const t=this.angle,a=l(_.get());h(a,a,t,i(0,0,1));const r=m(_.get(),o(f.get(),this.displayScale,this.displayScale,this.displayScale)),e=l(_.get());u(e,r,a);for(const i of this._arrowManipulatorInfos){const t=u(_.get(),e,i.transform);i.manipulator.modelTransform=t}}_createArrowManipulator(t){const a=new I({view:this._view,autoScaleRenderObjects:!1,worldOriented:!0,focusMultiplier:1,touchMultiplier:1,collisionType:{type:"disc",direction:i(0,0,1)}}),r={manipulator:a,transform:c()};return this._updateArrowManipulator(r,t),this._handles.add(a.events.on("drag",(t=>{this._updateAfterDrag&&"end"===t.action&&!this.dragging&&(this._updateManipulatorTransform(),this._updateAfterDrag=!1)}))),r}createMaterial(t=1){const a=e.toUnitRGBA(T.main);return a[3]*=t,new M({color:a,transparent:1!==t,cullFace:2,renderOccluded:2})}get test(){return{arrowManipulators:this._arrowManipulatorInfos.map((({manipulator:t})=>t))}}}export{S as MoveXYAxisManipulation};
