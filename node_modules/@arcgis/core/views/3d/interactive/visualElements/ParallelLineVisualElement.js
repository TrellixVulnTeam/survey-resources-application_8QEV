/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{unwrap as e,isSome as t,isNone as s}from"../../../../core/maybe.js";import{createScreenPointArray as r}from"../../../../core/screenUtils.js";import{c as i,f as o}from"../../../../chunks/vec3f64.js";import{m as a,g as c,n as h,f as n,b as l}from"../../../../chunks/vec3.js";import d from"../../../../core/Handles.js";import{I as m}from"../../../../chunks/mat4f64.js";import{e as u,d as _,a as p,s as f,h as g}from"../../../../chunks/vec2.js";import{g as y,c as j}from"../../../../chunks/vec4.js";import{f as w}from"../../../../chunks/vec4f32.js";import x from"../../webgl-engine/lib/GeometryUtil.js";import{RibbonLineMaterial as b}from"../../webgl-engine/materials/RibbonLineMaterial.js";import{Object3DVisualElement as G}from"./Object3DVisualElement.js";class R extends G{constructor(e){super(e),this._handles=new d,this._location=i(),this._direction=o(1,0,0),this._width=1,this._offset=1,this._length=18,this._color=w(1,0,1,1),this._renderOccluded=4,this.applyProps(e)}get location(){return this._location}set location(e){a(this._location,e)||(c(this._location,e),this.updateGeometry())}get direction(){return this._direction}set direction(e){a(this._direction,e)||(c(this._direction,e),this.updateGeometry())}setDirectionFromPoints(e,t){h(this._direction,n(this._direction,t,e)),this.updateGeometry()}get width(){return this._width}set width(e){e!==this._width&&(this._width=e,this.updateMaterial())}get offset(){return this._offset}set offset(e){e!==this._offset&&(this._offset=e,this.updateGeometry())}get length(){return this._length}set length(e){e!==this._length&&(this._length=e,this.updateGeometry())}get color(){return this._color}set color(e){y(e,this._color)||(j(this._color,e),this.updateMaterial())}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this.updateMaterial())}createExternalResources(){const e=new b(this.materialParameters);this._handles.add(this.view.state.watch("camera",(()=>{this.updateGeometry()}))),this._externalResources={material:e}}destroyExternalResources(){this._handles.removeAll(),this._externalResources=null}createGeometries(t){const s=x.createPolylineGeometry([i(),i()]),r=x.createPolylineGeometry([i(),i()]),o=e(this._externalResources).material;t.addGeometry(s,o,m),t.addGeometry(r,o,m),this.updateVertices(t)}forEachExternalMaterial(e){t(this._externalResources)&&e(this._externalResources.material)}updateMaterial(){if(s(this._externalResources))return;this._externalResources.material.setParameterValues(this.materialParameters)}get materialParameters(){return{width:this._width,color:this._color,renderOccluded:this._renderOccluded}}updateGeometry(){const e=this.object;s(e)||this.updateVertices(e)}updateVertices(e){const t=this.view.state.camera;t.projectToScreen(this.location,V),l(O,this.location,this.direction),t.projectToScreen(O,v),u(v,_(v,v,V)),this.updateVertexAttributes(t,e,0,V,v,1),this.updateVertexAttributes(t,e,1,V,v,-1)}updateVertexAttributes(e,t,s,r,i,o){const a=t.geometryRecords[s].geometry.getMutableAttribute("position").data,c=p(P,f(P,i[1]*o,i[0]*-o),this.offset+this.width/2),h=g(M,g(M,g(M,r,p(M,i,this.length/2)),c),c),n=g(k,h,p(k,i,-this.length));e.unprojectFromScreen(h,O),a[0]=O[0],a[1]=O[1],a[2]=O[2],e.unprojectFromScreen(n,O),a[3]=O[0],a[4]=O[1],a[5]=O[2],t.geometryVertexAttrsUpdated(s)}}const O=i(),V=r(),v=r(),P=r(),M=r(),k=r();export{R as ParallelLineVisualElement};
