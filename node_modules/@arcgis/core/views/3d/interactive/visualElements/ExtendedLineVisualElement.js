/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import"../../../../core/has.js";import{isSome as e,unwrap as t,isNone as s,unwrapOr as i}from"../../../../core/maybe.js";import{c as r,f as n}from"../../../../chunks/vec3f64.js";import{g as a,f as l,m as o,p as h}from"../../../../chunks/vec3.js";import d from"../../../../core/Handles.js";import{g as p,c as _}from"../../../../chunks/vec4.js";import{f as c,a as u}from"../../../../chunks/vec4f32.js";import{f,g as m,d as y,b as g}from"../../../../chunks/clipRay.js";import{ray as x,lineSegment as w,frustum as b}from"../../support/geometryUtils.js";import R from"../../webgl-engine/lib/GeometryUtil.js";import{RibbonLineMaterial as E}from"../../webgl-engine/materials/RibbonLineMaterial.js";import{LaserlineVisualElement as O}from"./LaserlineVisualElement.js";import{Object3DVisualElement as P}from"./Object3DVisualElement.js";class C extends P{constructor(e){super(e),this._ray=x.create(),this._externalResources=null,this._handles=new d,this._isWorldDown=!1,this._start=r(),this._end=n(1,0,0),this._width=1,this._color=c(1,0,1,1),this._polygonOffset=!1,this._writeDepthEnabled=!0,this._innerWidth=0,this._innerColor=c(1,1,1,1),this._stippleIntegerRepeats=!0,this._stipplePattern=null,this._stippleOffColor=null,this._falloff=0,this._extensionType=0,this._laserlineStyle=null,this._laserlineEnabled=!1,this._renderOccluded=4,this._fadedExtensions=W,this.applyProps(e)}createExternalResources(){const e=new E(this.materialParameters);this._handles.add(this.view.state.watch("camera",(()=>{this.updateGeometry()})));const t=new O({view:this.view,attached:this._laserlineEnabled});this._externalResources={material:e,laserline:t}}destroyExternalResources(){e(this._externalResources)&&this._externalResources.laserline.destroy(),this._externalResources=null,this._handles.removeAll()}forEachExternalMaterial(t){e(this._externalResources)&&t(this._externalResources.material)}createGeometries(e){const s=[r(),r()],i=3===this.extensionType;i&&s.push(r(),r());const n=i?new Float32Array([1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0]):null,a=R.createPolylineGeometry(s,null,n);e.addGeometry(a,t(this._externalResources).material),this.updateVertices(a)}updateVisibility(t){super.updateVisibility(t),e(this._externalResources)&&(this._externalResources.laserline.visible=t)}setStartEndFromWorldDownAtLocation(e){this._isWorldDown=!0,a(this._start,e),this.view.renderCoordsHelper.worldUpAtPosition(e,this._end),l(this._end,e,this._end),x.fromPoints(this._start,this._end,this._ray),this.updateGeometry()}get start(){return this._start}set start(e){this._isWorldDown=!1,o(this._start,e)||(a(this._start,e),x.fromPoints(this._start,this._end,this._ray),this.updateGeometry())}get end(){return this._end}set end(e){this._isWorldDown=!1,o(this._end,e)||(a(this._end,e),x.fromPoints(this._start,this._end,this._ray),this.updateGeometry())}get width(){return this._width}set width(e){e!==this._width&&(this._width=e,this.updateMaterial())}get color(){return this._color}set color(e){p(e,this._color)||(_(this._color,e),this.updateMaterial())}get polygonOffset(){return this._polygonOffset}set polygonOffset(e){e!==this._polygonOffset&&(this._polygonOffset=e,this.updateMaterial())}get writeDepthEnabled(){return this._writeDepthEnabled}set writeDepthEnabled(e){this._writeDepthEnabled!==e&&(this._writeDepthEnabled=e,this.updateMaterial())}get innerWidth(){return this._innerWidth}set innerWidth(e){e!==this._innerWidth&&(this._innerWidth=e,this.updateMaterial())}get innerColor(){return this._innerColor}set innerColor(e){p(e,this._innerColor)||(_(this._innerColor,e),this.updateMaterial())}get stippleIntegerRepeats(){return this._stippleIntegerRepeats}set stippleIntegerRepeats(e){e!==this._stippleIntegerRepeats&&(this._stippleIntegerRepeats=e,this.updateMaterial())}get stipplePattern(){return this._stipplePattern}set stipplePattern(t){const s=e(t)!==e(this._stipplePattern);this._stipplePattern=t,s?this.recreate():this.updateMaterial()}get stippleOffColor(){return this._stippleOffColor}set stippleOffColor(t){(s(t)||s(this._stippleOffColor)||!p(t,this._stippleOffColor))&&(this._stippleOffColor=e(t)?u(t):null,this.updateMaterial())}get falloff(){return this._falloff}set falloff(e){e!==this._falloff&&(this._falloff=e,this.updateMaterial())}get extensionType(){return this._extensionType}set extensionType(e){e!==this._extensionType&&(this._extensionType=e,this.updateGeometry())}get _laserlineAttached(){return this._laserlineEnabled&&e(this._laserlineStyle)}get laserlineStyle(){return this._laserlineStyle}set laserlineStyle(t){this._laserlineStyle=t,e(this._externalResources)&&(this._externalResources.laserline.attached=this._laserlineAttached,e(t)&&(this._externalResources.laserline.style=t))}get laserlineEnabled(){return this._laserlineEnabled}set laserlineEnabled(t){this._laserlineEnabled!==t&&(this._laserlineEnabled=t,e(this._externalResources)&&(this._externalResources.laserline.attached=this._laserlineAttached))}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this.updateMaterial())}get fadedExtensions(){return this._fadedExtensions}set fadedExtensions(e){this._fadedExtensions=i(e,W),this.recreateGeometry()}updateMaterial(){if(s(this._externalResources))return;this._externalResources.material.setParameterValues(this.materialParameters)}get materialParameters(){return{width:this._width,color:this._color,stippleOffColor:this._stippleOffColor,stipplePattern:this._stipplePattern,stippleIntegerRepeats:this._stippleIntegerRepeats,innerWidth:this._innerWidth,innerColor:this._innerColor,falloff:this._falloff,polygonOffset:this._polygonOffset,renderOccluded:this._renderOccluded,writeDepth:this._writeDepthEnabled}}updateGeometry(){e(this.object)&&this.updateVertices(this.object.geometries[0])}updateVertices(t){const s=3===this._extensionType?this.updateLineSegmentFinite(M):this.updateLineSegmentInfinite(this._extensionType,M);this.updateVertexAttributes(t,s),e(this._externalResources)&&(this._externalResources.laserline.intersectsLine=s)}updateLineSegmentFinite(e){return w.fromPoints(this._start,this._end,e)}updateLineSegmentInfinite(e,t){const s=this.view.state.camera;switch(f(this._ray,A),e){case 0:A.c0=-Number.MAX_VALUE;break;case 1:case 2:{const e=this._ray.origin,t=i(this.view.elevationProvider.getElevation(e[0],e[1],e[2],this.view.renderCoordsHelper.spatialReference,"ground"),0),s=this.view.renderCoordsHelper.getAltitude(e);this._isWorldDown&&s<t&&h(A.ray.direction,A.ray.direction),2===this._extensionType&&null!=t&&(A.c1=Math.abs(s-t));break}}if(!b.intersectClipRay(s.frustum,A))return w.fromPoints(this._start,this._end,t);const r=m(A,j),n=y(A,v);return w.fromPoints(r,n,t)}updateVertexAttributes(t,s){const i=t.getMutableAttribute("position").data;if(3===this.extensionType){const e=w.pointAt(s,-this.fadedExtensions.start,j);i[0]=e[0],i[1]=e[1],i[2]=e[2];const t=w.pointAt(s,0,j);i[3]=t[0],i[4]=t[1],i[5]=t[2];const r=w.pointAt(s,1,j);i[6]=r[0],i[7]=r[1],i[8]=r[2];const n=w.pointAt(s,1+this.fadedExtensions.end,j);i[9]=n[0],i[10]=n[1],i[11]=n[2]}else{const e=w.pointAt(s,0,j);i[0]=e[0],i[1]=e[1],i[2]=e[2];const t=w.pointAt(s,1,j);i[3]=t[0],i[4]=t[1],i[5]=t[2]}e(this.object)&&this.object.geometryVertexAttrsUpdated(0)}}const A=g(),j=r(),v=r(),M=w.create(),D=1/3,W={start:D,end:D};export{C as ExtendedLineVisualElement};
