/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{isNone as e,isSome as r}from"../../../../core/maybe.js";import{c as t}from"../../../../chunks/vec3f64.js";import{f as s}from"../../../../chunks/vec3.js";import i from"../../../../core/Handles.js";import{a}from"../../../../chunks/mat4f64.js";import{sv3d as o}from"../../support/stack.js";import n from"../../webgl-engine/lib/GeometryUtil.js";import{Object3DVisualElement as h}from"./Object3DVisualElement.js";import{MeasurementArrowMaterial as l}from"../../webgl-engine/materials/MeasurementArrowMaterial.js";class d extends h{constructor(e){super(e),this._parameters=c,this._handles=null,this._origin=t(),this._originTransform=a(),this._arrowCenter=t(),this._renderOccluded=4,this._geometry=null,this._stripeLength=1,this._stripesEnabled=!0,this.applyProps(e)}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this._arrowMaterial&&this._arrowMaterial.setParameterValues({renderOccluded:e}))}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this.geometryChanged()}get stripeLength(){return this._stripeLength}set stripeLength(e){this._stripeLength=e,this.attached&&this._arrowMaterial.setParameterValues({stripeLength:this._stripeLength})}get stripesEnabled(){return this._stripesEnabled}set stripesEnabled(e){if(this._stripesEnabled=e,this.attached){const e=this._stripesEnabled?this._parameters.arrowStripeEvenColor:this._parameters.arrowStripeOddColor;this._arrowMaterial.setParameterValues({stripeEvenColor:e})}}createExternalResources(){const e=this._stripesEnabled?this._parameters.arrowStripeEvenColor:this._parameters.arrowStripeOddColor;this._arrowMaterial=new l({outlineColor:this._parameters.arrowOutlineColor,stripeEvenColor:e,stripeOddColor:this._parameters.arrowStripeOddColor,renderOccluded:this.renderOccluded,polygonOffset:!0}),this._handles=new i,this._handles.add(this.view.state.watch("camera",(()=>{this.viewChanged()})))}destroyExternalResources(){this._arrowMaterial=null,this._handles.destroy(),this._handles=null}forEachExternalMaterial(e){e(this._arrowMaterial)}createGeometries(r){if(e(this._geometry)||e(this._geometry.startRenderSpace)||e(this._geometry.endRenderSpace))return;const t=this._createArrowGeometry(this._geometry.startRenderSpace,this._geometry.endRenderSpace,this._origin,this._geometry);r.addGeometry(t,this._arrowMaterial,this._originTransform),this.viewChanged()}_createArrowGeometry(e,r,t,i){const a=this.view.renderCoordsHelper,h=[],l=[],d=(e,r)=>{const i=o.get();s(i,e,t),h.push(i),l.push(r)};if("euclidean"===i.type){i.eval(.5,this._arrowCenter);const t=o.get();a.worldUpAtPosition(this._arrowCenter,t),d(e,t),d(r,t)}else{i.eval(.5,this._arrowCenter);const e=this._parameters.arrowSubdivisions+1&-2;for(let r=0;r<e;++r){const t=r/(e-1),s=o.get(),n=o.get();i.eval(t,s),a.worldUpAtPosition(s,n),d(s,n)}}return n.createPolylineGeometry(h,l)}geometryChanged(){this.recreateGeometry()}viewChanged(){if(this.view.ready&&this.attached&&r(this._geometry)){const e=this.view._stage.camera.computeScreenPixelSizeAt(this._arrowCenter);this._arrowMaterial.setParameterValues({width:this._parameters.arrowWidth*e})}}}const c={arrowWidth:16,arrowOutlineColor:[1,.5,0,1],arrowOutlineWidth:.2,arrowStripeEvenColor:[1,1,1,1],arrowStripeOddColor:[1,.5,0,1],arrowStripeLength:16,arrowSubdivisions:128};export{d as MeasurementArrowVisualElement};
