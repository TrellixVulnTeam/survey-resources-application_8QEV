/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{isSome as e,isNone as t,unwrap as i}from"../../../../../core/maybe.js";import{screenPointObjectToArray as s}from"../../../../../core/screenUtils.js";import{c as r}from"../../../../../chunks/vec3f64.js";import{f as n}from"../../../../../chunks/vec3.js";import a from"../../../../../core/Handles.js";import{i as l,t as o}from"../../../../../chunks/mat4.js";import{a as h}from"../../../../../chunks/mat4f64.js";import m from"../../../webgl-engine/lib/GeometryUtil.js";import{Intersector as _}from"../../../webgl-engine/lib/Intersector.js";import{createStipplePatternSimple as p}from"../../../webgl-engine/materials/lineStippleUtils.js";import{LaserlineVisualElement as d}from"../../visualElements/LaserlineVisualElement.js";import{ManipulatorCollection as c}from"../../../../interactive/ManipulatorCollection.js";import{screenToMap3D as u}from"../../editingTools/dragEventPipeline3D.js";import{createSphereManipulator as g}from"../../manipulatorUtils.js";import{copyParameter as L,pointToPointScreenDistance as b,midpoint as v,resizeArray as w}from"../support/viewUtils.js";import{LabelVisualElement as f}from"../../visualElements/LabelVisualElement.js";import{LineVisualElement as S}from"../../visualElements/LineVisualElement.js";import{MeasurementAreaVisualElement as P}from"../../visualElements/MeasurementAreaVisualElement.js";import{GeodesicSegment as C,EuclideanSegment as y}from"../../visualElements/support/Segment.js";const M={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:1,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,handleRadiusHovered:10,handleRadiusMouse:10,handleRadiusTouch:25,pathLineColor:[1,.5,0,1],pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:[1,.5,0,1],perimeterLineWidth:2,projectionLineColor:[1,.5,0,1],projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:[1,.5,0,.5],areaColor2:[1,1,1,.5],fillColor:[1,.5,0,.5],lineSubdivisions:64,labelDistance:25};class j{constructor(e,t=new c,i={}){this._model=e,this._manipulators=t,this.vertexManipulators=[],this._visible=!1,this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._laserLine=null,this._measurementArea=null,this._areaLabel=null,this._pathLengthLabel=null,this._cursorSegmentLengthLabel=null,this._perimeterLengthLabel=null,this._cursorManipulator=null,this._pathSegments=[],this._perimeterSegments=[],this._cursorSegment=null,this._listenerHandles=null,this._origin=r(),this._originTransform=h(),this._tempHandlePosition=r(),this._cursorPositionRenderSpace=r(),this._view=this._model.sceneView,this._params=L(M,i),this._intersector=new _(this._view.state.mode),this._intersector.options.store=0;const s=g(this._view,this._params.handleColor,this._params.handleOpacity);s.available=!1,s.radius=this._params.handleRadius,s.interactive=!1,this._manipulators.add(s),this._cursorManipulator=s,this._path=new S({view:this._view,attached:!0,width:this._params.pathLineWidth,color:this._params.pathLineColor,polygonOffset:!0,renderOccluded:4}),this._intersectedPath=new S({view:this._view,attached:!0,width:this._params.pathLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4}),this._perimeter=new S({view:this._view,attached:!0,width:this._params.perimeterLineWidth,color:this._params.perimeterLineColor,polygonOffset:!0,renderOccluded:4}),this._intersectedPerimeter=new S({view:this._view,attached:!0,width:this._params.perimeterLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4}),this._projectionLines=new S({view:this._view,attached:!0,width:this._params.projectionLineWidth,color:this._params.projectionLineColor,stipplePattern:p(this._params.projectionLineStippleSize),stippleIntegerRepeats:!1,polygonOffset:!0,renderOccluded:4}),this._laserLine=new d({view:this._view,attached:!0,style:{glowColor:this._params.laserLineGlowColor,glowWidth:this._params.laserLineGlowWidth,glowFalloff:this._params.laserLineGlowFalloff,innerColor:this._params.laserLineInnerColor,innerWidth:this._params.laserLineInnerWidth,globalAlpha:this._params.laserLineGlobalAlpha}}),this._measurementArea=new P({view:this._view,attached:!0,color1:this._params.areaColor1,color2:this._params.areaColor2}),this._areaLabel=new f({view:this._view,attached:!0,fontSize:16}),this._pathLengthLabel=new f({view:this._view,attached:!0,fontSize:12}),this._cursorSegmentLengthLabel=new f({view:this._view,attached:!0,fontSize:12}),this._perimeterLengthLabel=new f({view:this._view,attached:!0,fontSize:12})}destroy(){this.hide(),this._laserLine.destroy(),this._laserLine=null,this._measurementArea.destroy(),this._measurementArea=null,this._path.destroy(),this._path=null,this._intersectedPath.destroy(),this._intersectedPath=null,this._perimeter.destroy(),this._perimeter=null,this._intersectedPerimeter.destroy(),this._intersectedPerimeter=null,this._areaLabel.destroy(),this._areaLabel=null,this._pathLengthLabel.destroy(),this._pathLengthLabel=null,this._cursorSegmentLengthLabel.destroy(),this._cursorSegmentLengthLabel=null,this._perimeterLengthLabel.destroy(),this._perimeterLengthLabel=null}get requiresCursorPoint(){return("initial"===this._model.state||"drawing"===this._model.state)&&this._model.active}get visible(){return this._visible}set visible(e){e?this.show():this.hide()}get testData(){const t=this._laserLine.testData;return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,perimeterLength:this._perimeterLengthLabel},laserLineRenderer:e(t)?{heightManifoldEnabled:t.heightManifoldEnabled,heightManifoldTarget:t.heightManifoldTarget,pointDistanceEnabled:t.pointDistanceEnabled,pointDistanceOrigin:t.pointDistanceOrigin,pointDistanceTarget:t.pointDistanceTarget,lineVerticalPlaneEnabled:t.lineVerticalPlaneEnabled}:{heightManifoldEnabled:!1,heightManifoldTarget:null,pointDistanceEnabled:!1,pointDistanceOrigin:null,pointDistanceTarget:null,lineVerticalPlaneEnabled:!1}}}show(){this._visible||(this._visible=!0,this._path.visible=!0,this._intersectedPath.visible=!0,this._perimeter.visible=!0,this._intersectedPerimeter.visible=!0,this._projectionLines.visible=!0,this._laserLine.visible=!0,this._measurementArea.visible=!0,this._areaLabel.visible=!0,this._pathLengthLabel.visible=!0,this._cursorSegmentLengthLabel.visible=!0,this._perimeterLengthLabel.visible=!0,this._initializeListeners(),this._updateAll(this._model.viewData))}hide(){this._visible&&(this._visible=!1,this._path.visible=!1,this._intersectedPath.visible=!1,this._perimeter.visible=!1,this._projectionLines.visible=!1,this._intersectedPerimeter.visible=!1,this._laserLine.visible=!1,this._measurementArea.visible=!1,this._areaLabel.visible=!1,this._pathLengthLabel.visible=!1,this._cursorSegmentLengthLabel.visible=!1,this._perimeterLengthLabel.visible=!1,this._destroyListeners(),this.vertexManipulators.forEach((e=>{this._removeVertexManipulator(e.manipulator)})),this.vertexManipulators=[],this._view.cursor=null)}vertexHandleAt(t,i){const s=this._manipulators.intersect(t,i);return e(s)?s.manipulator.metadata:null}manipulatorToVertex(e){return e.metadata}pick(e){const i=this._view.spatialReference,n=s(e.screenPoint);this._view.sceneIntersectionHelper.intersectToolIntersectorScreen(n,this._intersector);const a=this._intersector.results.min,l=r();if(!a.getIntersectionPoint(l))return new j.PickResult;const o=this._view.renderCoordsHelper.fromRenderCoords(l,i);if(t(o))return new j.PickResult;const h="TerrainRenderer"===a.intersector?"surface":"feature";return new j.PickResult(h,l,o)}overlappingHandles(e,t){return b(e,t,this._view)<=this._params.handleRadius}screenToMap3D(){return u(this._view)}_updateOrigin(e){v(e.positionsRenderCoords,this._origin),l(this._originTransform),o(this._originTransform,this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform}_updateAll(e){this._visible&&(this._updateOrigin(e),this._updatePathSegments(e),this._updatePerimeterSegments(e),this._updateVertexManipulators(e),this._updateArea(e),this._updateProjectionLines(e),this._updateLabels(e),this._updateLaserLine())}_createSegments(e,t){const i=e.path,s=this._view.renderCoordsHelper.spatialReference,r=this._model.measurementMode,n=[],a=[],l=[],o=e.validMeasurement?i.numVertices:i.numVertices-1;for(let h=0;h<o;++h){const o=e[t][h],m=e[t][(h+1)%i.numVertices];let _=null;switch(r){case"euclidean":_=new y(o,m);break;case"geodesic":_=new C(o,m,s)}e.intersectingSegments.has(h)?l.push(_):a.push(_),n.push(_)}return{all:n,nonIntersecting:a,intersecting:l}}_updatePathSegments(t){const i=this._createSegments(t,"positionsRenderCoords"),s=t.path,r=this._view.renderCoordsHelper,n=r.spatialReference,a=this._model.measurementMode;if(this._cursorSegment=null,s.numVertices>0&&"drawing"===this._model.state&&e(this._model.cursorPoint)){if(r.toRenderCoords(this._model.cursorPoint,this._cursorPositionRenderSpace)){const e=t.positionsRenderCoords[s.numVertices-1],r=this._cursorPositionRenderSpace;let l=null;switch(a){case"euclidean":l=new y(e,r);break;case"geodesic":l=new C(e,r,n)}i.nonIntersecting.push(l),this._cursorSegment=l}}this._path.setGeometryFromSegments(i.nonIntersecting,this._origin),this._intersectedPath.setGeometryFromSegments(i.intersecting,this._origin),this._pathSegments=i.all}_updatePerimeterSegments(e){const t=this._createSegments(e,"positionsFittedRenderCoords");this._perimeter.setGeometryFromSegments(t.nonIntersecting,this._origin),this._intersectedPerimeter.setGeometryFromSegments(t.intersecting,this._origin),this._perimeterSegments=t.all}_createVertexManipulator(){const e=g(this._view,this._params.handleColor,this._params.handleOpacity);e.radius=this._params.handleRadius;return{id:this._manipulators.add(e),manipulator:e}}_removeVertexManipulator(e){this._manipulators.remove(e)}_updateVertexManipulators(t){const i=this._model.path.vertices,s=this.vertexManipulators;w(s,i.length,(()=>this._createVertexManipulator()),(e=>this._removeVertexManipulator(e.manipulator))),s.forEach(((e,s)=>{e.manipulator.metadata=i[s],e.manipulator.renderLocation=t.positionsRenderCoords[s]})),"drawing"===this._model.state&&e(this._model.cursorPoint)?(this._cursorManipulator.available=!0,this._cursorManipulator.location=this._model.cursorPoint):this._cursorManipulator.available=!1}_updateArea(e){switch(this._model.measurementMode){case"euclidean":this._updateAreaEuclidean(e);break;case"geodesic":this._updateAreaGeodesic()}}_updateAreaEuclidean(e){e.validMeasurement&&0===e.intersectingSegments.size&&e.triangleIndices?(this._measurementArea.geometry={uv:e.positionsProjected,position:e.positionsFittedRenderCoords,triangleIndices:e.triangleIndices},this._measurementArea.size=[e.checkerSize,e.checkerSize],this._measurementArea.visible=!0,this._perimeter.visible=!0,this._projectionLines.visible=!0):(this._measurementArea.visible=!1,this._perimeter.visible=!1,this._projectionLines.visible=!1)}_updateAreaGeodesic(){this._measurementArea.visible=!1,this._perimeter.visible=!1,this._projectionLines.visible=!1}_updateProjectionLines(e){const t=e.path;if(t.numVertices>0&&e.validMeasurement&&"euclidean"===this._model.measurementMode){const e=[];for(let i=0;i<t.numVertices;++i){const t=r();n(t,this._model.viewData.positionsRenderCoords[i],this._origin);const s=r();n(s,this._model.viewData.positionsFittedRenderCoords[i],this._origin),e.push([t,s])}this._projectionLines.geometry=e}else this._projectionLines.geometry=null}_updateLabels(t){if(!this._visible)return;const i=this._model,s=this._view,r="drawing"===i.state;if(this._areaLabel.geometry=s.renderCoordsHelper.fromRenderCoords(t.areaCentroid,s.spatialReference),this._areaLabel.text=i.areaLabel,this._areaLabel.visible=t.validMeasurement&&0===t.intersectingSegments.size&&null!=i.areaLabel,t.pathLengthLabelSegmentIndex>=0&&t.pathLengthLabelSegmentIndex<this._pathSegments.length){const s=this._pathSegments[t.pathLengthLabelSegmentIndex],n=e(this._cursorSegment)?this._cursorSegment:R;this._pathLengthLabel.distance=this._params.labelDistance,this._pathLengthLabel.geometry={type:"corner",left:s,right:n},this._pathLengthLabel.text=i.pathLengthLabel,this._pathLengthLabel.visible=r&&i.path.numVertices>0}else this._pathLengthLabel.visible=!1;this._cursorSegmentLengthLabel.distance=this._params.labelDistance,this._cursorSegmentLengthLabel.geometry=e(this._cursorSegment)?{type:"segment",segment:this._cursorSegment,sampleLocation:"end"}:null,this._cursorSegmentLengthLabel.anchor="bottom",this._cursorSegmentLengthLabel.text=i.cursorSegmentLengthLabel,this._cursorSegmentLengthLabel.visible=r&&!!i.cursorSegmentLength&&0!==i.cursorSegmentLength.value,this._cursorSegmentLengthLabel.overlaps(this._pathLengthLabel)&&(this._cursorSegmentLengthLabel.visible=!1),this._pathLengthLabel.overlaps(this._areaLabel)&&(this._pathLengthLabel.visible=!1),this._updatePerimeterLabel(this._model.viewData)}_updatePerimeterLabel(e){const t=this._model,i="geodesic"===t.measurementMode;if(t.validMeasurement&&0===e.intersectingSegments.size){this._perimeterLengthLabel.distance=this._params.labelDistance,this._perimeterLengthLabel.anchor="top",this._perimeterLengthLabel.text=t.perimeterLengthLabel,this._perimeterLengthLabel.visible=!0;let s=!0;for(let t=0;t<e.path.numVertices;++t){const r=(e.perimeterLengthLabelSegmentIndex+t)%e.path.numVertices,n=i?this._pathSegments[r]:this._perimeterSegments[r];if(s=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:n,sampleLocation:"center"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;s=!1}this._perimeterLengthLabel.visible=s}else this._perimeterLengthLabel.visible=!1}_getFocusPoint(){const t=this._model,s=this._model.lastDraggedVertex;switch(t.state){case"drawing":return e(t.cursorPoint)?t.cursorPoint:e(s)?t.path.getVertexPositionAsPoint(s):i(t.path.lastPoint);case"editing":return e(s)?t.path.getVertexPositionAsPoint(s):null;default:return t.cursorPoint}}_updateLaserLine(){const t=this._model,i=this._params.laserLineEnabled&&"measured"!==t.state&&t.active,s=this._getFocusPoint();if(i&&e(s)){const e=this._tempHandlePosition;this._view.renderCoordsHelper.toRenderCoords(s,e),this._laserLine.heightManifoldTarget=e}else this._laserLine.heightManifoldTarget=null}_initializeListeners(){this._listenerHandles=new a,this._listenerHandles.add([this._model.watch(["state","lastDraggedVertex"],(()=>this._updateLaserLine())),this._model.watch(["cursorPoint","unit","measurementMode","active","viewData"],(()=>this._updateAll(this._model.viewData))),this._model.watch(["areaLabel","cursorSegmentLengthLabel","pathLengthLabel","perimeterLengthLabel"],(()=>{this._updateAll(this._model.viewData)})),this._view.state.watch("camera",(()=>this._updatePerimeterLabel(this._model.viewData)))])}_destroyListeners(){this._listenerHandles.destroy(),this._listenerHandles=null}}j._handleGeometry=m.createSphereGeometry(1,32,32),function(e){class t{}e.PickRequest=t;class i{constructor(e=null,t=null,i=null){this.type=e,this.scenePoint=t,this.mapPoint=i}}e.PickResult=i}(j||(j={}));const R=new y(r(),r());var V=j;export default V;
