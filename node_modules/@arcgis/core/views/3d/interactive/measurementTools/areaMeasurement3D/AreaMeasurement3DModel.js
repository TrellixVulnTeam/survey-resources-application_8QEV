/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import"../../../../../core/has.js";import{isSome as t}from"../../../../../core/maybe.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import{property as r}from"../../../../../core/accessorSupport/decorators/property.js";import{subclass as s}from"../../../../../core/accessorSupport/decorators/subclass.js";import"../../../../../core/urlUtils.js";import"../../../../../core/uuid.js";import"../../../../../portal/support/resourceExtension.js";import i from"../../../../../core/Accessor.js";import{onLocaleChange as a}from"../../../../../intl/locale.js";import{nextHighestPowerOfTen as n}from"../../../../../core/mathUtils.js";import{fetchMessageBundle as o}from"../../../../../intl/messages.js";import"../../../../../intl.js";import h from"../../../../../core/Handles.js";import{whenTrue as m}from"../../../../../core/watchUtils.js";import{getSphericalPCPF as u,SphericalECEFSpatialReference as l,WGS84ECEFSpatialReference as d}from"../../../../../geometry/projectionEllipsoid.js";import{convertUnit as c,preferredImperialAreaUnit as p,preferredMetricAreaUnit as g,preferredImperialLengthUnit as L,preferredMetricLengthUnit as y}from"../../../../../core/unitUtils.js";import{canProjectWithoutEngine as f}from"../../../../../geometry/projection.js";import _ from"../../../../../core/Quantity.js";import{formatDecimal as v}from"../../../../../core/quantityFormatUtils.js";import{AreaMeasurement3D as D}from"../../graphics/AreaMeasurement3D.js";import{AreaMeasurement3DPathHelper as M}from"./AreaMeasurementPathHelper.js";import j from"../support/measurementUtils.js";import w from"./MeasurementData.js";import P from"../support/UnitNormalizer.js";let S=class extends i{constructor(){super(...arguments),this._unitNormalizer=new P,this._measurementData=new w,this._handles=new h,this.dataObject=new D,this.path=new M,this.cursorPoint=null,this.state="initial",this.lastDraggedVertex=null,this.mode="auto",this.unit="metric",this.active=!1,this.fittingSettings={maxRelativeErrorCoplanar:.005,maxRelativeErrorAlmostCoplanar:.01,verticalAngleThreshold:80},this.geodesicMeasurementDistanceThreshold=1e5}initialize(){this.path.model=this.dataObject,o("esri/core/t9n/Units").then((e=>{this.messages=e})),this._handles.add(a((async()=>{this.messages=await o("esri/core/t9n/Units")}))),this._handles.add(m(this.sceneView,"ready",(()=>{const{spatialReference:e}=this.sceneView,t=u(e),r=t===l?d:t,s=!e||f(e,r)?r:e;this._worldSpatialReference=s,this._unitNormalizer.spatialReference=s,this.path.view=this.sceneView})),"scene-view"),this.reset(),this._handles.add(this.path.on("clear",(()=>{this.notifyChange("numVertices"),this._updateMeasurementData()}))),this._handles.add(this.path.on("vertex-update",(()=>{this.notifyChange("numVertices"),this._updateMeasurementData()}))),this._handles.add(this.watch("state",(()=>this._updateMeasurementData()),!0)),this._handles.add(this.watch("fittingSettings",(()=>this._updateMeasurementData())))}destroy(){this._handles.destroy(),this._handles=null}get validMeasurement(){return this.numVertices>=3&&"measured"===this.state||"editing"===this.state}get numVertices(){return this.path.numVertices}get measurementData(){return this._measurementData}_updateMeasurementData(){const e=this._measurementData;e.update(this.path,this.sceneView,this._unitNormalizer,this.validMeasurement,this.sceneView.renderSpatialReference,this._worldSpatialReference,this.fittingSettings),this.dataObject.result={area:e.area,geodesicArea:e.geodesicArea,pathLength:e.pathLength,geodesicPathLength:e.geodesicPathLength,perimeterLength:e.perimeterLength},this.notifyChange("measurementData")}get area(){return this.measurementData.area}get geodesicArea(){return this.measurementData.geodesicArea}get areaLabel(){return this._formatAreaLabel(this.messages,"geodesic"===this.measurementMode?this.measurementData.geodesicArea:this.measurementData.area,this.unit)}get pathLength(){return this.measurementData.pathLength}get geodesicPathLength(){return this.measurementData.geodesicPathLength}get pathLengthLabel(){return this._formatLengthLabel(this.messages,"geodesic"===this.measurementMode?this.measurementData.geodesicPathLength:this.measurementData.pathLength,this.unit)}get perimeterLength(){return this.measurementData.perimeterLength}get geodesicPerimeterLength(){return this.measurementData.geodesicPathLength}get perimeterLengthLabel(){return this.measurementData.perimeterLength&&this._formatLengthLabel(this.messages,"geodesic"===this.measurementMode?this.measurementData.geodesicPathLength:this.measurementData.perimeterLength,this.unit)}get cursorSegmentLength(){const e=this.path.lastPoint;return t(e)&&t(this.cursorPoint)?new _(this._unitNormalizer.normalizeDistance(j.segmentLengthEuclidean(e,this.cursorPoint,this._worldSpatialReference)),"meters"):null}get geodesicCursorSegmentLength(){const e=this.path.lastPoint;return t(e)&&t(this.cursorPoint)?new _(j.segmentLengthGeodesic(e,this.cursorPoint),"meters"):null}get cursorSegmentLengthLabel(){return this._formatLengthLabel(this.messages,"geodesic"===this.measurementMode?this.geodesicCursorSegmentLength:this.cursorSegmentLength,this.unit)}get viewData(){const e=this.measurementData,t="geodesic"===this.measurementMode,r=t?this.geodesicArea:this.area;let s=1;if(r){const e=this._toPreferredAreaUnit(r,this.unit);s=n(Math.sqrt(e.value)/Math.sqrt(300)),s*=Math.sqrt(c(1,e.unit,"square-meters")),s/=this._unitNormalizer.normalizeDistance(1)}return{validMeasurement:this.validMeasurement,path:this.path,positionsGeographic:e.positionsGeographic,positionsRenderCoords:e.positionsRenderCoords,positionsProjected:e.positionsProjectedWorldCoords,positionsFittedRenderCoords:e.positionsFittedRenderCoords,intersectingSegments:t?e.geodesicIntersectingSegments:e.intersectingSegments,triangleIndices:t?e.geodesicTriangleIndices:e.triangleIndices,fittingMode:e.fittingMode,areaCentroid:t?e.geodesicAreaCentroidRenderCoords:e.areaCentroidRenderCoords,pathLengthLabelSegmentIndex:this.validMeasurement?0:this.path.numVertices-2,perimeterLengthLabelSegmentIndex:0,checkerSize:s}}get measurementMode(){let e=this.mode;if("auto"===e){e="euclidean";(this.geodesicPathLength?this.geodesicPathLength.value:0)+(!this.validMeasurement&&this.geodesicCursorSegmentLength?this.geodesicCursorSegmentLength.value:0)>this.geodesicMeasurementDistanceThreshold&&(e="geodesic")}return null==this.geodesicPathLength&&(e="euclidean"),e}reset(){this.clearMeasurement(),this._updateMeasurementData()}clearMeasurement(){this.path.clear(),this.state="initial",this.cursorPoint=null}finishMeasurement(){this.path.numVertices<3?this.clearMeasurement():this.state="measured"}_preferredAreaUnit(e,t){switch(t){case"metric":return g(e.value,e.unit);case"imperial":return p(e.value,e.unit);default:return t}}_preferredLengthUnit(e,t){const r=this._deriveLengthUnitFromAreaUnit(t);switch(r){case"metric":return y(e.value,e.unit);case"imperial":return L(e.value,e.unit);default:return r}}_toPreferredAreaUnit(e,t){return e.toUnit(this._preferredAreaUnit(e,t))}_toPreferredLengthUnit(e,t){return e.toUnit(this._preferredLengthUnit(e,t))}_formatAreaLabel(e,t,r){return e&&t&&v(e,t,this._preferredAreaUnit(t,r))}_formatLengthLabel(e,t,r){return e&&t&&v(e,t,this._preferredLengthUnit(t,r))}_deriveLengthUnitFromAreaUnit(e){switch(e){case"metric":return"metric";case"imperial":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers";case"acres":return"imperial";case"ares":case"hectares":return"metric"}throw new Error("unhandled area unit")}};e([r()],S.prototype,"messages",void 0),e([r()],S.prototype,"dataObject",void 0),e([r({constructOnly:!0})],S.prototype,"sceneView",void 0),e([r({readOnly:!0})],S.prototype,"path",void 0),e([r()],S.prototype,"cursorPoint",void 0),e([r()],S.prototype,"state",void 0),e([r()],S.prototype,"lastDraggedVertex",void 0),e([r()],S.prototype,"mode",void 0),e([r()],S.prototype,"unit",void 0),e([r()],S.prototype,"active",void 0),e([r()],S.prototype,"fittingSettings",void 0),e([r({readOnly:!0})],S.prototype,"validMeasurement",null),e([r({readOnly:!0})],S.prototype,"numVertices",null),e([r({readOnly:!0})],S.prototype,"measurementData",null),e([r({readOnly:!0})],S.prototype,"area",null),e([r({readOnly:!0})],S.prototype,"geodesicArea",null),e([r({readOnly:!0})],S.prototype,"areaLabel",null),e([r({readOnly:!0})],S.prototype,"pathLength",null),e([r({readOnly:!0})],S.prototype,"geodesicPathLength",null),e([r({readOnly:!0})],S.prototype,"pathLengthLabel",null),e([r({readOnly:!0})],S.prototype,"perimeterLength",null),e([r({readOnly:!0})],S.prototype,"geodesicPerimeterLength",null),e([r({readOnly:!0})],S.prototype,"perimeterLengthLabel",null),e([r({readOnly:!0})],S.prototype,"cursorSegmentLength",null),e([r({readOnly:!0})],S.prototype,"geodesicCursorSegmentLength",null),e([r({readOnly:!0})],S.prototype,"cursorSegmentLengthLabel",null),e([r({readOnly:!0})],S.prototype,"viewData",null),e([r()],S.prototype,"geodesicMeasurementDistanceThreshold",void 0),e([r({readOnly:!0})],S.prototype,"measurementMode",null),S=e([s("esri.views.3d.interactive.measurementTools.areaMeasurement3D.AreaMeasurement3DModel")],S);var U=S;export default U;
