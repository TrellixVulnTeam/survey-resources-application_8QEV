/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import"../../../../../core/has.js";import{isSome as t,unwrap as i,isNone as s,unwrapOr as r,applySome as n}from"../../../../../core/maybe.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import{property as a}from"../../../../../core/accessorSupport/decorators/property.js";import{subclass as o}from"../../../../../core/accessorSupport/decorators/subclass.js";import"../../../../../core/urlUtils.js";import"../../../../../core/uuid.js";import"../../../../../portal/support/resourceExtension.js";import l from"../../../../../core/Accessor.js";import{screenPointObjectToArray as d}from"../../../../../core/screenUtils.js";import{c as h}from"../../../../../chunks/vec3f64.js";import c from"../../../../../core/Handles.js";import{getElevationAtPoint as u}from"../../../support/ElevationProvider.js";import{lineSegment as _}from"../../../support/geometryUtils.js";import{Intersector as p}from"../../../webgl-engine/lib/Intersector.js";import{LaserlineVisualElement as m}from"../../visualElements/LaserlineVisualElement.js";import{createSphereManipulator as g}from"../../manipulatorUtils.js";import{copyParameter as b,pointToPointScreenDistance as w}from"../support/viewUtils.js";var v;const L={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:.75,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5};let P=v=class extends l{constructor(e){super({model:e.model}),this._state="pending",this._visible=!1,this._laserLine=null,this._handles=new c,this._listenerHandles=null,this._cursorPosition=h(),this._startPosition=h(),this._endPosition=h(),this._lastDraggedHandle=null,this.dataObjectView=null,this._view=e.model.sceneView,this._params=e.params?b(L,e.params):b(L,{}),this._intersector=new p(this._view.state.mode),this._intersector.options.store=0}initialize(){const e=this.model.model,i=this._view.getAnalysisView(e);t(i)?this._initialize(i):this._view.whenAnalysisView(e).then((e=>this._initialize(e)))}_initialize(e){switch(this._state){case"pending":break;case"destroyed":return}this._set("dataObjectView",e),this._laserLine=new m({view:this._view,attached:!0}),this._initializeListeners(),this._state="ready"}destroy(){switch(this._state){case"pending":return void(this._state="destroyed");case"ready":break;case"destroyed":default:return}this.hide(),this._destroyListeners(),this._handles.destroy(),this._handles=null,this._laserLine.destroy(),this._laserLine=null,this._state="destroyed"}get requiresCursorPoint(){return"initial"===this.model.state&&this.model.active}get visible(){return this._visible}set visible(e){e?this.show():this.hide()}get viewMode(){const e=this.dataObjectView;if(!t(e))return f.None;switch(e.viewMode){default:case"none":return f.None;case"segment":return f.Direct;case"segment-and-triangle":return f.Triangle;case"segment-and-projection":return f.ProjectedGeodesic}}get testData(){const e=this._laserLine.testData;return{...t(this.dataObjectView)?this.dataObjectView.testData:{labels:{direct:null,horizontal:null,vertical:null},stripeLength:1},laserLineRenderer:{heightManifoldEnabled:!!t(e)&&e.heightManifoldEnabled,heightManifoldTarget:t(e)?e.heightManifoldTarget:null,pointDistanceEnabled:!!t(e)&&e.pointDistanceEnabled,pointDistanceOrigin:t(e)?e.pointDistanceOrigin:null,pointDistanceTarget:t(e)?e.pointDistanceTarget:null,lineVerticalPlaneEnabled:!!t(e)&&e.lineVerticalPlaneEnabled}}}get directLabelText(){return t(this.dataObjectView)?this.dataObjectView.segmentLabel.text:null}get horizontalLabelText(){return t(this.dataObjectView)?this.dataObjectView.horizontalLabel.text:null}get verticalLabelText(){return t(this.dataObjectView)?this.dataObjectView.verticalLabel.text:null}createManipulators(){const e=()=>{const e=g(this._view,this._params.handleColor,this._params.handleOpacity);return e.available=!1,e.radius=this._params.handleRadius,e},t=e(),s=e();this.model.startPoint&&(t.location=i(this.model.startPoint),t.available=!0),this.model.endPoint&&(s.location=i(this.model.endPoint),s.available=!0);const r=()=>{let e=this._lastDraggedHandle;t.grabbing&&!s.grabbing&&(e="start"),s.grabbing&&!t.grabbing&&(e="end"),t.grabbing||s.grabbing||(e=null);const i=e!==this._lastDraggedHandle;this._lastDraggedHandle=e,i&&this.visible&&this._updateLaserLine()};return this._handles.add([t.events.on("grab-changed",(()=>{r()})),s.events.on("grab-changed",(()=>{r()}))]),{start:t,end:s}}show(){switch(this._state){case"ready":this._visible||(this._visible=!0,this.model.model.visible=!0,this._laserLine.style={innerColor:this._params.laserLineInnerColor,innerWidth:this._params.laserLineInnerWidth,glowColor:this._params.laserLineGlowColor,glowWidth:this._params.laserLineGlowWidth,glowFalloff:this._params.laserLineGlowFalloff,globalAlpha:this._params.laserLineGlobalAlpha},this._laserLine.visible=!0,this._updateCursorPosition(),this._updateStartPosition(),this._updateEndPosition(),this._updateLaserLine());break;case"pending":this._visible=!0;break;case"destroyed":default:return}}hide(){switch(this._state){case"ready":this._visible&&(this._visible=!1,this.model.model.visible=!1,this._laserLine.visible=!1,this._view.cursor=null);break;case"pending":this._visible=!1;break;case"destroyed":default:return}}pick(e){const t=this._view.spatialReference,i=d(e.screenPoint);this._view.sceneIntersectionHelper.intersectToolIntersectorScreen(i,this._intersector);const r=this._intersector.results.min,n=h();if(!r.getIntersectionPoint(n))return new v.PickResult;const a=this._view.renderCoordsHelper.fromRenderCoords(n,t);if(s(a))return new v.PickResult;const o="TerrainRenderer"===r.intersector?"ground":"feature";return new v.PickResult(o,n,a)}getElevation(e){return this._view.basemapTerrain.ready?r(u(this._view.elevationProvider,e),0):0}overlappingHandles(e,t){return w(e,t,this._view)<=this._params.handleRadius}_updateCursorPosition(){this.model.cursorPoint&&this._view.renderCoordsHelper.toRenderCoords(this.model.cursorPoint,this._cursorPosition)}_updateStartPosition(){t(this.model.startPoint)&&this._view.renderCoordsHelper.toRenderCoords(this.model.startPoint,this._startPosition)}_updateEndPosition(){t(this.model.endPoint)&&this._view.renderCoordsHelper.toRenderCoords(this.model.endPoint,this._endPosition)}_getFocusPosition(){const e=this.model,i=this.viewMode===f.Direct&&t(this.dataObjectView)&&"euclidean"===this.dataObjectView.visualizedMeasurement;switch(e.state){case"drawing":return i?this._startPosition:e.endPoint?this._endPosition:this._startPosition;case"editing":return i?"start"===this._lastDraggedHandle?this._endPosition:this._startPosition:"start"===this._lastDraggedHandle?this._startPosition:this._endPosition;default:return e.cursorPoint?this._cursorPosition:null}}_getFocusSpherePosition(){return"drawing"===this.model.state||"end"===this._lastDraggedHandle?this._startPosition:this._endPosition}_updateLaserLine(){const e=this.model,i=this._getFocusPosition(),s=this.viewMode,r=this.dataObjectView,n=this._params.laserLineEnabled&&!!i&&"measured"!==e.state&&e.active;if(n&&t(r)){const t="euclidean"===r.actualVisualizedMeasurement;this._laserLine.heightManifoldTarget=t?i:null;const a=n&&!!e.startPoint&&"geodesic"===r.actualVisualizedMeasurement;this._laserLine.pointDistanceLine=a?{origin:this._getFocusSpherePosition(),target:i}:null;const o=n&&s===f.Triangle;this._laserLine.lineVerticalPlaneSegment=o?_.fromPoints(this._startPosition,this._endPosition,j):null}else this._laserLine.heightManifoldTarget=null,this._laserLine.pointDistanceLine=null,this._laserLine.lineVerticalPlaneSegment=null}_initializeListeners(){this._listenerHandles=new c,this._listenerHandles.add([this.model.watch("state",(e=>{n(this.dataObjectView,(t=>{t.allowVisualElementsOrientationChange="measured"!==e})),this._visible&&this._updateLaserLine()}),!0),this.model.watch("measurementMode",(()=>{this._visible&&this._updateLaserLine()}),!0),this.model.watch("cursorPoint",(()=>{this._updateCursorPosition(),this._visible&&this._updateLaserLine()}),!0),this.model.model.watch("startPoint",(()=>{this._updateStartPosition(),this._visible&&this._updateLaserLine()}),!0),this.model.model.watch("endPoint",(()=>{this._updateEndPosition(),this._visible&&this._updateLaserLine()}),!0),this.model.watch("active",(()=>{this._visible&&this._updateLaserLine()}),!0)])}_destroyListeners(){this._listenerHandles.destroy(),this._listenerHandles=null}};var f;e([a({readOnly:!0})],P.prototype,"dataObjectView",void 0),e([a({constructOnly:!0})],P.prototype,"model",void 0),e([a()],P.prototype,"directLabelText",null),e([a()],P.prototype,"horizontalLabelText",null),e([a()],P.prototype,"verticalLabelText",null),P=v=e([o("esri.views.3d.interactive.measurementTools.directLineMeasurement3D.DirectLineMeasurement3DView")],P),function(e){class t{}e.PickRequest=t;class i{constructor(e=null,t=null,i=null){this.type=e,this.scenePoint=t,this.mapPoint=i}}e.PickResult=i}(P||(P={})),function(e){e[e.Triangle=0]="Triangle",e[e.ProjectedGeodesic=1]="ProjectedGeodesic",e[e.Direct=2]="Direct",e[e.None=3]="None"}(f||(f={}));const j=_.create();var y=P;export default y;export{P as DirectLineMeasurement3DView,f as ViewMode};
