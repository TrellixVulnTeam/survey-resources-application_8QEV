/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import"../../../../../core/has.js";import{unwrap as t}from"../../../../../core/maybe.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import{property as i}from"../../../../../core/accessorSupport/decorators/property.js";import{aliasOf as s}from"../../../../../core/accessorSupport/decorators/aliasOf.js";import{subclass as r}from"../../../../../core/accessorSupport/decorators/subclass.js";import"../../../../../core/urlUtils.js";import"../../../../../core/uuid.js";import"../../../../../portal/support/resourceExtension.js";import o from"../../../../../geometry/Point.js";import"../../../../../geometry.js";import n from"../../../../../core/Handles.js";import{init as a}from"../../../../../core/watchUtils.js";import{createScreenPointFromEvent as d}from"../../../../support/screenUtils.js";import{clonePoint as c}from"../../../../../layers/graphics/hydratedFeatures.js";import{createManipulatorDragEventPipeline as l,resetProperties as h}from"../../../../interactive/dragEventPipeline.js";import{InteractiveToolBase as u}from"../../../../interactive/InteractiveToolBase.js";import{screenToMap3D as m,hideManipulatorWhileDragging as p}from"../../editingTools/dragEventPipeline3D.js";import P from"./DirectLineMeasurement3DModel.js";import{DirectLineMeasurement3DView as v}from"./DirectLineMeasurement3DView.js";let y=class extends u{constructor(e){super(e),this._handles=new n,this._cachedPickRequest=new v.PickRequest,this._cachedPickResult=new v.PickResult,this._isAnyPointerDown=!1,this.deferCreation=!0,this.startManipulator=null,this.endManipulator=null,this.model=new P({sceneView:e.view})}initialize(){const e=new v({model:this.model});this._set("directLineMeasurementView",e);const i=a(this,"state",(e=>{"ready"!==e&&this.create(),"measured"===e&&this.complete()}),!0);this._handles.add(i);const{start:s,end:r}=this.directLineMeasurementView.createManipulators(),o=(e,i,s)=>l(e,((e,r,o)=>{const n=p(e);r.next(n).next(m(this.view)).next((e=>"start"!==e.action?e:null)).next((t=>{const r=c(t.mapEnd,M);this.model[i]=r,e.location=r,this.model[s]=this._surfaceLocation(r,t.surfaceType)})),o.next(n).next(h(this.model,[i,s])).next((()=>{e.location=t(this.model[i])}))}));this._handles.add([o(s,"startPoint","startPointSurfaceLocation"),o(r,"endPoint","endPointSurfaceLocation")]),[s,r].forEach((e=>{this._handles.add([e.events.on("grab-changed",(()=>{const e=s.grabbing||r.grabbing;e&&"measured"===this.model.state&&(this.model.state="editing"),e||(this.model.finishMeasurement(),"editing"===this.model.state&&(this.model.state="measured"))}))])})),this.manipulators.add(s),this.manipulators.add(r),this.startManipulator=s,this.endManipulator=r}destroy(){this.directLineMeasurementView.destroy(),this._set("directLineMeasurementView",null),this.model.destroy(),this._set("model",null),this._handles.destroy(),this._handles=null}get state(){var e;return null!=(e=this.model)&&e.isMeasuring?"measured"===this.model.state?"measured":"measuring":"ready"}get creating(){return"initial"===this.model.state||"drawing"===this.model.state}get isSupported(){return"3d"===this.get("view.type")}get cursor(){var e;return null==(e=this.model)||!e.active||"drawing"!==this.model.state&&"initial"!==this.model.state?null:"crosshair"}activate(){this.model.active=!0}deactivate(){this.model.active=!1}onDetach(){this.model.reset()}onShow(){this.directLineMeasurementView.show(),this._updateManipulatorVisibility()}onHide(){this.directLineMeasurementView.hide()}onInputEvent(e){switch(e.type){case"immediate-click":this._handleImmediateClick(e);break;case"pointer-move":this._handlePointerMove(e);break;case"pointer-down":this._handlePointerDown();break;case"pointer-up":this._handlePointerUp()}this._updateManipulatorVisibility()}_handlePointerMove(e){this._clearCachedPickRequest();const t=d(e);"mouse"===e.pointerType&&(this._hoverAt(t),"drawing"===this.model.state&&(this.endManipulator.events.emit("drag",{action:"update",start:t,screenPoint:t}),e.stopPropagation()))}_handlePointerDown(){this._isAnyPointerDown=!0}_handlePointerUp(){this._isAnyPointerDown=!1}_handleImmediateClick(e){if(this._clearCachedPickRequest(),!_(e))return;const t=d(e),i=e.pointerType;let s=!1;if(this.model.active)switch(this.model.state){case"initial":this.startManipulator.events.emit("drag",{action:"start",pointerType:i,start:t,screenPoint:t}),this.startManipulator.events.emit("drag",{action:"end",start:t,screenPoint:t}),this.model.startPoint&&(this.startManipulator.interactive=!1,this.endManipulator.interactive=!1,this.model.state="drawing",this.endManipulator.events.emit("drag",{action:"start",pointerType:i,start:t,screenPoint:t}),s=!0);break;case"drawing":this.endManipulator.events.emit("drag",{action:"update",start:t,screenPoint:t}),null!=this.model.endPoint&&(this.endManipulator.events.emit("drag",{action:"end",start:t,screenPoint:t}),this.startManipulator.interactive=!0,this.endManipulator.interactive=!0,this.model.finishMeasurement(),s=!0)}s&&e.stopPropagation(),"mouse"===e.pointerType&&this._hoverAt(t)}_hoverAt(e){const t=this._isAnyPointerDown&&"drawing"!==this.model.state&&"editing"!==this.model.state;if(this.directLineMeasurementView.requiresCursorPoint&&!t){const t=this._pick(e);t.mapPoint&&(this.model.cursorPoint=t.mapPoint)}else this.model.cursorPoint=null}_pick(e){const t=this._cachedPickRequest.screenPoint;return t&&t.x===e.x&&t.y===e.y||(this._cachedPickRequest.screenPoint=e,this._cachedPickResult=this.directLineMeasurementView.pick(this._cachedPickRequest)),this._cachedPickResult}_clearCachedPickRequest(){this._cachedPickRequest.screenPoint=null}_surfaceLocation(e,t){return 0===t?"on-the-surface":e.z>=this.directLineMeasurementView.getElevation(e)?"above-the-surface":"below-the-surface"}_updateManipulatorVisibility(){this.startManipulator.available=null!=this.model.startPoint,this.endManipulator.available=null!=this.model.endPoint}};function _(e){return"mouse"!==e.pointerType||0===e.button}e([i({readOnly:!0})],y.prototype,"state",null),e([i({readOnly:!0})],y.prototype,"creating",null),e([i({readOnly:!0})],y.prototype,"isSupported",null),e([i({readOnly:!0})],y.prototype,"cursor",null),e([i({constructOnly:!0})],y.prototype,"model",void 0),e([i({constructOnly:!0})],y.prototype,"directLineMeasurementView",void 0),e([s("model.mode")],y.prototype,"mode",void 0),e([s("model.unit")],y.prototype,"unit",void 0),e([s("model.validMeasurement")],y.prototype,"validMeasurement",void 0),y=e([r("esri.views.3d.interactive.measurementTools.directLineMeasurement3D.DirectLineMeasurement3DTool")],y);const M=new o;var g=y;export default g;
