/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../chunks/tslib.es6.js";import"../../../../../core/has.js";import{isNone as t,isSome as i}from"../../../../../core/maybe.js";import"../../../../../core/Logger.js";import"../../../../../core/accessorSupport/ensureType.js";import{property as s}from"../../../../../core/accessorSupport/decorators/property.js";import{subclass as a}from"../../../../../core/accessorSupport/decorators/subclass.js";import"../../../../../core/urlUtils.js";import"../../../../../core/uuid.js";import"../../../../../portal/support/resourceExtension.js";import n from"../../../../../core/Accessor.js";import{onLocaleChange as r}from"../../../../../intl/locale.js";import{sign as o,nextHighestPowerOfTen as l,deg2rad as h}from"../../../../../core/mathUtils.js";import{createRenderScreenPointArray3 as c,createRenderScreenPointArray as d}from"../../../../../core/screenUtils.js";import{fetchMessageBundle as u}from"../../../../../intl/messages.js";import"../../../../../intl.js";import{c as m}from"../../../../../chunks/vec3f64.js";import{g,a as _,b as p}from"../../../../../chunks/vec3.js";import v from"../../../../../core/Handles.js";import{whenOnce as b}from"../../../../../core/watchUtils.js";import{getReferenceEllipsoid as L}from"../../../../../geometry/projectionEllipsoid.js";import{preferredImperialLengthUnit as w,convertUnit as y}from"../../../../../core/unitUtils.js";import{formatDecimal as j,formatDMS as z,formatImperialLength as f,formatImperialVerticalLength as O,formatMetricLength as E,formatMetricVerticalLength as D}from"../../../../../core/quantityFormatUtils.js";import{g as S}from"../../../../../chunks/vec2.js";import{f as P}from"../../../../../chunks/vec4f32.js";import{createStipplePatternSimple as M}from"../../../webgl-engine/materials/lineStippleUtils.js";import{RightAngleQuadVisualElement as V}from"../../visualElements/RightAngleQuadVisualElement.js";import{screenSpaceTangent as A}from"../../measurementTools/support/viewUtils.js";import{LabelVisualElement as C,mirrorPosition as k}from"../../visualElements/LabelVisualElement.js";import{LineVisualElement as H}from"../../visualElements/LineVisualElement.js";import{GeodesicSegment as G,EuclideanSegment as R}from"../../visualElements/support/Segment.js";import{MeasurementArrowVisualElement as T}from"../../visualElements/MeasurementArrowVisualElement.js";let U=class extends n{constructor(e){super(e),this._params={...B},this._handles=new v,this._segmentVisualElement=null,this._triangleVisualElement=null,this._rightAngleQuad=null,this._projectedGeodesicLine=null,this._geodesicStartHint=null,this._geodesicEndHint=null,this._segmentLabel=null,this._verticalLabel=null,this._horizontalLabel=null,this._segmentLabelDisplayedMeasurement="euclidean",this._startPosition=m(),this._endPosition=m(),this._cornerPosition=m(),this._startPositionAtSeaLevel=m(),this._endPositionAtSeaLevel=m(),this._viewMode="none",this._geometryDirty=!0,this.state="pending",this.messages=null,this._visualizedMeasurement="auto",this._actualVisualizedMeasurement="euclidean",this._visualElementOrientation="auto",this._triangleOrientationOverride=null,this._triangleCollapseRatioThreshold=.03,this._geodesicDistanceThreshold=1e5}initialize(){this._handles.add(b(this.view,"ready",(()=>this._initialize()),!0))}_initialize(){switch(this.state){case"ready":throw new Error("invalid state");case"destroyed":return}this._segmentVisualElement=new T({attached:!0,view:this.view,geometry:null,renderOccluded:4}),this._triangleVisualElement=new H({attached:!0,view:this.view,width:this._params.triangleLineWidth,color:this._params.triangleColor,renderOccluded:4}),this._rightAngleQuad=new V({attached:!0,view:this.view,color:I,renderOccluded:4}),this._projectedGeodesicLine=new H({attached:!0,view:this.view,width:this._params.geodesicProjectionLineWidth,color:this._params.geodesicProjectionLineColor,polygonOffset:!0,stipplePattern:M(this._params.guideStippleLengthPixels),stippleIntegerRepeats:!1,renderOccluded:4}),this._geodesicStartHint=new H({attached:!0,view:this.view,width:this._params.guideLineWidth,color:this._params.geodesicProjectionLineColor,polygonOffset:!0,stipplePattern:M(this._params.guideStippleLengthPixels),stippleIntegerRepeats:!1,renderOccluded:4}),this._geodesicEndHint=new H({attached:!0,view:this.view,width:this._params.guideLineWidth,color:this._params.geodesicProjectionLineColor,polygonOffset:!0,stipplePattern:M(this._params.guideStippleLengthPixels),stippleIntegerRepeats:!1,renderOccluded:4}),this._segmentLabel=new C({attached:!0,view:this.view,fontSize:this._params.direcLabelFontSize}),this._verticalLabel=new C({attached:!0,view:this.view,fontSize:this._params.verticalLabelFontSize}),this._horizontalLabel=new C({attached:!0,view:this.view,fontSize:this._params.horizontalLabelFontSize}),this._handles.add([this.dataObject.watch("visible",(()=>this._update(!1)),!0),this.dataObject.watch("startPoint",(()=>this._update()),!0),this.dataObject.watch("endPoint",(()=>this._update()),!0),this.dataObject.watch("measurement",(()=>this._update()),!0),this.dataObject.watch("settings.unit",(()=>{this._updateLabels(),this._updateSegmentStripeLength()}),!0),this.view.state.watch("camera",(()=>this._update()),!0),r((async()=>this._updateMessageBundle()))]),this._set("state","ready"),this._updateMessageBundle(),this._update()}async whenReady(){return b(this,"ready").then((()=>{}))}get ready(){return"ready"===this.state}get viewMode(){return this._viewMode}get visualizedMeasurement(){return this._visualizedMeasurement}set visualizedMeasurement(e){e!==this._visualizedMeasurement&&(this._visualizedMeasurement=e,this._update())}get actualVisualizedMeasurement(){return this._actualVisualizedMeasurement}get visualElementsOrientation(){return this._visualElementOrientation}set visualElementsOrientation(e){e!==this._visualElementOrientation&&(this._visualElementOrientation=e,this._update())}get allowVisualElementsOrientationChange(){return t(this._triangleOrientationOverride)}set allowVisualElementsOrientationChange(e){t(this._triangleOrientationOverride)!==e&&(t(this._triangleOrientationOverride)?this._triangleOrientationOverride=this._getActualVisualElementsOrientation():(this._triangleOrientationOverride=null,this._update()))}get triangleCollapseRatioThreshold(){return this._triangleCollapseRatioThreshold}set triangleCollapseRatioThreshold(e){this._triangleCollapseRatioThreshold=e,this._update()}get geodesicDistanceThreshold(){return this._geodesicDistanceThreshold}set geodesicDistanceThreshold(e){this._geodesicDistanceThreshold=e,this._update()}get segmentLabel(){return this._segmentLabel}get horizontalLabel(){return this._horizontalLabel}get verticalLabel(){return this._verticalLabel}get testData(){let e=null;const t="geodesic"===this.actualVisualizedMeasurement;return e={direct:t?this.horizontalLabel:this.segmentLabel,horizontal:t?this.segmentLabel:this.horizontalLabel,vertical:this.verticalLabel},{labels:e,stripeLength:this._segmentVisualElement.stripeLength}}_update(e=!0){switch(this.state){case"destroyed":case"pending":return}const t=this.dataObject.visible;switch(this._geometryDirty=e,this._geometryDirty&&t&&(this._updateGeometryAndViewMode(),this._geometryDirty=!1),this._viewMode){case"none":this._segmentVisualElement.visible=!1,this._triangleVisualElement.visible=!1,this._rightAngleQuad.visible=!1,this._projectedGeodesicLine.visible=!1,this._geodesicStartHint.visible=!1,this._geodesicEndHint.visible=!1;break;case"segment":this._segmentVisualElement.visible=t,this._triangleVisualElement.visible=!1,this._rightAngleQuad.visible=!1,this._projectedGeodesicLine.visible=!1,this._geodesicStartHint.visible=!1,this._geodesicEndHint.visible=!1;break;case"segment-and-triangle":this._segmentVisualElement.visible=t,this._triangleVisualElement.visible=t,this._rightAngleQuad.visible=t,this._projectedGeodesicLine.visible=!1,this._geodesicStartHint.visible=!1,this._geodesicEndHint.visible=!1;break;case"segment-and-projection":this._segmentVisualElement.visible=t,this._projectedGeodesicLine.visible=!0,this._geodesicStartHint.visible=!0,this._geodesicEndHint.visible=!0}this._updateLabels()}destroy(){switch(this.state){case"destroyed":case"pending":return}this._handles.destroy(),this._segmentVisualElement.destroy(),this._segmentVisualElement=null,this._triangleVisualElement.destroy(),this._triangleVisualElement=null,this._rightAngleQuad.destroy(),this._rightAngleQuad=null,this._projectedGeodesicLine.destroy(),this._projectedGeodesicLine=null,this._geodesicStartHint.destroy(),this._geodesicStartHint=null,this._geodesicEndHint.destroy(),this._geodesicEndHint=null,this._segmentLabel.destroy(),this._segmentLabel=null,this._verticalLabel.destroy(),this._verticalLabel=null,this._horizontalLabel.destroy(),this._horizontalLabel=null,this.set("view",null),this._set("state","destroyed")}_updateGeometryAndViewMode(){const e=this.view,i=e.renderCoordsHelper;if(t(this.dataObject.startPoint)||t(this.dataObject.endPoint)||this.dataObject.startPoint.equals(this.dataObject.endPoint))return this._viewMode="none",void(this._actualVisualizedMeasurement="auto"===this._visualizedMeasurement?"euclidean":this._visualizedMeasurement);i.toRenderCoords(this.dataObject.startPoint,this._startPosition),i.toRenderCoords(this.dataObject.endPoint,this._endPosition);const s=this._getActualVisualElementsOrientation(),a=this._updateActualVisualizedMeasurement();this._viewMode=this._computeViewMode(a);let n=this._startPosition,r=this._endPosition;const o="above-segment"===s?1:-1,l=o*(i.getAltitude(r)-i.getAltitude(n));l<0&&(n=this._endPosition,r=this._startPosition);const h="geodesic"===a?new G(this._startPosition,this._endPosition,i.spatialReference):new R(this._startPosition,this._endPosition);switch(this._segmentVisualElement.geometry=h,this._updateSegmentStripeLength(),this._segmentLabelDisplayedMeasurement=a,this._viewMode){case"segment":this._segmentLabel.anchor="above-segment"===s?"top":"bottom",this._segmentLabel.geometry={type:"segment",segment:h,sampleLocation:"center"};break;case"segment-and-triangle":{const t=this._cornerPosition;i.worldUpAtPosition(n,t),_(t,t,o*Math.abs(l)),p(t,t,n),this._triangleVisualElement.geometry=[[[n[0],n[1],n[2]],[t[0],t[1],t[2]],[r[0],r[1],r[2]]]],this._rightAngleQuad.geometry={previous:n,center:t,next:r};const a=new R(n,t),c=new R(t,r),d=W(n,r,t,s,e.state.camera);this._segmentLabel.geometry={type:"segment",segment:h,sampleLocation:"center"},this._segmentLabel.anchor=d.segment,this._verticalLabel.geometry={type:"segment",segment:a,sampleLocation:"center"},this._verticalLabel.anchor=d.vertical,this._horizontalLabel.geometry={type:"segment",segment:c,sampleLocation:"center"},this._horizontalLabel.anchor=d.horizontal;break}case"segment-and-projection":{g(this._startPositionAtSeaLevel,this._startPosition),g(this._endPositionAtSeaLevel,this._endPosition),i.setAltitude(0,this._startPositionAtSeaLevel),i.setAltitude(0,this._endPositionAtSeaLevel);const e=new G(this._startPositionAtSeaLevel,this._endPositionAtSeaLevel,i.spatialReference);this._projectedGeodesicLine.setGeometryFromSegment(e),this._geodesicStartHint.setGeometryFromSegment(new R(this._startPositionAtSeaLevel,this._startPosition)),this._geodesicEndHint.setGeometryFromSegment(new R(this._endPositionAtSeaLevel,this._endPosition)),this._segmentLabel.geometry={type:"segment",segment:e,sampleLocation:"center"},this._segmentLabel.anchor="above-segment"===s?"top":"bottom";break}}}_updateLabels(){switch(this.state){case"pending":case"destroyed":return}const e=this.messages,i=this.dataObject.measurement;if(t(i)||!e)return this._segmentLabel.visible=!1,this._horizontalLabel.visible=!1,void(this._verticalLabel.visible=!1);const s={verticalDistance:"",horizontalDistance:"",euclideanDistance:"",geodesicDistance:""},a=i.directDistance,n=i.horizontalDistance,r=i.verticalDistance,o=i.geodesicDistance,l=i.geodesicAngle;switch(this.dataObject.settings.unit){case"metric":s.euclideanDistance=a&&E(e,a),s.horizontalDistance=n&&E(e,n),s.verticalDistance=r&&D(e,r),s.geodesicDistance=o&&E(e,o);break;case"imperial":s.euclideanDistance=a&&f(e,a),s.horizontalDistance=n&&f(e,n),s.verticalDistance=r&&O(e,r),s.geodesicDistance=o&&f(e,o);break;case"degrees":{const t=l&&j(e,l,"degrees");s.euclideanDistance=t,s.horizontalDistance=t,s.geodesicDistance=t;break}case"degrees-minutes-seconds":s.horizontalDistance=l&&z(l);break;default:{const t=this.dataObject.settings.unit;s.euclideanDistance=a&&j(e,a,t),s.horizontalDistance=n&&j(e,n,t),s.verticalDistance=r&&j(e,r,t),s.geodesicDistance=o&&j(e,o,t);break}}this._segmentLabel.text="euclidean"===this._segmentLabelDisplayedMeasurement?s.euclideanDistance:s.geodesicDistance,this._horizontalLabel.text=s.horizontalDistance,this._verticalLabel.text=s.verticalDistance;const h=this.dataObject.visible;switch(this._viewMode){case"none":this._segmentLabel.visible=!1,this._horizontalLabel.visible=!1,this._verticalLabel.visible=!1;break;case"segment":this._segmentLabel.visible=h,this._horizontalLabel.visible=!1,this._verticalLabel.visible=!1;break;case"segment-and-triangle":this._segmentLabel.visible=h,this._horizontalLabel.visible=h,this._verticalLabel.visible=h;break;case"segment-and-projection":this._segmentLabel.visible=h,this._horizontalLabel.visible=!1,this._verticalLabel.visible=!1}this.notifyChange("segmentLabel"),this.notifyChange("horizontalLabel"),this.notifyChange("verticalLabel")}_updateSegmentStripeLength(){const e=Q(this.view,this.dataObject);i(e)?(this._segmentVisualElement.stripeLength=e,this._segmentVisualElement.stripesEnabled=!0):this._segmentVisualElement.stripesEnabled=!1}_computeViewMode(e){const i=this.dataObject,s=i.measurement;if("geodesic"===e){if(!x(i,this.geodesicDistanceThreshold))return"segment";if(F(this.view,this._startPosition)||F(this.view,this._endPosition))return"segment-and-projection"}if(t(s))return"segment";return Math.min(s.verticalDistance.value/s.horizontalDistance.value,s.horizontalDistance.value/s.verticalDistance.value)<this.triangleCollapseRatioThreshold?"segment":"segment-and-triangle"}_getActualVisualElementsOrientation(){return i(this._triangleOrientationOverride)?this._triangleOrientationOverride:"auto"===this.visualElementsOrientation?this.view.state.camera.aboveGround?"above-segment":"below-segment":this.visualElementsOrientation}_updateActualVisualizedMeasurement(){if("auto"===this._visualizedMeasurement){this._actualVisualizedMeasurement="euclidean";const e=this.dataObject.settings.unit;"degrees"!==e&&"degrees-minutes-seconds"!==e||(this._actualVisualizedMeasurement="geodesic"),x(this.dataObject,this.geodesicDistanceThreshold)&&(this._actualVisualizedMeasurement="geodesic")}else this._actualVisualizedMeasurement=this._visualizedMeasurement;return this._actualVisualizedMeasurement}_updateMessageBundle(){u("esri/core/t9n/Units").then((e=>{this.messages=e,this.view&&this._updateLabels()}))}};function x(e,t){return i(e.measurement)&&e.measurement.horizontalDistance&&e.measurement.horizontalDistance.value>t}function F(e,t){if(!e.state)return!1;const i=e.state.camera,s=e.renderCoordsHelper,a=i.computeScreenPixelSizeAt(t);return s.getAltitude(t)/a>=10}function W(e,t,i,s,a){const n=J,r=K;a.projectToRenderScreen(i,n),a.projectToRenderScreen(t,r);const l={segment:"bottom",horizontal:"top",vertical:n[0]<r[0]?"left":"right"};{const s=N,n=X;if(A(e,i,s,a),A(e,t,n,a),S(s,n)>=q)l.segment=o(s[1])===o(n[1])?k(l.vertical):l.vertical;else{const e=Y;A(i,t,e,a),S(e,n)>=q&&(l.segment=o(e[0])===o(n[0])?k(l.horizontal):l.horizontal)}}if("below-segment"===s){const e=e=>"top"===e?"bottom":"top";l.segment=e(l.segment),l.horizontal=e(l.horizontal),l.vertical=e(l.vertical)}return l}function Q(e,t){let s=null;if(i(t.measurement)){const e=t.measurement.directDistance;switch(t.settings.unit){case"metric":s=e&&e.toUnit("meters");break;case"imperial":s=e&&e.toUnit(w(e.value,e.unit));break;case"degrees":case"degrees-minutes-seconds":{const e=t.measurement.geodesicAngle;s=e&&e.toUnit("degrees");break}default:s=e&&e.toUnit(t.settings.unit)}}if(s){let t=1;return t=l(s.value/30),t*="degrees"===s.unit?L(e.spatialReference).metersPerDegree:y(1,s.unit,"meters"),t}return null}e([s({readOnly:!0})],U.prototype,"state",void 0),e([s()],U.prototype,"ready",null),e([s()],U.prototype,"messages",void 0),e([s()],U.prototype,"view",void 0),e([s()],U.prototype,"dataObject",void 0),e([s()],U.prototype,"viewMode",null),e([s()],U.prototype,"segmentLabel",null),e([s()],U.prototype,"horizontalLabel",null),e([s()],U.prototype,"verticalLabel",null),U=e([a("esri.views.3d.interactive.graphics.DirectLineMeasurement3D.DirectLineMeasurement3DView")],U);const I=P(1,.5,0,.75),B={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:.75,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,triangleColor:I,triangleLineWidth:3,triangleCornerSize:32,triangleSubdivisions:128,arrowWidth:16,arrowOutlineColor:[1,.5,0,1],arrowOutlineWidth:.2,arrowStripeEvenColor:[1,1,1,1],arrowStripeOddColor:[1,.5,0,1],arrowStripeLength:16,arrowSubdivisions:128,geodesicProjectionLineWidth:2,geodesicProjectionLineColor:I,guideLineWidth:2,guideLineColor:I,guideStippleLengthPixels:6,labelDistance:25,direcLabelFontSize:16,horizontalLabelFontSize:12,verticalLabelFontSize:12},q=Math.cos(h(12)),J=c(),K=c(),N=d(),X=d(),Y=d();export{U as DirectLineMeasurement3DView};
