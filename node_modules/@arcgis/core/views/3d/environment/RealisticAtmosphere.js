/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{earth as e}from"../../../geometry/support/Ellipsoid.js";import{c as t,f as a,b as r}from"../../../chunks/vec3f64.js";import{s as i,l as s,g as n,a as o,b as h}from"../../../chunks/vec3.js";import d from"../../../core/Handles.js";import{on as m}from"../../../core/watchUtils.js";import{a as c}from"../../../chunks/mat4.js";import{a as l}from"../../../chunks/mat4f64.js";import{a as u}from"../../../chunks/vec2f64.js";import{a as p,b as _}from"../../../chunks/vec4f64.js";import{s as v}from"../../../chunks/vec2.js";import{s as f}from"../../../chunks/vec4.js";import{Default3D as D}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{glLayout as g}from"../support/buffer/glUtil.js";import{newLayout as b}from"../support/buffer/InterleavedLayout.js";import w from"../../webgl/BufferObject.js";import T from"../../webgl/VertexArrayObject.js";import{computeInnerAltitudeFade as j,INNER_ATMOSPHERE_DEPTH as x}from"./atmosphereUtils.js";import{RealisticAtmosphereTechniqueConfiguration as P,RealisticAtmosphereTechnique as R}from"./RealisticAtmosphereTechnique.js";class B{constructor(a){this._view=a,this.canRender=!0,this._skyslot=14,this._hazeSlot=15,this._renderData={texDepth:u(),cameraPosition:t(),projectionInverse:l(),viewInverse:l(),heightParameters:p(),atmosphereParameters1:p(),atmosphereParameters2:p(),atmosphereParameters3:t(),invWavelength:E,invWavelengthScaled:H,radii:u(),scale:0,scaleDepth:V,lowerAlphaBlendBound:0,scaleOverScaleDepth:0,oneOverScaleDepth:0,scaleDepthBlue:y,oneOverScaleDepthBlue:F,scaleOverScaleDepthBlue:0,g:k,g2:k*k,miePhaseCoefficients:z,nearFar:u(),cameraHeight:0,cameraHeightSq:0,C:0,CSur:0,innerFadeDistance:0,altitudeFade:0},this._lowerElevationBoundRadius=0,this._lowerBoundEarthRadius=e.radius,this._updateRadius(e.radius),this._atmosphereTechniqueConfig=new P}destroy(){this._handles&&(this._handles.destroy(),this._handles=null),this._vao&&(this._vao.dispose(),this._vao=null)}when(){return Promise.resolve()}initializeRenderContext(e){const t=e.renderContext.rctx;this._handles=new d,this._updateElevation({spatialReference:this._view.basemapTerrain.spatialReference,tile:this._view.basemapTerrain.rootTiles[0],extent:this._view.basemapTerrain.rootTiles[0].extent,context:"ground"}),this._handles.add(m(this._view,"basemapTerrain","elevation-change",(e=>this._updateElevation(e)),(()=>this._updateElevation()))),this._handles.add(m(this._view,"basemapTerrain","elevation-bounds-change",(()=>this._updateVisibleElevationBounds()),(()=>this._updateVisibleElevationBounds()))),this._atmosphereTechniqueConfig.haze=!1,this._atmosphereTechnique=e.shaderTechniqueRep.acquireAndReleaseExisting(R,this._atmosphereTechniqueConfig,this._atmosphereTechnique),this._atmosphereTechniqueConfig.haze=!0,this._atmosphereHazeTechnique=e.shaderTechniqueRep.acquireAndReleaseExisting(R,this._atmosphereTechniqueConfig,this._atmosphereHazeTechnique),this._vao=this._createVertexArrayObject(t)}uninitializeRenderContext(){this.destroy()}render(e){return(e.slot===this._hazeSlot||e.slot===this._skyslot)&&0===e.pass&&(this._update(e.camera),e.slot===this._skyslot&&this._renderSky(e),e.slot===this._hazeSlot&&this._renderHaze(e),!0)}_renderSky(e){const t=e.rctx,a=this._atmosphereTechnique.program;t.bindProgram(a),this._atmosphereTechnique.bindPipelineState(t),a.setUniform3fv("atmosphereParameters3",this._renderData.atmosphereParameters3),this._renderCommon(a,e)}_renderHaze(e){const t=e.rctx,a=e.offscreenRenderingHelper,r=this._atmosphereHazeTechnique.program;t.bindProgram(r),this._atmosphereHazeTechnique.bindPipelineState(t),a.renderDepthDetached((()=>{const i=a.depthTexture;t.bindTexture(i,0),r.setUniform1i("depthTex",0),this._renderCommon(r,e)}))}_renderCommon(e,t){const a=t.rctx;e.setUniform3fv("invWavelength",this._renderData.invWavelength),e.setUniform3fv("invWavelengthScaled",this._renderData.invWavelengthScaled),t.scenelightingData.setLightDirectionUniform(e),e.setUniform4fv("heightParameters",this._renderData.heightParameters),e.setUniform3fv("cameraPosition",this._renderData.cameraPosition),e.setUniformMatrix4fv("projectionInverse",this._renderData.projectionInverse),e.setUniformMatrix4fv("viewInverse",this._renderData.viewInverse),e.setUniform2fv("nearFar",this._renderData.nearFar),e.setUniform2fv("radii",this._renderData.radii),e.setUniform4fv("atmosphereParameters1",this._renderData.atmosphereParameters1),e.setUniform4fv("atmosphereParameters2",this._renderData.atmosphereParameters2),e.setUniform1f("innerFadeDistance",this._renderData.innerFadeDistance),e.setUniform1f("altitudeFade",this._renderData.altitudeFade),a.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),a.drawArrays(5,0,4)}_createVertexArrayObject(e){const t=A.createBuffer(4);return t.position.setVec(0,[-1,-1]),t.position.setVec(1,[1,-1]),t.position.setVec(2,[-1,1]),t.position.setVec(3,[1,1]),t.uv0.setVec(0,[0,0]),t.uv0.setVec(1,[1,0]),t.uv0.setVec(2,[0,1]),t.uv0.setVec(3,[1,1]),new T(e,D,{geometry:g(A)},{geometry:w.createVertex(e,35044,t.buffer)})}_adjustRadiusForTesselation(e){const t=16,a=4,r=Math.PI/2**a/t;return e*Math.cos(r)}_updateElevation(t){const a=t?t.tile:this._view.basemapTerrain.rootTiles[0];if(0!==a.lij[0])return;const r=this._adjustRadiusForTesselation(e.radius+a.elevationBounds[0]);r!==this._lowerElevationBoundRadius&&(this._lowerElevationBoundRadius=r,this._lowerBoundEarthRadius=-1,this._updateVisibleElevationBounds())}_updateVisibleElevationBounds(){const t=this._adjustRadiusForTesselation(e.radius+this._view.basemapTerrain.elevationBounds.min);(this._lowerBoundEarthRadius<0||t<this._lowerBoundEarthRadius)&&this._updateRadius(t)}_updateRadius(e){this._lowerBoundEarthRadius=e;const t=e,a=t/10*10.25,r=1/(a-t),s=r/V,n=r/y,o=.3*(a-t)+t,h=this._renderData;f(h.atmosphereParameters1,r,V,s,U),f(h.atmosphereParameters2,k,y,n,F),i(h.atmosphereParameters3,k*k,z,o),v(h.radii,t,a),h.scale=r,h.lowerAlphaBlendBound=o,h.scaleOverScaleDepth=s,h.scaleOverScaleDepthBlue=n;const d=x;h.innerFadeDistance=2*Math.sqrt((2*t-d)*d)}_update(e){e&&(this._renderData.cameraHeight=s(e.eye),this._renderData.cameraHeightSq=this._renderData.cameraHeight*this._renderData.cameraHeight,this._renderData.C=this._renderData.cameraHeightSq-this._renderData.radii[1]*this._renderData.radii[1],this._renderData.CSur=this._renderData.cameraHeightSq-this._renderData.radii[0]*this._renderData.radii[0],this._renderData.heightParameters=_(this._renderData.cameraHeight,this._renderData.cameraHeightSq,this._renderData.C,this._renderData.CSur),n(this._renderData.cameraPosition,e.eye),c(this._renderData.projectionInverse,e.projectionMatrix),c(this._renderData.viewInverse,e.viewMatrix),v(this._renderData.nearFar,e.near,e.far),this._renderData.altitudeFade=j(this._renderData.cameraHeight-this._lowerBoundEarthRadius))}static isSupported(e){return e.renderContext.rctx.capabilities.depthTexture}}const S=.001,q=4*.005*Math.PI,C=4*S*Math.PI,E=a(1/.65**4,1/.57**4,1/.475**4),H=r(E);o(H,H,q),h(H,H,a(C,C,C));const V=.25,y=.05,U=1/V,F=1/y,k=-.99999,z=(1-k*k)/(2+k*k)*1.5,A=b().vec2f("position").vec2f("uv0");export{B as RealisticAtmosphere};
