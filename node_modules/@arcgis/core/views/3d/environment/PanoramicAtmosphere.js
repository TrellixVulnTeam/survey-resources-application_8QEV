/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{disposeMaybe as e,abortMaybe as t}from"../../../core/maybe.js";import r from"../../../core/Logger.js";import{createResolver as i,createAbortController as o,isAbortError as s}from"../../../core/promiseUtils.js";import{c as n}from"../../../chunks/mat4.js";import{a}from"../../../chunks/mat4f64.js";import{requestImage as m}from"../../../support/requestImageUtils.js";import{Default3D as h}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{SimpleAtmosphereTechniqueConfiguration as l,SimpleAtmosphereTechnique as c}from"./SimpleAtmosphereTechnique.js";import p from"./resources/SimpleAtmosphereTexture.js";import{glLayout as u}from"../support/buffer/glUtil.js";import{newLayout as f}from"../support/buffer/InterleavedLayout.js";import{View as g}from"../webgl-engine/core/shaderLibrary/util/View.glsl.js";import d from"../webgl-engine/lib/GeometryUtil.js";import _ from"../../webgl/BufferObject.js";import b from"../../webgl/Texture.js";import{vertexCount as x}from"../../webgl/Util.js";import y from"../../webgl/VertexArrayObject.js";const j=r.getLogger("esri.views.3d.environment.PanoramicAtmosphere");class v{constructor(e){this.slot=14,this._readyResolver=i(),this._readyController=o(),this.view=e,this._atmosphereTechniqueConfig=new l}get canRender(){return null!=this._texture}destroy(){this._readyResolver.reject(),this._texture=e(this._texture),this._vao=e(this._vao),this._readyController=t(this._readyController)}when(){return this._readyResolver.promise}initializeRenderContext(e){const t=e.renderContext.rctx;this._atmosphereTechniqueConfig.geometry=1,this._atmosphereTechnique=e.shaderTechniqueRep.acquireAndReleaseExisting(c,this._atmosphereTechniqueConfig,this._atmosphereTechnique),this._vao=this._createVertexArrayObject(t),this._vaoCount=x(this._vao,"geometry"),m(p,{signal:this._readyController.signal}).then((r=>{this._texture=new b(t,{pixelFormat:6408,dataType:5121,wrapMode:33071,samplingMode:9729,flipped:!0},r),e.requestRender(),this._readyController=null,this._readyResolver.resolve()})).catch((e=>{s(e)||j.error("Unable to initialize atmosphere: image request failed",e),this._readyResolver.reject()}))}uninitializeRenderContext(){this.destroy()}render(e){if(e.slot!==this.slot||0!==e.pass)return!1;const t=e.rctx,r=this._atmosphereTechnique.program;return t.bindProgram(r),this._atmosphereTechnique.bindPipelineState(t),t.bindTexture(this._texture,0),r.setUniform1i("tex",0),g.bindProjectionMatrix(r,e.camera.projectionMatrix),w(C,e.camera.viewMatrix),r.setUniformMatrix4fv("view",C),r.setUniform4f("color",1,1,1,1),e.scenelightingData.setLightDirectionUniform(r),t.bindVAO(this._vao),r.assertCompatibleVertexAttributeLocations(this._vao),t.drawArrays(4,0,this._vaoCount),!0}_createVertexArrayObject(e){const t=d.createPolySphereGeometry(1,2,!1),r=t.indices.get("position");for(let n=0;n<r.length;n+=3){const e=r[n];r[n]=r[n+2],r[n+2]=e}const i=t.vertexAttributes.get("position").data,o=q.createBuffer(r.length),s=o.position;for(let n=0;n<r.length;++n){const e=3*r[n];s.set(n,0,i[e]),s.set(n,1,i[e+1]),s.set(n,2,i[e+2])}return new y(e,h,{geometry:u(q)},{geometry:_.createVertex(e,35044,o.buffer)})}}function w(e,t){return n(e,t),e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}const C=a(),q=f().vec3f("position");export default v;
