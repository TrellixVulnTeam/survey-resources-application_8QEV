/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{isNone as e}from"../../../../core/maybe.js";import t from"../../../webgl/Texture.js";import{getBytesPerElementFormat as s}from"../../../webgl/Util.js";import{getBasisTranscoder as n}from"../../../../libs/basisu/BasisU.js";let r=null,a=null;async function i(){return e(a)&&(a=n(),r=await a),a}function o(t){if(e(r))return t.byteLength;const n=new r.BasisFile(new Uint8Array(t));if(n.getNumImages()<1)return 0;const a=n.getNumLevels(0),i=n.getHasAlpha(),o=n.getImageWidth(0,0),l=n.getImageHeight(0,0);n.close(),n.delete();const g=s(i?37496:37492),m=(4**a-1)/(3*4**(a-1));return Math.ceil(o*l*g*m)}async function l(s,n,a){e(r)&&(r=await i());const o=new r.BasisFile(new Uint8Array(a));if(o.getNumImages()<1)return null;const l=o.getNumLevels(0),g=o.getHasAlpha(),m=o.getImageWidth(0,0),c=o.getImageHeight(0,0),{compressedTextureETC:u,compressedTextureS3TC:p}=s.capabilities,[d,h]=u?g?[1,37496]:[0,37492]:p?g?[3,33779]:[2,33776]:[13,6408];o.startTranscoding();const f=[];for(let e=0;e<l;e++)f.push(new Uint8Array(o.getImageTranscodedSizeInBytes(0,e,d))),o.transcodeImage(f[e],0,e,d,0,0);o.close(),o.delete();const w={...n,samplingMode:l>1?9987:9729,hasMipmap:l>1,internalFormat:h,width:m,height:c};return new t(s,w,{type:"compressed",levels:f})}export{l as createTextureFromBasis,o as estimateBasisTextureMemoryUsage,i as loadBasis};
