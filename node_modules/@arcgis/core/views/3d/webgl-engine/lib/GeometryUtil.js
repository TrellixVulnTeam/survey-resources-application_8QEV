/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{c as t}from"../../../../chunks/vec3f64.js";import{f as e,c as n,n as o,a as r,b as a,d as s,s as i,g as l,i as c}from"../../../../chunks/vec3.js";import{f as u,c as f,a as h}from"../../../../chunks/vec3f32.js";import{plane as y,ray as m}from"../../support/geometryUtils.js";import{Vec3Compact as p}from"./BufferVectorMath.js";import{assert as g}from"./Util.js";import{generateDefaultIndexArray as A}from"./geometryDataUtils.js";import{Geometry as d}from"./Geometry.js";const w=p;var v,x,z,M;!function(t){const e=.5,n=[[-e,-e,e],[e,-e,e],[e,e,e],[-e,e,e],[-e,-e,-e],[e,-e,-e],[e,e,-e],[-e,e,-e]],o=[0,0,1,-1,0,0,1,0,0,0,-1,0,0,1,0,0,0,-1],r=[0,0,1,0,1,1,0,1],a=new Uint16Array([0,1,2,2,3,0,4,0,3,3,7,4,1,5,6,6,2,1,1,0,4,4,5,1,3,2,6,6,7,3,5,4,7,7,6,5]),s=new Uint16Array(36);for(let c=0;c<6;c++)for(let t=0;t<6;t++)s[6*c+t]=c;const i=new Uint16Array(36);for(let c=0;c<6;c++)i[6*c+0]=0,i[6*c+1]=1,i[6*c+2]=2,i[6*c+3]=2,i[6*c+4]=3,i[6*c+5]=0;function l(t){Array.isArray(t)||(t=[t,t,t]);const e=new Array(24);for(let o=0;o<8;o++)e[3*o]=n[o][0]*t[0],e[3*o+1]=n[o][1]*t[1],e[3*o+2]=n[o][2]*t[2];return new d([["position",{size:3,data:e,exclusive:!0}],["normal",{size:3,data:o}],["uv0",{size:2,data:r}]],[["position",a],["normal",s],["uv0",i]])}t.createGeometry=l}(v||(v={})),function(t){const e=.5,n=[[-e,0,-e],[e,0,-e],[e,0,e],[-e,0,e],[0,-e,0],[0,e,0]],o=[0,1,-1,1,1,0,0,1,1,-1,1,0,0,-1,-1,1,-1,0,0,-1,1,-1,-1,0],r=new Uint16Array([5,1,0,5,2,1,5,3,2,5,0,3,4,0,1,4,1,2,4,2,3,4,3,0]),a=new Uint16Array([0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7]);function s(t){Array.isArray(t)||(t=[t,t,t]);const e=new Array(18);for(let o=0;o<6;o++)e[3*o]=n[o][0]*t[0],e[3*o+1]=n[o][1]*t[1],e[3*o+2]=n[o][2]*t[2];return new d([["position",{size:3,data:e,exclusive:!0}],["normal",{size:3,data:o}]],[["position",r],["normal",a]])}t.createGeometry=s}(x||(x={})),function(t){const r=.5,a=0,s=u(-r,a,-r),i=u(r,a,-r),l=u(0,a,r),c=u(0,a+r,0),h=f(),y=f(),m=f(),p=f(),g=f();e(h,s,c),e(y,s,i),n(m,h,y),o(m,m),e(h,i,c),e(y,i,l),n(p,h,y),o(p,p),e(h,l,c),e(y,l,s),n(g,h,y),o(g,g);const A=[s,i,l,c],w=[0,-1,0,m[0],m[1],m[2],p[0],p[1],p[2],g[0],g[1],g[2]],v=[0,1,2,3,1,0,3,2,1,3,0,2],x=[0,0,0,1,1,1,2,2,2,3,3,3];function z(t){Array.isArray(t)||(t=[t,t,t]);const e=new Array(12);for(let n=0;n<4;n++)e[3*n]=A[n][0]*t[0],e[3*n+1]=A[n][1]*t[1],e[3*n+2]=A[n][2]*t[2];return new d([["position",{size:3,data:e,exclusive:!0}],["normal",{size:3,data:w}]],[["position",new Uint16Array(v)],["normal",new Uint16Array(x)]])}t.createGeometry=z}(z||(z={})),function(p){function M(t,e,n,o={uv:!0}){const r=-Math.PI,a=2*Math.PI,s=-Math.PI/2,i=Math.PI,l=Math.max(3,Math.floor(e)),c=Math.max(2,Math.floor(n)),u=(l+1)*(c+1),f=new Float32Array(3*u),h=new Float32Array(3*u),y=new Float32Array(2*u),m=[];let p=0;for(let d=0;d<=c;d++){const e=[],n=d/c,o=s+n*i,u=Math.cos(o);for(let s=0;s<=l;s++){const i=s/l,c=r+i*a,m=Math.cos(c)*u,g=Math.sin(o),A=-Math.sin(c)*u;f[3*p]=m*t,f[3*p+1]=g*t,f[3*p+2]=A*t,h[3*p]=m,h[3*p+1]=g,h[3*p+2]=A,y[2*p]=i,y[2*p+1]=n,e.push(p),++p}m.push(e)}const g=new Uint32Array(2*l*(c-1)*3);p=0;for(let d=0;d<c;d++)for(let t=0;t<l;t++){const e=m[d][t],n=m[d][t+1],o=m[d+1][t+1],r=m[d+1][t];0===d?(g[p++]=e,g[p++]=o,g[p++]=r):d===c-1?(g[p++]=e,g[p++]=n,g[p++]=o):(g[p++]=e,g[p++]=n,g[p++]=o,g[p++]=o,g[p++]=r,g[p++]=e)}const A=[["position",g],["normal",g]],w=[["position",{size:3,data:f,exclusive:!0}],["normal",{size:3,data:h,exclusive:!0}]];return o.uv&&(w.push(["uv0",{size:2,data:y,exclusive:!0}]),A.push(["uv0",g])),o.offset&&(A[0][0]="offset",w[0][0]="offset",A.push(["position",new Uint32Array(g.length)]),w.push(["position",{size:3,data:Float64Array.from(o.offset),exclusive:!0}])),new d(w,A)}function G(t,e,n){const o=t;let r,a;if(n)r=[0,-1,0,1,0,0,0,0,1,-1,0,0,0,0,-1,0,1,0],a=new Uint32Array([0,1,2,0,2,3,0,3,4,0,4,1,1,5,2,2,5,3,3,5,4,4,5,1]);else{const t=o*(1+Math.sqrt(5))/2;r=[-o,t,0,o,t,0,-o,-t,0,o,-t,0,0,-o,t,0,o,t,0,-o,-t,0,o,-t,t,0,-o,t,0,o,-t,0,-o,-t,0,o],a=new Uint32Array([0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1])}for(let f=0;f<r.length;f+=3)w.scale(r,f,t/w.length(r,f));let s={};function i(e,n){e>n&&([e,n]=[n,e]);const o=e.toString()+"."+n.toString();if(s[o])return s[o];let a=r.length;return r.length+=3,w.add(r,3*e,r,3*n,r,a),w.scale(r,a,t/w.length(r,a)),a/=3,s[o]=a,a}for(let f=0;f<e;f++){const t=a.length,e=new Uint32Array(4*t);for(let n=0;n<t;n+=3){const t=a[n],o=a[n+1],r=a[n+2],s=i(t,o),l=i(o,r),c=i(r,t),u=4*n;e[u]=t,e[u+1]=s,e[u+2]=c,e[u+3]=o,e[u+4]=l,e[u+5]=s,e[u+6]=r,e[u+7]=c,e[u+8]=l,e[u+9]=s,e[u+10]=l,e[u+11]=c}a=e,s={}}const l=new Float32Array(r);for(let f=0;f<l.length;f+=3)w.normalize(l,f);const c=[["position",a],["normal",a]],u=[["position",{size:3,data:new Float32Array(r),exclusive:!0}],["normal",{size:3,data:l,exclusive:!0}]];return new d(u,c)}function P(t,e,n,o,r,a,s){const i=e?[e[0],e[1],e[2]]:[0,0,0],l=t?[t[0],t[1],t[2]]:[0,0,1];a=a||[0,0];const c=n?[255*n[0],255*n[1],255*n[2],n.length>3?255*n[3]:255]:[255,255,255,255],u=null!=o&&2===o.length?o:[1,1],f=[["position",{size:3,data:i,exclusive:!0}],["normal",{size:3,data:l,exclusive:!0}],["uv0",{size:a.length,data:a}],["color",{size:4,data:c,exclusive:!0}],["size",{size:2,data:u}]];if(null!=r){const t=new Float32Array([r[0],r[1],r[2],r[3]]);f.push(["auxpos1",{size:4,data:t}])}if(null!=s){const t=new Float32Array([s[0],s[1],s[2],s[3]]);f.push(["auxpos2",{size:4,data:t}])}return new d(f,null,1)}function F(t,e,n,o,r,a,s,i){if(null!=t){const{data:e}=i.getMutableAttribute("normal");e[0]=t[0],e[1]=t[1],e[2]=t[2]}if(null!=e){const{data:t}=i.getMutableAttribute("position");t[0]=e[0],t[1]=e[1],t[2]=e[2]}if(null!=n){const{data:t}=i.getMutableAttribute("color");t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3]}if(null!=o){const{data:t}=i.getMutableAttribute("size");t[0]=o[0],t[1]=o[1]}if(null!=r){const{data:t}=i.getMutableAttribute("auxpos1");t[0]=r[0],t[1]=r[1],t[2]=r[2],t[3]=r[3]}if(null!=a){const{data:t}=i.getMutableAttribute("uv0");t[0]=a[0],t[1]=a[1]}if(null!=s){const{data:t}=i.getMutableAttribute("auxpos2");t[0]=s[0],t[1]=s[1],t[2]=s[2],t[3]=s[3]}}function I(t,e){const n=new Float32Array(3*t.length),o=new Float32Array(e?3*t.length:3),r=new Uint32Array(t.length),a=new Uint32Array(t.length);for(let s=0;s<t.length;s++)n[3*s]=t[s][0],n[3*s+1]=t[s][1],n[3*s+2]=t[s][2],e&&(o[3*s]=e[s][0],o[3*s+1]=e[s][1],o[3*s+2]=e[s][2]),r[s]=s,a[s]=0;e||(o[0]=0,o[1]=1,o[2]=0);return new d([["position",{size:3,data:n,exclusive:!0}],["normal",{size:3,data:o,exclusive:!0}],["uv0",{size:2,data:[0,0],exclusive:!0}]],[["position",r],["normal",e?r:a],["uv0",a]],1)}function j(){const t=[0,0,0,0,0,100,100,0,0],e=new Uint16Array([0,1,2]),n=[0,1,0],o=new Uint16Array([0,0,0]),r=[0,0],a=new Uint16Array([0,0,0]);return new d([["position",{size:3,data:t,exclusive:!0}],["normal",{size:3,data:n,exclusive:!0}],["uv0",{size:2,data:r,exclusive:!0}]],[["position",e],["normal",o],["uv0",a]])}p.createBoxGeometry=v.createGeometry,p.createDiamondGeometry=x.createGeometry,p.createTetrahedronGeometry=z.createGeometry,p.createSphereGeometry=M,p.createPolySphereGeometry=G,p.createPointGeometry=P,p.updatePointGeometry=F,p.createPointArrayGeometry=I,p.createTriangleGeometry=j;const k=[[-1,-1,0],[1,-1,0],[1,1,0],[-1,1,0]];function S(t=k){const e=new Array(12);for(let a=0;a<4;a++)for(let n=0;n<3;n++)e[3*a+n]=t[a][n];const n=new Uint32Array([0,1,2,2,3,0]),o=[0,0,1],r=new Uint32Array([0,0,0,0,0,0]);return new d([["position",{size:3,data:e,exclusive:!0}],["normal",{size:3,data:o,exclusive:!0}],["uv0",{size:2,data:[0,0,1,0,1,1,0,1],exclusive:!0}],["color",{size:4,data:[255,255,255,255],exclusive:!0}]],[["position",n],["normal",r],["uv0",n],["color",r]])}function T(t,e,n,o,r=!0,a=!0){let s=0;const i=e,l=t;let c=u(0,s,0),f=u(0,s+l,0),h=u(0,-1,0),y=u(0,1,0);o&&(s=l,f=u(0,0,0),c=u(0,s,0),h=u(0,1,0),y=u(0,-1,0));const m=[f,c],p=[h,y],g=n+2,A=Math.sqrt(l*l+i*i);if(o)for(let d=n-1;d>=0;d--){const t=d*(2*Math.PI/n),e=u(Math.cos(t)*i,s,Math.sin(t)*i);m.push(e);const o=u(l*Math.cos(t)/A,-i/A,l*Math.sin(t)/A);p.push(o)}else for(let d=0;d<n;d++){const t=d*(2*Math.PI/n),e=u(Math.cos(t)*i,s,Math.sin(t)*i);m.push(e);const o=u(l*Math.cos(t)/A,i/A,l*Math.sin(t)/A);p.push(o)}const w=new Uint32Array(2*(n+2)*3),v=new Uint32Array(2*(n+2)*3);let x=0,z=0;if(r){for(let t=3;t<m.length;t++)w[x++]=1,w[x++]=t-1,w[x++]=t,v[z++]=0,v[z++]=0,v[z++]=0;w[x++]=m.length-1,w[x++]=2,w[x++]=1,v[z++]=0,v[z++]=0,v[z++]=0}if(a){for(let t=3;t<m.length;t++)w[x++]=t,w[x++]=t-1,w[x++]=0,v[z++]=t,v[z++]=t-1,v[z++]=1;w[x++]=0,w[x++]=2,w[x++]=m.length-1,v[z++]=1,v[z++]=2,v[z++]=p.length-1}const M=new Float32Array(3*g);for(let u=0;u<g;u++)M[3*u]=m[u][0],M[3*u+1]=m[u][1],M[3*u+2]=m[u][2];const U=new Float32Array(3*g);for(let u=0;u<g;u++)U[3*u]=p[u][0],U[3*u+1]=p[u][1],U[3*u+2]=p[u][2];return new d([["position",{size:3,data:M,exclusive:!0}],["normal",{size:3,data:U,exclusive:!0}]],[["position",w],["normal",v]])}function B(t,e,l,c,y,m){const p=c?h(c):u(1,0,0),g=y?h(y):u(0,0,0);m=null==m||m;const A=f();o(A,p);const w=f();r(w,A,Math.abs(t));const v=f();r(v,w,-.5),a(v,v,g);const x=u(0,1,0);Math.abs(1-s(A,x))<.2&&i(x,0,0,1);const z=f();n(z,A,x),o(z,z),n(x,z,A);const M=2*l+(m?2:0),U=l+(m?2:0),b=new Float32Array(3*M),G=new Float32Array(3*U),P=new Float32Array(2*M),F=new Uint32Array(3*l*(m?4:2)),I=new Uint32Array(3*l*(m?4:2));m&&(b[3*(M-2)+0]=v[0],b[3*(M-2)+1]=v[1],b[3*(M-2)+2]=v[2],P[2*(M-2)]=0,P[2*(M-2)+1]=0,b[3*(M-1)+0]=b[3*(M-2)+0]+w[0],b[3*(M-1)+1]=b[3*(M-2)+1]+w[1],b[3*(M-1)+2]=b[3*(M-2)+2]+w[2],P[2*(M-1)]=1,P[2*(M-1)+1]=1,G[3*(U-2)+0]=-A[0],G[3*(U-2)+1]=-A[1],G[3*(U-2)+2]=-A[2],G[3*(U-1)+0]=A[0],G[3*(U-1)+1]=A[1],G[3*(U-1)+2]=A[2]);const j=function(t,e,n){F[t]=e,I[t]=n};let k=0;const S=f(),T=f();for(let n=0;n<l;n++){const t=n*(2*Math.PI/l);r(S,x,Math.sin(t)),r(T,z,Math.cos(t)),a(S,S,T),G[3*n+0]=S[0],G[3*n+1]=S[1],G[3*n+2]=S[2],r(S,S,e),a(S,S,v),b[3*n+0]=S[0],b[3*n+1]=S[1],b[3*n+2]=S[2],P[2*n+0]=n/l,P[2*n+1]=0,b[3*(n+l)+0]=b[3*n+0]+w[0],b[3*(n+l)+1]=b[3*n+1]+w[1],b[3*(n+l)+2]=b[3*n+2]+w[2],P[2*(n+l)+0]=n/l,P[2*n+1]=1;const o=(n+1)%l;j(k++,n,n),j(k++,n+l,n),j(k++,o,o),j(k++,o,o),j(k++,n+l,n),j(k++,o+l,o)}if(m){for(let t=0;t<l;t++){const e=(t+1)%l;j(k++,M-2,U-2),j(k++,t,U-2),j(k++,e,U-2)}for(let t=0;t<l;t++){const e=(t+1)%l;j(k++,t+l,U-1),j(k++,M-1,U-1),j(k++,e+l,U-1)}}return new d([["position",{size:3,data:b,exclusive:!0}],["normal",{size:3,data:G,exclusive:!0}],["uv0",{size:2,data:P,exclusive:!0}]],[["position",F],["normal",I],["uv0",F]])}function D(t,e,n,o,r){n=n||10,o=null==o||o,g(t.length>1);const a=[[0,0,0]],s=[],i=[];for(let l=0;l<n;l++){s.push([0,-l-1,-(l+1)%n-1]);const t=l/n*2*Math.PI;i.push([Math.cos(t)*e,Math.sin(t)*e])}return p.createPathExtrusionGeometry(i,t,a,s,o,r)}function q(s,c,h,p,g,A=u(0,0,0)){const w=s.length,v=new Float32Array(c.length*w*3+(6*h.length||0)),x=new Float32Array(c.length*w*3+(h?6:0)),z=(c.length-1)*w*6+3*p.length*2,M=new Uint32Array(z),b=new Uint32Array(z);let G=0,P=0,F=0,I=0;const j=f(),k=f(),S=f(),T=f(),B=f(),D=f(),q=f(),E=t(),C=f(),O=f(),N=f(),R=f(),H=f(),J=y.create();i(C,0,1,0),e(k,c[1],c[0]),o(k,k),g?(a(E,c[0],A),o(S,E)):i(S,0,0,1),V(k,S,C,C,B,S,U),l(T,S),l(R,B);for(let t=0;t<h.length;t++)r(D,B,h[t][0]),r(E,S,h[t][2]),a(D,D,E),a(D,D,c[0]),v[G++]=D[0],v[G++]=D[1],v[G++]=D[2];x[P++]=-k[0],x[P++]=-k[1],x[P++]=-k[2];for(let t=0;t<p.length;t++)M[F++]=p[t][0]>0?p[t][0]:-p[t][0]-1+h.length,M[F++]=p[t][1]>0?p[t][1]:-p[t][1]-1+h.length,M[F++]=p[t][2]>0?p[t][2]:-p[t][2]-1+h.length,b[I++]=0,b[I++]=0,b[I++]=0;let K=h.length;const L=h.length-1;for(let t=0;t<c.length;t++){let i=!1;if(t>0){l(j,k),t<c.length-1?(e(k,c[t+1],c[t]),o(k,k)):i=!0,a(O,j,k),o(O,O),a(N,c[t-1],T),y.fromPositionAndNormal(c[t],O,J);y.intersectRay(J,m.wrap(N,j),E)?(e(E,E,c[t]),o(S,E),n(B,O,S),o(B,B)):V(O,T,R,C,B,S,U),l(T,S),l(R,B)}g&&(a(E,c[t],A),o(H,E));for(let e=0;e<w;e++)if(r(D,B,s[e][0]),r(E,S,s[e][1]),a(D,D,E),o(q,D),x[P++]=q[0],x[P++]=q[1],x[P++]=q[2],a(D,D,c[t]),v[G++]=D[0],v[G++]=D[1],v[G++]=D[2],!i){const t=(e+1)%w;M[F++]=K+e,M[F++]=K+w+e,M[F++]=K+t,M[F++]=K+t,M[F++]=K+w+e,M[F++]=K+w+t;for(let e=0;e<6;e++)b[I++]=M[F-6+e]-L}K+=w}const Q=c[c.length-1];for(let t=0;t<h.length;t++)r(D,B,h[t][0]),r(E,S,h[t][1]),a(D,D,E),a(D,D,Q),v[G++]=D[0],v[G++]=D[1],v[G++]=D[2];const W=P/3;x[P++]=k[0],x[P++]=k[1],x[P++]=k[2];const X=K-w;for(let t=0;t<p.length;t++)M[F++]=p[t][0]>=0?K+p[t][0]:-p[t][0]-1+X,M[F++]=p[t][2]>=0?K+p[t][2]:-p[t][2]-1+X,M[F++]=p[t][1]>=0?K+p[t][1]:-p[t][1]-1+X,b[I++]=W,b[I++]=W,b[I++]=W;return new d([["position",{size:3,data:v,exclusive:!0}],["normal",{size:3,data:x,exclusive:!0}]],[["position",M],["normal",b]])}function E(t,e,n){g(t.length>1,"createPolylineGeometry(): polyline needs at least 2 points"),g(3===t[0].length,"createPolylineGeometry(): malformed vertex"),g(null==e||e.length===t.length,"createPolylineGeometry: need same number of points and normals"),g(null==e||3===e[0].length,"createPolylineGeometry(): malformed normal");const o=new Float64Array(3*t.length),r=new Uint32Array(2*(t.length-1));let a=0,s=0;for(let c=0;c<t.length;c++){for(let e=0;e<3;e++)o[a++]=t[c][e];c>0&&(r[s++]=c-1,r[s++]=c)}const i=[],l=[];if(i.push(["position",r]),l.push(["position",{size:3,data:o,exclusive:!0}]),e){const n=new Float32Array(3*e.length);let o=0;for(let r=0;r<t.length;r++)for(let t=0;t<3;t++)n[o++]=e[r][t];i.push(["normal",r]),l.push(["normal",{size:3,data:n,exclusive:!0}])}return n&&(l.push(["color",{size:4,data:n}]),i.push(["color",A(n.length/4)])),new d(l,i,2)}function C(t,e,n,o){const r=new Array(18),a=[[-e,0,o/2],[n,0,o/2],[0,t,o/2],[-e,0,-o/2],[n,0,-o/2],[0,t,-o/2]],s=new Uint16Array([0,1,2,3,0,2,2,5,3,1,4,5,5,2,1,1,0,3,3,4,1,4,3,5]);for(let i=0;i<6;i++)r[3*i]=a[i][0],r[3*i+1]=a[i][1],r[3*i+2]=a[i][2];return new d([["position",{size:3,data:r,exclusive:!0}]],[["position",s]])}function O(t,e){const n=t.getMutableAttribute("position").data;for(let o=0;o<n.length;o+=3){const t=n[o],r=n[o+1],a=n[o+2];i(b,t,r,a),c(b,b,e),n[o]=b[0],n[o+1]=b[1],n[o+2]=b[2]}}function N(t,e=t){const n=t.vertexAttributes,o=n.get("position").data,r=n.get("normal").data;if(r){const t=e.getMutableAttribute("normal").data;for(let e=0;e<r.length;e+=3){const n=r[e+1];t[e+1]=-r[e+2],t[e+2]=n}}if(o){const t=e.getMutableAttribute("position").data;for(let e=0;e<o.length;e+=3){const n=o[e+1];t[e+1]=-o[e+2],t[e+2]=n}}return e}function R(t,e,r,a,i){return!(Math.abs(s(e,t))>i)&&(n(r,t,e),o(r,r),n(a,r,t),o(a,a),!0)}function V(t,e,n,o,r,a,s){return R(t,e,r,a,s)||R(t,n,r,a,s)||R(t,o,r,a,s)}p.createSquareGeometry=S,p.createConeGeometry=T,p.createCylinderGeometry=B,p.createTubeGeometry=D,p.createPathExtrusionGeometry=q,p.createPolylineGeometry=E,p.createExtrudedTriangle=C,p.transformInPlace=O,p.cgToGIS=N,p.makeOrthoBasisDirUp=R,p.makeOrthoBasisDirUpFallback=V}(M||(M={}));const U=.99619469809,b=f();var G=M;export default G;
