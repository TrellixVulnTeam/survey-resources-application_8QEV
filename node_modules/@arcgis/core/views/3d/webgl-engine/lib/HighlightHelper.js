/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{a as e}from"../../../../chunks/vec4f64.js";import{c as i}from"../../../../chunks/vec4.js";import{f as t}from"../../../../chunks/vec4f32.js";import{Default3D as r}from"./DefaultVertexAttributeLocations.js";import o from"../../../webgl/BufferObject.js";import{vertexCount as l,getGpuMemoryUsage as a}from"../../../webgl/Util.js";import s from"../../../webgl/VertexArrayObject.js";import{Pos2Tex as h}from"./DefaultVertexBufferLayouts.js";import{createQuadVAO as p}from"./glUtil3D.js";import c from"../../support/debugFlags.js";import n from"../../../webgl/FramebufferObject.js";import{HighlightCompositionTechniqueConfiguration as g,HighlightCompositionTechnique as u}from"../shaders/HighlightTechnique.js";const d=32;class m{constructor(i,r){this._rctx=r,this._grid={coverageMipmap:null,vao:null,verticalCellCount:0,horizontalCellCount:0,cellPixelSize:0,mipmapLevels:0,viewportWidth:0,viewportHeight:0},this.quadVAO=p(this._rctx);const o={colorTarget:0,depthStencilTarget:0,width:0,height:0},l={target:3553,pixelFormat:6408,dataType:5121,samplingMode:9729,wrapMode:33071,width:0,height:0};this.blur0Fbo=new n(this._rctx,o,l),this.blur1Fbo=new n(this._rctx,o,l),this.viewportToRestore=e(),this.defaultOptions={color:t(1,0,1,1),haloColor:t(1,0,1,1),haloOpacity:1,fillOpacity:.2,haloOpacityOccluded:.25,fillOpacityOccluded:.05,shadowColor:t(1,0,1,1),shadowOpacity:.15,occludedShadowOpacity:.075};const a=new g,s=(e,t)=>i.acquireAndReleaseExisting(u,e,t);a.highlightStage=0,a.gridOptimization=!1,this.blurTechnique=s(a,this.blurTechnique),a.highlightStage=0,a.gridOptimization=!0,this.blurGridTechnique=s(a,this.blurGridTechnique),a.highlightStage=1,a.gridOptimization=!1,this.applyTechnique=s(a,this.applyTechnique),a.highlightStage=1,a.gridOptimization=!0,this.applyGridTechnique=s(a,this.applyGridTechnique),a.highlightStage=2,a.gridOptimization=!1,this.downsampleTechnique=s(a,this.downsampleTechnique)}dispose(){if(null!=!this.quadVAO){if(this._grid.coverageMipmap)for(let e=1;e<this._grid.coverageMipmap.length;e++)this._grid.coverageMipmap[e].dispose();this._grid.vao&&this._grid.vao.dispose(!0),this.quadVAO.dispose(!0),this.blur1Fbo.dispose(),this.blur0Fbo.dispose(),this.quadVAO=null,this.blur0Fbo=null,this.blur1Fbo=null}}get profilingCallback(){return c.HIGHLIGHTS_PROFILE_TO_CONSOLE?e=>console.log(e):null}setDefaultOptions(e){this.defaultOptions=e}render(e,t,r){const o=e.pixelRatio,a=c.HIGHLIGHTS_GRID_OPTIMIZATION_ENABLED,s=this._rctx;i(this.viewportToRestore,e.fullViewport);const h=e.fullWidth,p=e.fullHeight,n=Math.ceil(h/o),g=Math.ceil(p/o);this.blur0Fbo.resize(n,g),this.blur1Fbo.resize(n,g),s.bindVAO(this.quadVAO);let u=null,m=null;a?(this._gridUpdateResources(t,d),this._gridComputeMipmap(),u=this._grid.vao,m=this.blurGridTechnique,s.bindTexture(this._grid.coverageMipmap[this._grid.mipmapLevels].colorTexture,1),m.program.setUniform1i("coverageTex",1)):(u=this.quadVAO,m=this.blurTechnique),m.bindPipelineState(s),s.bindProgram(m.program),s.bindVAO(u),s.bindFramebuffer(this.blur0Fbo),s.setViewport(0,0,n,g),s.setClearColor(0,0,0,0),s.clear(16384),m.program.setUniform1i("tex",0),s.bindTexture(t.colorTexture,0),m.program.setUniform2f("blurSize",1/n,0),s.drawArrays(m.primitiveType,0,l(u,"geometry")),s.bindFramebuffer(this.blur1Fbo),s.clear(16384),s.bindTexture(this.blur0Fbo.colorTexture,0),m.program.setUniform2f("blurSize",0,1/g),s.drawArrays(m.primitiveType,0,l(u,"geometry"));const b=a?this.applyGridTechnique:this.applyTechnique;if(s.bindFramebuffer(r),b.bindPipelineState(s),s.setViewport(this.viewportToRestore[0],this.viewportToRestore[1],this.viewportToRestore[2],this.viewportToRestore[3]),s.bindProgram(b.program),s.bindTexture(this.blur1Fbo.colorTexture,0),s.bindTexture(t.colorTexture,1),a){const e=this._grid.coverageMipmap[this._grid.mipmapLevels].colorTexture;s.bindTexture(e,2)}b.bindApplyPass(this.defaultOptions),s.drawArrays(b.primitiveType,0,l(u,"geometry")),s.bindVAO(null)}_gridUpdateResources(e,i){const t=this._rctx,l=this._grid;let a=!1;if(null===l.coverageMipmap&&(l.coverageMipmap=[e],a=!0),l.viewportWidth===e.width&&l.viewportHeight===e.height||(a=!0,l.viewportWidth=e.width,l.viewportHeight=e.height),l.coverageMipmap[0]=e,l.cellPixelSize!==i&&(l.cellPixelSize=i,a=!0),a){for(let e=1;e<l.coverageMipmap.length;e++)l.coverageMipmap[e].dispose();l.mipmapLevels=Math.ceil(Math.log(l.cellPixelSize)*Math.LOG2E),l.coverageMipmap.length=l.mipmapLevels+1;for(let e=0;e<l.mipmapLevels;e++){const i=l.coverageMipmap[e],r={target:3553,pixelFormat:6407,dataType:33635,samplingMode:9729,wrapMode:33071,width:Math.ceil(i.width/2),height:Math.ceil(i.height/2)},o={colorTarget:0,depthStencilTarget:0,width:Math.ceil(i.width/2),height:Math.ceil(i.height/2)};l.coverageMipmap[e+1]=new n(t,o,r)}}const p=Math.ceil(e.height/l.cellPixelSize),c=Math.ceil(e.width/l.cellPixelSize);if(!l.vao||l.verticalCellCount!==p||l.horizontalCellCount!==c){l.verticalCellCount=p,l.horizontalCellCount=c;const e=p+1,i=c+1,a=1/p,n=1/c,g=6,u=4,d=new Float32Array(g*u*e*i);let m=0;for(let t=0;t<e;t++)for(let e=0;e<i;e++)d[m+0]=(e-.5)*n*2-1,d[m+1]=(t-.5)*a*2-1,d[m+2]=e*n,d[m+3]=t*a,d[m+4]=(e+.5)*n*2-1,d[m+5]=(t-.5)*a*2-1,d[m+6]=e*n,d[m+7]=t*a,d[m+8]=(e-.5)*n*2-1,d[m+9]=(t+.5)*a*2-1,d[m+10]=e*n,d[m+11]=t*a,d[m+12]=(e-.5)*n*2-1,d[m+13]=(t+.5)*a*2-1,d[m+14]=e*n,d[m+15]=t*a,d[m+16]=(e+.5)*n*2-1,d[m+17]=(t-.5)*a*2-1,d[m+18]=e*n,d[m+19]=t*a,d[m+20]=(e+.5)*n*2-1,d[m+21]=(t+.5)*a*2-1,d[m+22]=e*n,d[m+23]=t*a,m+=g*u;l.vao&&l.vao.dispose(!0),l.vao=new s(t,r,{geometry:h},{geometry:o.createVertex(t,35044,d)})}}_gridComputeMipmap(){const e=this._rctx,i=this._grid,t=this.downsampleTechnique.program;this.downsampleTechnique.bindPipelineState(e),e.bindVAO(this.quadVAO);for(let r=0;r<i.mipmapLevels;r++){e.bindFramebuffer(i.coverageMipmap[r+1]),e.bindTexture(i.coverageMipmap[r].colorTexture,0);const o=i.coverageMipmap[r+1].width,a=i.coverageMipmap[r+1].height;e.bindProgram(t),t.setUniform1i("tex",0),t.setUniform2f("invFramebufferDim",1/o,1/a),e.setViewport(0,0,o,a),e.drawArrays(5,0,l(this.quadVAO,"geometry"))}}getGpuMemoryUsage(){let e=a(this.blur0Fbo)+a(this.blur1Fbo);if(this._grid.coverageMipmap)for(const i of this._grid.coverageMipmap)e+=a(i);return e}get test(){return{coverage:this._grid.coverageMipmap,blur:[this.blur0Fbo,this.blur1Fbo]}}}export default m;
