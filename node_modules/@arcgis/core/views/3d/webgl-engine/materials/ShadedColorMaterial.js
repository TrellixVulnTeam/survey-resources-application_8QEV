/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{c as e}from"../../../../chunks/vec3f64.js";import{n as t,s as r,a as i,b as s}from"../../../../chunks/vec3.js";import{BufferViewVec3f as a}from"../../support/buffer/BufferView.js";import{center as n,scale as o}from"../../../../geometry/support/aaBoundingBox.js";import{newLayout as u}from"../../support/buffer/InterleavedLayout.js";import{assert as c}from"../lib/Util.js";import h from"../lib/GLMaterial.js";import{intersectTriangleGeometry as f}from"./internal/MaterialUtil.js";import{Material as l,materialParametersDefaults as p}from"../lib/Material.js";import{writeDefaultAttributes as m,writePosition as d}from"./internal/bufferWriterUtils.js";import{ShadedColorMaterialTechniqueConfiguration as g,ShadedColorMaterialVertexAttrLocations as b,ShadedColorMaterialTechnique as q}from"../shaders/ShadedColorMaterialTechnique.js";class v extends l{constructor(e){super(e,C),this.supportsEdges=!0,this.techniqueConfig=new g,this._vertexAttributeLocations=b}getTechniqueConfig(e,t){return this.techniqueConfig.output=e,this.techniqueConfig.cullFace=this.params.cullFace,this.techniqueConfig.slicePlaneEnabled=this.params.slicePlaneEnabled,this.techniqueConfig.transparent=this.params.transparent,this.techniqueConfig.writeDepth=this.params.writeDepth,this.techniqueConfig.screenSizeEnabled=this.params.screenSizeEnabled,this.techniqueConfig.shadingEnabled=this.params.shadingEnabled,this.techniqueConfig.transparencyPassType=t?t.transparencyPassType:3,this.techniqueConfig.multipassTerrainEnabled=!!t&&t.multipassTerrainEnabled,this.techniqueConfig.cullAboveGround=!t||t.cullAboveGround,this.techniqueConfig}getPassParameters(){return this.params}intersect(e,t,a,u,c,h,l){if(this.params.screenSizeEnabled){const a=e.vertexAttributes.get("offset"),p={applyToVertex:(e,t,n,o)=>{const c=r(S,a.data[3*o+0],a.data[3*o+1],a.data[3*o+2]),h=r(x,e,t,n);return i(c,c,this.params.screenSize*u.camera.computeRenderPixelSizeAt(c)),s(h,h,c),[h[0],h[1],h[2]]},applyToAabb:e=>{const t=n(e,S);return o(e,this.params.screenSize*u.camera.computeRenderPixelSizeAt(t))}};f(e,t,u,c,h,p,l)}else f(e,t,u,c,h,void 0,l)}getGLMaterial(e){return 0===e.output||7===e.output||4===e.output?new E(e):void 0}createBufferWriter(){return new P(this.params.screenSizeEnabled)}}class E extends h{constructor(e){super(e),this.updateParameters()}updateParameters(e){this.technique=this.techniqueRep.acquireAndReleaseExisting(q,this.material.getTechniqueConfig(this.output,e),this.technique)}beginSlot(e){if(4===this.output)return 3===e;let t=3;return this.technique.configuration.transparent&&(t=this.technique.configuration.writeDepth?5:8),e===t}ensureParameters(e){this.updateParameters(e)}bind(e,t){e.bindProgram(this.technique.program),this.technique.bindPass(e,this.material.getPassParameters(),t)}}const C={color:[1,1,1,1],shadingTint:[0,0,0,.25],shadingDirection:t(e(),[.5,-.5,-.5]),transparent:!1,writeDepth:!0,slicePlaneEnabled:!1,cullFace:0,screenSizeEnabled:!1,screenSize:14,shadingEnabled:!0,...p};class P{constructor(e){this.screenSizeEnabled=e;const t=u().vec3f("position").vec3f("normal");this.screenSizeEnabled&&t.vec3f("offset"),this.vertexBufferLayout=t}allocate(e){return this.vertexBufferLayout.createBuffer(e)}elementCount(e){return e.indices.get("position").length}write(e,t,r,i){if(m(t,this.vertexBufferLayout,e.transformation,e.invTranspTransformation,r,i),this.screenSizeEnabled){if(!t.vertexAttributes.has("offset"))throw new Error("offset vertex attribute required for screenSizeEnabled ShadedColorMaterial");{const s=t.vertexAttributes.get("offset"),n=t.indices.get("offset");c(3===s.size);const o=r.getField("offset",a);if(!o)throw new Error("unable to acquire view for offset");d(n,s.data,e.invTranspTransformation,o,i)}}}}const S=e(),x=e();export{v as ShadedColorMaterial};
