/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../core/maybe.js";import t from"../../../../core/Logger.js";import{clamp as i}from"../../../../core/mathUtils.js";import{createRenderScreenPointArray3 as s}from"../../../../core/screenUtils.js";import{c as r}from"../../../../chunks/vec3f64.js";import{s as n,f as a,d as o,a as u,b as c,g as l,l as h,k as p,i as m}from"../../../../chunks/vec3.js";import{c as d}from"../../../../chunks/vec2.js";import{newLayout as f}from"../../support/buffer/InterleavedLayout.js";import{plane as v,lineSegment as g}from"../../support/geometryUtils.js";import{isTranslationMatrix as b}from"../lib/Util.js";import{computeAttachmentOriginLines as C}from"../lib/geometryDataUtils.js";import{isInstanceHidden as q}from"./renderers/utils.js";import S from"../lib/GLMaterial.js";import{Material as A,materialParametersDefaults as y}from"../lib/Material.js";import P from"./VisualVariableMaterialParameters.js";import{ribbonVertexAttributeLocations as x,RibbonLineTechniqueConfiguration as z,RibbonLineTechnique as E}from"../shaders/RibbonLineTechnique.js";const j=t.getLogger("esri.views.3d.webgl-engine.materials.RibbonLineMaterial");class O extends A{constructor(e){super(e,R),this._vertexAttributeLocations=x,this.techniqueConfig=new z,this.layout=this.createLayout()}isClosed(e,t){return M(this.params,e,t)}dispose(){}getPassParameters(){return this.params}getTechniqueConfig(t,i){this.techniqueConfig.output=t;const s=e(this.params.stipplePattern);return this.techniqueConfig.stippleEnabled=s,this.techniqueConfig.stippleIntegerRepeatsEnabled=s&&this.params.stippleIntegerRepeats,this.techniqueConfig.stippleOffColorEnabled=s&&e(this.params.stippleOffColor),this.techniqueConfig.slicePlaneEnabled=this.params.slicePlaneEnabled,this.techniqueConfig.sceneHasOcludees=this.params.sceneHasOcludees,this.techniqueConfig.roundJoins="round"===this.params.join,this.techniqueConfig.roundCaps="round"===this.params.cap,this.techniqueConfig.transparent=this.params.transparent,this.techniqueConfig.polygonOffset=this.params.polygonOffset,this.techniqueConfig.writeDepth=this.params.writeDepth,this.techniqueConfig.vvColor=this.params.vvColorEnabled,this.techniqueConfig.vvOpacity=this.params.vvOpacityEnabled,this.techniqueConfig.vvSize=this.params.vvSizeEnabled,this.techniqueConfig.innerColorEnabled=this.params.innerWidth>0&&e(this.params.innerColor),this.techniqueConfig.falloffEnabled=this.params.falloff>0,this.techniqueConfig.occluder=8===this.params.renderOccluded,this.techniqueConfig.transparencyPassType=i?i.transparencyPassType:3,this.techniqueConfig.multipassTerrainEnabled=!!i&&i.multipassTerrainEnabled,this.techniqueConfig.cullAboveGround=!i||i.cullAboveGround,this.techniqueConfig}intersect(e,t,i,s,r,n,a,o,u){u?this.intersectDrapedLineGeometry(e,s,n,a):this.intersectLineGeometry(e,t,i,s,this.params.width,a)}intersectDrapedLineGeometry(e,t,s,r){if(!t.options.selectionMode)return;const n=e.vertexAttributes.get("position").data,a=e.vertexAttributes.get("size");let o=this.params.width;if(this.params.vvSizeEnabled){const t=e.vertexAttributes.get("sizeFeatureAttribute").data[0];o*=i(this.params.vvSizeOffset[0]+t*this.params.vvSizeFactor[0],this.params.vvSizeMinSize[0],this.params.vvSizeMaxSize[0])}else a&&(o*=a.data[0]);const u=s[0],c=s[1],l=(o/2+4)*e.screenToWorldRatio;let h=Number.MAX_VALUE;for(let p=0;p<n.length-5;p+=3){const e=n[p],t=n[p+1],s=u-e,r=c-t,a=n[p+3]-e,o=n[p+4]-t,l=i((a*s+o*r)/(a*a+o*o),0,1),m=a*l-s,d=o*l-r,f=m*m+d*d;f<h&&(h=f)}h<l*l&&r()}intersectLineGeometry(e,t,s,r,m,f){if(!r.options.selectionMode||q(t))return;if(!b(s))return void j.error("intersection assumes a translation-only matrix");const C=e.vertexAttributes,S=C.get("position").data;let A=m;if(this.params.vvSizeEnabled){const e=C.get("sizeFeatureAttribute").data[0];A*=i(this.params.vvSizeOffset[0]+e*this.params.vvSizeFactor[0],this.params.vvSizeMinSize[0],this.params.vvSizeMaxSize[0])}else C.has("size")&&(A*=C.get("size").data[0]);const y=r.camera,P=_;d(P,r.point);const x=A*y.pixelRatio/2+4*y.pixelRatio;n(Z[0],P[0]-x,P[1]+x,0),n(Z[1],P[0]+x,P[1]+x,0),n(Z[2],P[0]+x,P[1]-x,0),n(Z[3],P[0]-x,P[1]-x,0);for(let i=0;i<4;i++)if(!y.unprojectFromRenderScreen(Z[i],$[i]))return;v.fromPoints(y.eye,$[0],$[1],ee),v.fromPoints(y.eye,$[1],$[2],te),v.fromPoints(y.eye,$[2],$[3],ie),v.fromPoints(y.eye,$[3],$[0],se);let z=Number.MAX_VALUE;const E=T(this.params,C,e.indices)?S.length-2:S.length-5;for(let i=0;i<E;i+=3){G[0]=S[i]+s[12],G[1]=S[i+1]+s[13],G[2]=S[i+2]+s[14];const e=(i+3)%S.length;if(V[0]=S[e]+s[12],V[1]=S[e+1]+s[13],V[2]=S[e+2]+s[14],v.signedDistance(ee,G)<0&&v.signedDistance(ee,V)<0||v.signedDistance(te,G)<0&&v.signedDistance(te,V)<0||v.signedDistance(ie,G)<0&&v.signedDistance(ie,V)<0||v.signedDistance(se,G)<0&&v.signedDistance(se,V)<0)continue;if(y.projectToRenderScreen(G,k),y.projectToRenderScreen(V,H),k[2]<0&&H[2]>0){a(B,G,V);const e=y.frustum,t=-v.signedDistance(e[4],G)/o(B,v.normal(e[4]));u(B,B,t),c(G,G,B),y.projectToRenderScreen(G,k)}else if(k[2]>0&&H[2]<0){a(B,V,G);const e=y.frustum,t=-v.signedDistance(e[4],V)/o(B,v.normal(e[4]));u(B,B,t),c(V,V,B),y.projectToRenderScreen(V,H)}else if(k[2]<0&&H[2]<0)continue;k[2]=0,H[2]=0;const t=g.distance2(g.fromPoints(k,H,N),P);t<z&&(z=t,l(W,G),l(I,V))}const O=r.rayBeginPoint,L=r.rayEndPoint;if(z<x*x){let e=Number.MAX_VALUE;if(g.closestLineSegmentPoint(g.fromPoints(W,I,N),g.fromPoints(O,L,X),J)){a(J,J,O);const t=h(J);u(J,J,1/t),e=t/p(O,L)}f(e,J)}}computeAttachmentOrigin(e,t){const i=e.vertexAttributes;if(!i)return null;const s=e.indices,r=i.get("position");return C(r,s?s.get("position"):null,s&&T(this.params,i,s),t)}createLayout(){const e=f().vec3f("position").f32("subdivisionFactor").vec2f("uv0").vec3f("auxpos1").vec3f("auxpos2");return this.params.vvSizeEnabled?e.f32("sizeFeatureAttribute"):e.f32("size"),this.params.vvColorEnabled?e.f32("colorFeatureAttribute"):e.vec4f("color"),this.params.vvOpacityEnabled&&e.f32("opacityFeatureAttribute"),e}createBufferWriter(){return new D(this.layout,this.params)}getGLMaterial(e){return 0===e.output||7===e.output||4===e.output||1===e.output?new L(e):void 0}validateParameterValues(e){"miter"!==e.join&&(e.miterLimit=0),this.requiresTransparent(e)&&(e.transparent=!0)}requiresTransparent(e){return!!((e.color&&e.color[3])<1||e.innerWidth>0&&this.colorRequiresTransparent(e.innerColor)||e.stipplePattern&&this.colorRequiresTransparent(e.stippleOffColor)||e.falloff>0)}colorRequiresTransparent(t){return e(t)&&t[3]<1&&t[3]>0}}class L extends S{constructor(e){super(e),this.updateParameters()}updateParameters(e){this.technique=this.techniqueRep.acquireAndReleaseExisting(E,this.material.getTechniqueConfig(this.output,e),this.technique)}beginSlot(e){return this.technique.configuration.occluder?3===e||10===e||11===e:0===this.output||7===this.output?(this.targetSlot=this.technique.configuration.writeDepth?5:8,e===this.targetSlot):3===e}_updateOccludeeState(e){e.hasOccludees!==this.material.params.sceneHasOcludees&&this.material.setParameterValues({sceneHasOcludees:e.hasOccludees})}ensureParameters(e){0!==this.output&&7!==this.output||this._updateOccludeeState(e),this.updateParameters(e)}bind(e,t){e.bindProgram(this.technique.program),this.technique.bindPass(e,this.material.getPassParameters(),t)}getPipelineState(e,t){return this.technique.getPipelineState(e,t)}}const R={width:0,color:[1,1,1,1],join:"miter",cap:"butt",miterLimit:5,writeDepth:!0,polygonOffset:!1,stipplePattern:null,stippleIntegerRepeats:!1,stippleOffColor:null,slicePlaneEnabled:!1,vvFastUpdate:!1,transparent:!1,isClosed:!1,falloff:0,innerWidth:0,innerColor:null,sceneHasOcludees:!1,...y,...P.Default};class D{constructor(e,t){switch(this.params=t,this.numJoinSubdivisions=0,this.vertexBufferLayout=e,this.params.join){case"miter":case"bevel":this.numJoinSubdivisions=t.stipplePattern?1:0;break;case"round":this.numJoinSubdivisions=U}}isClosed(e){return T(this.params,e.vertexAttributes,e.indices)}numCapSubdivisions(e){if(this.isClosed(e))return 0;switch(this.params.cap){case"butt":return 0;case"square":return 1;case"round":return F}}allocate(e){return this.vertexBufferLayout.createBuffer(e)}elementCount(e){const t=2*this.numCapSubdivisions(e)+2,i=e.indices.get("position").length/2+1,s=this.isClosed(e);let r=s?2:2*t;const n=s?0:1,a=s?i:i-1;if(e.vertexAttributes.has("subdivisions")){const t=e.vertexAttributes.get("subdivisions").data;for(let e=n;e<a;++e){r+=4+2*t[e]}}else{r+=(a-n)*(2*this.numJoinSubdivisions+4)}return r+=2,r}write(e,t,i,s){const r=K,a=Q,o=Y,u=t.vertexAttributes.get("position").data,c=t.indices&&t.indices.get("position"),h=this.numCapSubdivisions(t);c&&c.length!==2*(u.length/3-1)&&console.warn("RibbonLineMaterial does not support indices");let p=null;t.vertexAttributes.has("subdivisions")&&(p=t.vertexAttributes.get("subdivisions").data);let d=1,f=0;this.params.vvSizeEnabled?f=t.vertexAttributes.get("sizeFeatureAttribute").data[0]:t.vertexAttributes.has("size")&&(d=t.vertexAttributes.get("size").data[0]);let v=[1,1,1,1],g=0;this.params.vvColorEnabled?g=t.vertexAttributes.get("colorFeatureAttribute").data[0]:t.vertexAttributes.has("color")&&(v=t.vertexAttributes.get("color").data);let b=0;this.params.vvOpacityEnabled&&(b=t.vertexAttributes.get("opacityFeatureAttribute").data[0]);const C=u.length/3,q=e.transformation,S=new Float32Array(i.buffer),A=this.vertexBufferLayout.stride/4;let y=s*A;const P=y,x=(e,t,i,s,r,n,a)=>{if(S[y++]=t[0],S[y++]=t[1],S[y++]=t[2],S[y++]=s,S[y++]=r,S[y++]=n,S[y++]=e[0],S[y++]=e[1],S[y++]=e[2],S[y++]=i[0],S[y++]=i[1],S[y++]=i[2],this.params.vvSizeEnabled?S[y++]=f:S[y++]=d,this.params.vvColorEnabled)S[y++]=g;else{const e=Math.min(4*a,v.length-4);S[y++]=v[e+0],S[y++]=v[e+1],S[y++]=v[e+2],S[y++]=v[e+3]}this.params.vvOpacityEnabled&&(S[y++]=b)};y+=A,n(a,u[0],u[1],u[2]),q&&m(a,a,q);const z=this.isClosed(t);if(z){const e=u.length-3;n(r,u[e],u[e+1],u[e+2]),q&&m(r,r,q)}else{l(r,a),n(o,u[3],u[4],u[5]),q&&m(o,o,q);for(let e=0;e<h;++e){const t=1-e/h;x(r,a,o,t,1,-4,0),x(r,a,o,t,1,4,0)}x(r,a,o,0,0,-4,0),x(r,a,o,0,0,4,0),l(r,a),l(a,o)}const E=z?C:C-1;for(let j=z?0:1;j<E;j++){const e=(j+1)%C*3;n(o,u[e+0],u[e+1],u[e+2]),q&&m(o,o,q),x(r,a,o,0,1,-1,j),x(r,a,o,0,1,1,j);const t=p?p[j]:this.numJoinSubdivisions;for(let i=0;i<t;++i){const e=(i+1)/(t+1);x(r,a,o,e,1,-2,j),x(r,a,o,e,1,2,j)}x(r,a,o,1,0,-2,j),x(r,a,o,1,0,2,j),l(r,a),l(a,o)}if(z){y=w(S,P+A,S,y,2*A)}else{x(r,a,o,0,1,-5,E),x(r,a,o,0,1,5,E);for(let e=0;e<h;++e){const t=(e+1)/h;x(r,a,o,t,1,-5,E),x(r,a,o,t,1,5,E)}}w(S,P+A,S,P,A);y=w(S,y-A,S,y,A)}}function w(e,t,i,s,r){for(let n=0;n<r;n++)i[s++]=e[t++];return s}function T(e,t,i){return M(e,t.get("position").data,i?i.get("position"):null)}function M(e,t,i){return!!e.isClosed&&(i?i.length>2:t.length>6)}const F=3,U=1,G=r(),V=r(),B=r(),J=r(),_=r(),k=s(),H=s(),W=r(),I=r(),N=g.create(),X=g.create(),K=r(),Q=r(),Y=r(),Z=[s(),s(),s(),s()],$=[r(),r(),r(),r()],ee=v.create(),te=v.create(),ie=v.create(),se=v.create();export{O as RibbonLineMaterial};
