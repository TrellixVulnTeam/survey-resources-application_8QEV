/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import{ReloadableShaderModule as r}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as i}from"../core/shaderTechnique/ShaderTechnique.js";import{ShaderTechniqueConfiguration as t,parameter as o}from"../core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as s}from"../lib/DefaultVertexAttributeLocations.js";import a from"../../../webgl/Program.js";import{defaultDepthWriteParams as n,makePipelineState as p,defaultColorWriteParams as l,simpleBlendingParams as d}from"../../../webgl/renderState.js";import{View as c}from"../core/shaderLibrary/util/View.glsl.js";import{Slice as m}from"../core/shaderLibrary/Slice.glsl.js";import{ScreenSizePerspective as h}from"../core/shaderLibrary/util/ScreenSizePerspective.glsl.js";import{HUD as u}from"../core/shaderLibrary/hud/HUD.glsl.js";import{bindMultipassGeometryUniforms as g}from"../core/shaderLibrary/shading/MultipassGeometryTest.glsl.js";import{HUDOcclusion as f}from"../core/shaderLibrary/hud/HUDOcclusionPass.glsl.js";import{OutputHighlight as b}from"../core/shaderLibrary/output/OutputHighlight.glsl.js";import{VisualVariables as v}from"../core/shaderLibrary/shading/VisualVariables.glsl.js";import{H as y,a as E}from"../../../../chunks/HUDMaterial.glsl.js";import{VerticalOffset as P}from"../core/shaderLibrary/attributes/VerticalOffset.glsl.js";import{OITBlending as O}from"../lib/OrderIndependentTransparency.js";class S extends i{initializeProgram(e){const r=S.shader.get(),i=this.configuration,t=r.build({output:i.output,FrontFacePass:2===i.transparencyPassType,viewingMode:e.viewingMode,occlusionTestEnabled:i.occlusionTestEnabled,signedDistanceFieldEnabled:i.sdf,slicePlaneEnabled:i.slicePlaneEnabled,sliceHighlightDisabled:!1,sliceEnabledForVertexPrograms:!0,debugDrawBorder:i.debugDrawBorder,binaryHighlightOcclusionEnabled:i.binaryHighlightOcclusion,screenCenterOffsetUnitsEnabled:i.screenCenterOffsetUnitsEnabled,screenSizePerspectiveEnabled:i.screenSizePerspective,verticalOffsetEnabled:i.verticalOffset,pixelSnappingEnabled:i.pixelSnappingEnabled,vvSize:i.vvSize,vvColor:i.vvColor,vvInstancingEnabled:!1,isDraped:i.isDraped,multipassGeometryEnabled:i.multipassGeometryEnabled});return new a(e.rctx,t.generateSource("vertex"),t.generateSource("fragment"),s)}bindPass(e,r,i){c.bindProjectionMatrix(this.program,i.camera.projectionMatrix),this.program.setUniform1f("cameraGroundRelative",i.camera.aboveGround?1:-1),this.program.setUniform1f("perDistancePixelRatio",Math.tan(i.camera.fovY/2)/(i.camera.fullViewport[2]/2)),this.program.setUniformMatrix4fv("viewNormal",i.camera.viewInverseTransposeMatrix),this.program.setUniform1f("polygonOffset",r.shaderPolygonOffset),P.bindUniforms(this.program,r,i),h.bindUniforms(this.program,r),this.program.setUniform1f("pixelRatio",i.camera.pixelRatio||1),c.bindViewport(this.program,i),6===this.configuration.output?(f.bindUniforms(this.program),this.program.setUniform2fv("cameraNearFar",i.camera.nearFar),this.program.setUniform2fv("inverseViewport",i.inverseViewport),g(this.program,e,i)):(u.bindUniforms(this.program,i),y.bindUniforms(this.program,r,i.camera.pixelRatio||1),v.bindUniforms(this.program,r),this.configuration.occlusionTestEnabled&&u.bindVisibilityTexture(e,this.program,i)),4===this.configuration.output&&b.bindOutputHighlight(e,this.program,i)}bindDraw(e){c.bindView(this.program,e),c.bindCamPosition(this.program,e.origin,e.camera.viewInverseTransposeMatrix),m.bindUniformsWithOrigin(this.program,this.configuration,e)}setPipelineState(e){const r=this.configuration,i=3===e,t=2===e,o=515,s=this.configuration.polygonOffsetEnabled&&U,a=(i||t)&&4!==r.output?(r.depthEnabled||6===r.output)&&n:null;return p({blending:0===r.output||7===r.output||4===r.output?i?j:O(e):null,depthTest:{func:o},depthWrite:a,colorWrite:l,polygonOffset:s})}initializePipeline(){return this.setPipelineState(this.configuration.transparencyPassType)}get primitiveType(){return 6===this.configuration.output?0:4}}S.shader=new r(E,(()=>import("./HUDMaterial.glsl.js")));const U={factor:0,units:-4},j=d(1,771);class x extends t{constructor(){super(...arguments),this.output=0,this.occlusionTestEnabled=!0,this.sdf=!1,this.vvSize=!1,this.vvColor=!1,this.verticalOffset=!1,this.screenSizePerspective=!1,this.screenCenterOffsetUnitsEnabled=0,this.debugDrawBorder=!0,this.binaryHighlightOcclusion=!0,this.slicePlaneEnabled=!1,this.polygonOffsetEnabled=!1,this.depthEnabled=!0,this.transparencyPassType=3,this.pixelSnappingEnabled=!0,this.isDraped=!1,this.multipassGeometryEnabled=!1}}e([o({count:8})],x.prototype,"output",void 0),e([o()],x.prototype,"occlusionTestEnabled",void 0),e([o()],x.prototype,"sdf",void 0),e([o()],x.prototype,"vvSize",void 0),e([o()],x.prototype,"vvColor",void 0),e([o()],x.prototype,"verticalOffset",void 0),e([o()],x.prototype,"screenSizePerspective",void 0),e([o({count:2})],x.prototype,"screenCenterOffsetUnitsEnabled",void 0),e([o()],x.prototype,"debugDrawBorder",void 0),e([o()],x.prototype,"binaryHighlightOcclusion",void 0),e([o()],x.prototype,"slicePlaneEnabled",void 0),e([o()],x.prototype,"polygonOffsetEnabled",void 0),e([o()],x.prototype,"depthEnabled",void 0),e([o({count:4})],x.prototype,"transparencyPassType",void 0),e([o()],x.prototype,"pixelSnappingEnabled",void 0),e([o()],x.prototype,"isDraped",void 0),e([o()],x.prototype,"multipassGeometryEnabled",void 0);export{S as HUDMaterialTechnique,x as HUDMaterialTechniqueConfiguration};
