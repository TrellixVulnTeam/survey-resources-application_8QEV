/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{glsl as e}from"../views/3d/webgl-engine/core/shaderModules/interfaces.js";import{Transform as i}from"../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl.js";import{ShaderBuilder as o}from"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js";import{Slice as r}from"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js";import{OutputHighlight as t}from"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js";import{symbolAlphaCutoff as l}from"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl.js";import{LineStipple as a}from"../views/3d/webgl-engine/core/shaderLibrary/shading/LineStipple.glsl.js";import{VertexColor as s}from"../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl.js";function n(n){const p=new o;return p.include(i,{linearDepth:!1}),p.include(s,n),p.include(a,n),p.vertex.uniforms.add("proj","mat4").add("view","mat4"),p.attributes.add("position","vec3"),p.varyings.add("vpos","vec3"),p.vertex.code.add(e`
    void main(void) {
      vpos = position;
      forwardNormalizedVertexColor();
      gl_Position = transformPosition(proj, view, vpos);
  `),n.stippleEnabled&&(p.attributes.add("auxpos1","vec3"),p.vertex.uniforms.add("ndcToPixel","vec2"),p.vertex.code.add(e`
    vec4 vpos2 = transformPosition(proj, view, auxpos1);
    float lineSegmentPixelSize = length((vpos2.xy / vpos2.w - gl_Position.xy / gl_Position.w) * ndcToPixel);

    stipplePatternUv = lineSegmentPixelSize * stipplePatternPixelSizeInv;
    ${n.stippleIntegerRepeatsEnabled?"stipplePatternUv = floor(stipplePatternUv + 0.5);":""}

    // Cancel out perspective correct interpolation because we want this length the really represent
    // the screen distance
    stipplePatternUv *= gl_Position.w;
    `)),p.vertex.code.add(e`
  }
  `),4===n.output&&p.include(t),p.include(r,n),p.fragment.uniforms.add("constantColor","vec4").add("alphaCoverage","float"),p.fragment.code.add(e`
  void main() {
    discardBySlice(vpos);

    vec4 color = ${n.attributeColor?"vColor":"constantColor"};

    float stippleAlpha = getStippleAlpha();
    discardByStippleAlpha(stippleAlpha, stippleAlphaColorDiscard);

    vec4 finalColor = blendStipple(vec4(color.rgb, color.a * alphaCoverage), stippleAlpha);

    if (finalColor.a < ${e.float(l)}) {
      discard;
    }

    ${0===n.output?e`gl_FragColor = highlightSlice(finalColor, vpos);`:""}
    ${4===n.output?e`outputHighlight();`:""}
  }
  `),p}var p=Object.freeze({__proto__:null,build:n});export{p as N,n as b};
