/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../core/has.js";import{clone as t}from"../../core/lang.js";import"../../core/Logger.js";import"../../core/accessorSupport/ensureType.js";import{property as r}from"../../core/accessorSupport/decorators/property.js";import{JSONMap as i}from"../../core/jsonMap.js";import{reader as s}from"../../core/accessorSupport/decorators/reader.js";import{subclass as o}from"../../core/accessorSupport/decorators/subclass.js";import{writer as n}from"../../core/accessorSupport/decorators/writer.js";import"../../core/urlUtils.js";import"../../core/uuid.js";import"../../portal/support/resourceExtension.js";import{JSONSupport as p}from"../../core/JSONSupport.js";import a from"../../geometry/SpatialReference.js";import"../../geometry.js";import{apiKey as u}from"./commonProperties.js";var l;const c=new i({esriNAOutputLineNone:"none",esriNAOutputLineStraight:"straight",esriNAOutputLineTrueShape:"true-shape",esriNAOutputLineTrueShapeWithMeasure:"true-shape-with-measure"}),d=new i({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards"}),m=new i({esriNFSBAllowBacktrack:"allow-backtrack",esriNFSBAtDeadEndsOnly:"at-dead-ends-only",esriNFSBNoBacktrack:"no-backtrack",esriNFSBAtDeadEndsAndIntersections:"at-dead-ends-and-intersections"}),y=new i({esriDOTComplete:"complete",esriDOTCompleteNoEvents:"complete-no-events",esriDOTInstructionsOnly:"instructions-only",esriDOTStandard:"standard",esriDOTSummaryOnly:"summary-only"}),h=new i({esriCentimeters:"centimeters",esriDecimalDegrees:"decimal-degrees",esriDecimeters:"decimeters",esriFeet:"feet",esriInches:"inches",esriKilometers:"kilometers",esriMeters:"meters",esriMiles:"miles",esriMillimeters:"millimeters",esriNauticalMiles:"nautical-miles",esriPoints:"points",esriYards:"yards"});let w=l=class extends p{constructor(e){super(e),this.accumulateAttributes=null,this.apiKey=null,this.attributeParameterValues=null,this.directionsLanguage=null,this.directionsLengthUnits=null,this.directionsOutputType=null,this.directionsStyleName=null,this.directionsTimeAttribute=null,this.doNotLocateOnRestrictedElements=!0,this.findBestSequence=null,this.ignoreInvalidLocations=null,this.impedanceAttribute=null,this.outputGeometryPrecision=null,this.outputGeometryPrecisionUnits=null,this.outputLines="true-shape",this.outSpatialReference=null,this.pointBarriers=null,this.polygonBarriers=null,this.polylineBarriers=null,this.preserveFirstStop=null,this.preserveLastStop=null,this.restrictionAttributes=null,this.restrictUTurns=null,this.returnBarriers=!1,this.returnDirections=!1,this.returnPolygonBarriers=!1,this.returnPolylineBarriers=!1,this.returnRoutes=!0,this.returnStops=!1,this.returnZ=!0,this.startTime=null,this.startTimeIsUTC=!0,this.stops=null,this.travelMode=null,this.useHierarchy=null,this.useTimeWindows=null}readStartTime(e,t){return null!=t.startTime?new Date(t.startTime):null}writeStartTime(e,t){t.startTime=e?e.getTime():null}clone(){return new l(t({accumulateAttributes:this.accumulateAttributes,apiKey:this.apiKey,attributeParameterValues:this.attributeParameterValues,directionsLanguage:this.directionsLanguage,directionsLengthUnits:this.directionsLengthUnits,directionsOutputType:this.directionsOutputType,directionsStyleName:this.directionsStyleName,directionsTimeAttribute:this.directionsTimeAttribute,doNotLocateOnRestrictedElements:this.doNotLocateOnRestrictedElements,findBestSequence:this.findBestSequence,ignoreInvalidLocations:this.ignoreInvalidLocations,impedanceAttribute:this.impedanceAttribute,outputGeometryPrecision:this.outputGeometryPrecision,outputGeometryPrecisionUnits:this.outputGeometryPrecisionUnits,outputLines:this.outputLines,outSpatialReference:this.outSpatialReference,pointBarriers:this.pointBarriers,polygonBarriers:this.polygonBarriers,polylineBarriers:this.polylineBarriers,preserveFirstStop:this.preserveFirstStop,preserveLastStop:this.preserveLastStop,restrictionAttributes:this.restrictionAttributes,restrictUTurns:this.restrictUTurns,returnBarriers:this.returnBarriers,returnDirections:this.returnDirections,returnPolygonBarriers:this.returnPolygonBarriers,returnPolylineBarriers:this.returnPolylineBarriers,returnRoutes:this.returnRoutes,returnStops:this.returnStops,returnZ:this.returnZ,startTime:this.startTime,startTimeIsUTC:this.startTimeIsUTC,stops:this.stops,travelMode:this.travelMode,useHierarchy:this.useHierarchy,useTimeWindows:this.useTimeWindows}))}};e([r({type:[String],json:{write:!0}})],w.prototype,"accumulateAttributes",void 0),e([r(u)],w.prototype,"apiKey",void 0),e([r({json:{write:!0}})],w.prototype,"attributeParameterValues",void 0),e([r({type:String,json:{write:!0}})],w.prototype,"directionsLanguage",void 0),e([r({type:d.apiValues,json:{read:d.read,write:d.write}})],w.prototype,"directionsLengthUnits",void 0),e([r({type:y.apiValues,json:{read:y.read,write:y.write}})],w.prototype,"directionsOutputType",void 0),e([r({type:String,json:{write:!0}})],w.prototype,"directionsStyleName",void 0),e([r({type:String,json:{write:!0}})],w.prototype,"directionsTimeAttribute",void 0),e([r({type:Boolean,json:{write:!0}})],w.prototype,"doNotLocateOnRestrictedElements",void 0),e([r({json:{write:!0}})],w.prototype,"findBestSequence",void 0),e([r({json:{write:!0}})],w.prototype,"ignoreInvalidLocations",void 0),e([r({type:String,json:{read:{source:"impedanceAttributeName"},write:{target:"impedanceAttributeName"}}})],w.prototype,"impedanceAttribute",void 0),e([r({type:Number,json:{write:!0}})],w.prototype,"outputGeometryPrecision",void 0),e([r({type:h.apiValues,json:{read:h.read,write:h.write}})],w.prototype,"outputGeometryPrecisionUnits",void 0),e([r({type:c.apiValues,json:{read:c.read,write:c.write}})],w.prototype,"outputLines",void 0),e([r({type:a,json:{write:!0}})],w.prototype,"outSpatialReference",void 0),e([r({json:{write:!0}})],w.prototype,"pointBarriers",void 0),e([r({json:{write:!0}})],w.prototype,"polygonBarriers",void 0),e([r({json:{write:!0}})],w.prototype,"polylineBarriers",void 0),e([r({json:{write:!0}})],w.prototype,"preserveFirstStop",void 0),e([r({json:{write:!0}})],w.prototype,"preserveLastStop",void 0),e([r({type:[String],json:{write:!0}})],w.prototype,"restrictionAttributes",void 0),e([r({type:m.apiValues,json:{read:m.read,write:m.write}})],w.prototype,"restrictUTurns",void 0),e([r({type:Boolean,json:{write:!0}})],w.prototype,"returnBarriers",void 0),e([r({type:Boolean,json:{write:!0}})],w.prototype,"returnDirections",void 0),e([r({type:Boolean,json:{write:!0}})],w.prototype,"returnPolygonBarriers",void 0),e([r({type:Boolean,json:{write:!0}})],w.prototype,"returnPolylineBarriers",void 0),e([r({type:Boolean,json:{write:!0}})],w.prototype,"returnRoutes",void 0),e([r({type:Boolean,json:{write:!0}})],w.prototype,"returnStops",void 0),e([r({type:Boolean,json:{write:!0}})],w.prototype,"returnZ",void 0),e([r({type:Date,json:{type:Number,write:!0}})],w.prototype,"startTime",void 0),e([s("startTime")],w.prototype,"readStartTime",null),e([n("startTime")],w.prototype,"writeStartTime",null),e([r({type:Boolean,json:{write:!0}})],w.prototype,"startTimeIsUTC",void 0),e([r({json:{write:!0}})],w.prototype,"stops",void 0),e([r({json:{write:!0}})],w.prototype,"travelMode",void 0),e([r({type:Boolean,json:{write:!0}})],w.prototype,"useHierarchy",void 0),e([r({type:Boolean,json:{write:!0}})],w.prototype,"useTimeWindows",void 0),w=l=e([o("esri.tasks.support.RouteParameters")],w);var v=w;export default v;
