/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{isSome as e}from"../../core/maybe.js";import t from"../../core/Error.js";import r from"../../renderers/support/AuthoringInfo.js";import"../../renderers/Renderer.js";import"../../renderers/ClassBreaksRenderer.js";import"../../renderers/UniqueValueRenderer.js";import"../../renderers/DictionaryRenderer.js";import i from"../../renderers/DotDensityRenderer.js";import"../../renderers/HeatmapRenderer.js";import"../../renderers/SimpleRenderer.js";import"../../renderers/support/jsonUtils.js";import{getResolutionForScale as a}from"../../geometry/support/scaleUtils.js";import{getFieldsList as s}from"../support/utils.js";import{createLayerAdapter as n,getLayerTypeLabels as l}from"../support/adapters/support/layerUtils.js";import o from"../statistics/spatialStatistics.js";import d from"../heuristics/outline.js";import{createColors as m,getSymbolOutlineFromScheme as u,getBasemapInfo as p}from"./support/utils.js";import{roundValue as c}from"./support/dotDensityUtils.js";import y from"../statistics/summaryStatisticsForAttributes.js";import f from"../statistics/support/attributeDensity.js";import{c as b,g}from"../../chunks/dotDensity.js";const w=500;async function v(r){if(!(r&&r.layer&&r.view&&r.attributes&&r.attributes.length))throw new t("dot-density-renderer:missing-parameters","'layer', 'view' and 'attributes' parameters are required");if(r.attributes.length>8)throw new t("dot-density-renderer:invalid-parameters","Dot density renderer does not support more than 8 attributes");const i={...r},a=[2,1],s=n(i.layer,a);if(i.layer=s,i.dotBlendingEnabled=null==i.dotBlendingEnabled||i.dotBlendingEnabled,i.dotValueOptimizationEnabled=null==i.dotValueOptimizationEnabled||i.dotValueOptimizationEnabled,!s)throw new t("dot-density-renderer:invalid-parameters","'layer' must be one of these types: "+l(a).join(", "));const o=e(i.signal)?{signal:i.signal}:null;await Promise.all([i.view.when(),s.load(o)]);if("polygon"!==s.geometryType)throw new t("dot-density-renderer:not-supported","Dot density renderer is supported for polygon layers only");return i}async function h(t){let r=t.dotDensityScheme,i=null,a=null;const s=await p(t.basemap,t.view);if(i=e(s.basemapId)?s.basemapId:null,a=e(s.basemapTheme)?s.basemapTheme:null,r)return{scheme:b(r),basemapId:i,basemapTheme:a};const n=g({basemap:i,numColors:t.attributes.length,basemapTheme:a});return n&&(r=n.primaryScheme,i=n.basemapId,a=n.basemapTheme),{scheme:r,basemapId:i,basemapTheme:a}}async function S(e){const{view:r,layer:i,attributes:s,signal:n}=e,l=await i.getSampleFeatures({view:r,sampleSize:w,returnGeometry:!0,signal:n}),[d,m]=await Promise.all([o({features:l,geometryType:i.geometryType}),y({layer:i,attributes:s,includeZeros:!1,includeNegatives:!1,view:r,signal:n})]),u="avgSize"in d&&d.avgSize,p=m.avg;if(!u)throw new t("dot-density-renderer:insufficient-info","Average polygon size is invalid");if(!p)throw new t("dot-density-renderer:insufficient-info","Average attribute value is invalid");const f=a(r.scale,r.spatialReference);return{dotValue:c(p/(u*u/(f*f)*.1))||1,referenceScale:r.scale,minSliderValue:1,maxSliderValue:c(p)}}async function j(e){const{view:r,layer:i,attributes:n,signal:l}=e,o=[];for(const t of n){const e=await s({field:t.field,valueExpression:t.valueExpression});o.push(...e)}const d=await i.getSampleFeatures({view:r,sampleSize:w,requiredFields:o,returnGeometry:!0,signal:l}),m=await f({features:d,attributes:n,includeZeros:!1,includeNegatives:!1,view:r});if(!m.avgDensity||!m.minDensity||!m.maxDensity)throw new t("dot-density-renderer:insufficient-info","Invalid density values");const u=a(r.scale,r.spatialReference),p=u*u,y=c(m.minDensity*p),b=c(m.maxDensity*p),g=10;let v=c(m.avgDensity*p*g)||1;return v>b&&(v=b),{dotValue:v,referenceScale:r.scale,minSliderValue:y,maxSliderValue:b}}async function V(e){const a=await v(e),s=a.layer,n=s.geometryType,l=await h(a),o=l&&l.scheme;if(!o)throw new t("dot-density-renderer:insufficient-info","Unable to find dot-density scheme");const p={layer:s,view:a.view,attributes:a.attributes,signal:a.signal},c={layer:a.layer,view:a.view,signal:a.signal},[y,f]=await Promise.all([a.trueDensity?j(p):S(p),a.outlineOptimizationEnabled?d(c):null]),{dotValue:b,referenceScale:g,minSliderValue:w,maxSliderValue:V}=y,D=m(o.colors,a.attributes.length),E=a.attributes.map(((e,t)=>({field:e.field,valueExpression:e.valueExpression,label:e.label,valueExpressionTitle:e.valueExpressionTitle,color:D[t]}))),T=new i({attributes:E,dotBlendingEnabled:a.dotBlendingEnabled,outline:f?u(o,n,f.opacity):null,dotValue:b,referenceScale:a.dotValueOptimizationEnabled?g:null,legendOptions:a.legendOptions});return f&&f.visualVariables&&f.visualVariables.length&&(T.visualVariables=f.visualVariables.map((e=>e.clone()))),T.authoringInfo=new r({type:"dot-density",minSliderValue:w,maxSliderValue:V}),{renderer:T,dotDensityScheme:o,basemapId:l.basemapId,basemapTheme:l.basemapTheme}}export{V as createRenderer};
