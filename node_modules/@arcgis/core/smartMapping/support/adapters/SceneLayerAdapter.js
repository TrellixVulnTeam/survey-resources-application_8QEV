/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../core/has.js";import{isSome as t}from"../../../core/maybe.js";import"../../../core/Logger.js";import"../../../core/accessorSupport/ensureType.js";import{property as a}from"../../../core/accessorSupport/decorators/property.js";import{subclass as r}from"../../../core/accessorSupport/decorators/subclass.js";import s from"../../../core/Error.js";import"../../../core/urlUtils.js";import"../../../core/uuid.js";import"../../../portal/support/resourceExtension.js";import{pickRandom as i}from"../../../core/arrayUtils.js";import{createAbortController as o,timeout as n,throwIfAborted as l}from"../../../core/promiseUtils.js";import{isDateField as u,isNumericField as c}from"../../../layers/support/fieldUtils.js";import m from"../../../Graphic.js";import{whenFalseOnce as p}from"../../../core/watchUtils.js";import d from"../../../tasks/support/FeatureSet.js";import{getFieldsList as h}from"../utils.js";import{getSQLFilterForNormalization as f}from"../../statistics/support/utils.js";import y from"./LayerAdapter.js";import{getMissingFields as g,calculateStatsFromMemory as F,processSummaryStatisticsResult as w,getUniqueValuesFromFeatureSet as v,createUVResult as _,calculateUniqueValuesFromMemory as S,getHistogramFromFeatureSet as x,calculateClassBreaksFromMemory as L,calculateHistogramFromMemory as E,generateBinParams as j}from"./support/utils.js";import q from"./FeatureLayerAdapter.js";let A=class extends y{constructor(e){super(e)}_hasCachedStatistics(e){return this.layer.hasCachedStatistics(e)}_updateQuery(e,t=[],a=[]){if(!a.length)return e;const r=this.layer.objectIdField,s=e.clone(),i=t.filter((e=>{const t=this.layer.getField(e);return-1===a.indexOf(t.name)})),o=i.some((e=>this.layer.getField(e).name===r));return s.outFields=o?i:[...i,r],s}async _fetchFeaturesFromMemory(e,t,a){if(!e)throw new s("scene-layer-adapter:insufficient-data","view is required to fetch the features from layerView");const r=await e.whenLayerView(this.layer),i=o(),l=p(r,"updating",i.signal);await n(l,5e3,i);const u=await g(this,a,r),c=this._updateQuery(t,a,u),m=(await r.queryFeatures(c)).features;return u.length?r.whenGraphicAttributes(m,u):m}_fetchFeaturesForStats(e){return h({field:e.field,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((t=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,requiredFields:t,signal:e.signal})))}_generateFeatureSetForCachedHistogram(e,t=e.minimum,a=e.maximum,r){const s=[];for(let c=0;c<r;c++)s[c]=0;const i=e.counts.length,o=e.minimum,n=e.maximum;for(let c=0;c<i;c++){const l=(c+.5)/i,u=((1-l)*o+l*n-t)/(a-t)*r;u>=0&&u<=r&&(s[u===r?r-1:Math.floor(u)]+=e.counts[c])}const l=[];s.forEach(((e,t)=>{const a=new m({attributes:{}});a.attributes.EXPR_1=t+1,a.attributes.countOFExpr=e,l.push(a)}));const u=new d;return u.features=l,u}_getCachedStatistics(e,t){const a=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.minValue||e.maxValue?Promise.reject(new s("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression', 'sqlWhere', 'minValue' or 'maxValue' is specified")):a.queryCachedStatistics(t&&t.name,{signal:e.signal}).then((e=>{const t=e.stats,{min:a,max:r}=t;let{avg:s,stddev:i,sum:o,variance:n,count:l}=t;return 0===a&&0===r||(s=0===s?null:s,o=0===o?null:o,i=0===i?null:i,n=0===n?null:n,l=0===l?null:l),null==l&&null!=o&&null!=s&&(l=Math.round(o/s)),{avg:s,count:l,max:r,min:a,stddev:i,sum:o,variance:n}}))}async _getSummaryStatisticsFromMemory(e,t){const a={field:e.field,valueExpression:e.valueExpression,normalizationField:e.normalizationField,view:e.view,signal:e.signal},r=e.features?e.features:await this._fetchFeaturesForStats(a);if(!(r&&r.length))throw new s("scene-layer-adapter:insufficient-data","No features are available to calculate statistics");const i=u(t),o={...e};if("percent-of-total"===o.normalizationType){const e=(await F({field:o.field},r)).sum;if(null==e)throw new s("scene-layer-adapter:invalid","invalid normalizationTotal");o.normalizationTotal=e}const n=await F(o,r,i);return w(n)}_getCachedStatisticsForUniqueValues(e,t){const a=this.layer,r=t&&t.name,i=t&&this.getFieldDomain(e.field);return e.valueExpression||e.sqlExpression||e.sqlWhere?Promise.reject(new s("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression' or 'sqlWhere' is specified")):a.queryCachedStatistics(r,{signal:e.signal}).then((s=>{const i=s.stats;if(!i.mostFrequentValues)return Promise.reject();const o=s.labels&&s.labels.labels,n={},l=[],p="countOF"+r;i.mostFrequentValues.forEach((e=>{const s=new m({attributes:{}});s.attributes[r]=t&&t.name!==a.objectIdField&&(c(t)||u(t))?Number(e.value):e.value,s.attributes[p]=e.count,l.push(s)})),o&&o.forEach((e=>{n[e.value]=e.label}));const h=new d;return h.features=l,v(h,this,e.field,n,e.signal)})).then((t=>_(t,i,e.returnAllCodedValues)))}_getUniqueValuesFromMemory(e,t){const a=t&&this.getFieldDomain(e.field),r={field:e.field,valueExpression:e.valueExpression,view:e.view,signal:e.signal};return(e.features?Promise.resolve(e.features):this._fetchFeaturesForStats(r)).then((t=>S(e,t,a)))}_getCachedStatisticsForHistogram(e,t){const a=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.normalizationType?Promise.reject(new s("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression' or 'sqlExpression' or 'sqlWhere' or 'normalizationType' is specified")):a.queryCachedStatistics(t&&t.name,{signal:e.signal}).then((t=>{const a=t.stats,{minValue:r,maxValue:s}=e,i=null!=r?r:a.min,o=null!=s?s:a.max,n=e.numBins||10,l=this._generateFeatureSetForCachedHistogram(a.histogram,i,o,n);return x(l,i,o,n)}))}async _getClassBreaksFromMemory(e){const t={field:e.field,valueExpression:e.valueExpression,normalizationField:e.normalizationField,view:e.view,signal:e.signal},a=e.features?e.features:await this._fetchFeaturesForStats(t);if(!(a&&a.length))throw new s("scene-layer-adapter:insufficient-data","No features are available to calculate statistics");const r={...e};if("percent-of-total"===r.normalizationType){const e=(await F({field:r.field},a)).sum;if(null==e)throw new s("scene-layer-adapter:invalid","invalid normalizationTotal");r.normalizationTotal=e}return L(r,a)}_getHistogramFromMemory(e){const t={field:e.field,valueExpression:e.valueExpression,normalizationField:e.normalizationField,view:e.view,signal:e.signal};return(e.features?Promise.resolve(e.features):this._fetchFeaturesForStats(t)).then((t=>{if(!(t&&t.length))throw new s("scene-layer-adapter:insufficient-data","No features are available to calculate histogram");const{field:a,normalizationType:r,valueExpression:i,classificationMethod:o,minValue:n,maxValue:l,view:u}=e;let c=null;if((!o||"equal-interval"===o)&&!r)c=null!=n&&null!=l?Promise.resolve({min:n,max:l}):this.summaryStatistics({field:a,valueExpression:i,features:t,view:u,signal:e.signal}).then((e=>e.count?{min:e.min,max:e.max}:Promise.reject(new s("feature-layer-adapter:insufficient-data","No features are available to calculate histogram"))));else{const a={...e};a.features=t,c=this._getBinParamsFromMemory(a)}return c.then((a=>E(e,a,t)))}))}async _getBinParamsFromMemory(e){const{field:t,valueExpression:a,classificationMethod:r,standardDeviationInterval:s,normalizationType:i,normalizationField:o,minValue:n,maxValue:l,features:u,view:c}=e;return this._getClassBreaksFromMemory({field:t,valueExpression:a,normalizationType:i,normalizationField:o,classificationMethod:r,standardDeviationInterval:s,minValue:n,maxValue:l,numClasses:e.numBins,features:u,view:c}).then((e=>{const a=e.normalizationTotal,r=e.classBreakInfos,s=f({field:t,normalizationType:i,normalizationField:o});return j({field:t,normalizationType:i,normalizationField:o,normalizationTotal:a,classBreaks:r,where:s,layer:this})}))}getField(e=""){return this.layer.getField(e)}getFieldUsageInfo(e){const t=this.getField(e);if(!t)return null;const a=this.layer.getFieldUsageInfo(t.name);return{supportsLabelingInfo:a.supportsLabelingInfo,supportsPopupTemplate:a.supportsPopupTemplate,supportsRenderer:a.supportsRenderer,supportsLayerQuery:a.supportsLayerQuery,supportsStatistics:!0}}getFieldDomain(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.getFieldDomain(e,t):null}summaryStatistics(e){const t=this.getField(e.field);return this._featureLayerAdapter?this._featureLayerAdapter.summaryStatistics(e):this._hasCachedStatistics(t&&t.name)?this._getCachedStatistics(e,t).catch((()=>(l(e.signal),this._getSummaryStatisticsFromMemory(e,t)))):this._getSummaryStatisticsFromMemory(e,t)}uniqueValues(e){const t=this.getField(e.field);return this._featureLayerAdapter?this._featureLayerAdapter.uniqueValues(e):this._hasCachedStatistics(t&&t.name)?this._getCachedStatisticsForUniqueValues(e,t).catch((()=>(l(e.signal),this._getUniqueValuesFromMemory(e,t)))):this._getUniqueValuesFromMemory(e,t)}histogram(e){const t=this.getField(e.field);return this._featureLayerAdapter?this._featureLayerAdapter.histogram(e):this._hasCachedStatistics(t&&t.name)?this._getCachedStatisticsForHistogram(e,t).catch((()=>(l(e.signal),this._getHistogramFromMemory(e)))):this._getHistogramFromMemory(e)}classBreaks(e){const t=this.getField(e.field);return this._featureLayerAdapter?this._featureLayerAdapter.classBreaks(e):this._hasCachedStatistics(t&&t.name)?Promise.reject(new s("scene-layer-adapter:not-supported","Cached stats not supported")):this._getClassBreaksFromMemory(e)}queryFeatureCount(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.queryFeatureCount(e,t):Promise.reject(new s("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support count query"))}generateRenderer(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.generateRenderer(e,t):Promise.reject(new s("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support generateRenderer operation"))}heatmapStatistics(e){return this._featureLayerAdapter?this._featureLayerAdapter.heatmapStatistics(e):Promise.reject(new s("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support heatmapStatistics operation"))}async predominantCategories(e){if(this._featureLayerAdapter)return this._featureLayerAdapter.predominantCategories(e);throw new s("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support predominantCategories")}async getSampleFeatures(e){const{view:t,sampleSize:a,requiredFields:r,returnGeometry:s,signal:o}=e,n=1,u=this.layer.createQuery();u.outFields=r,u.returnGeometry=!!s,u.where=null,u.num=a;let c=[];try{if(c=await this._fetchFeaturesFromMemory(t,u,r),c.length&&a>0&&a<=c.length)return i(c,a,n)}catch(p){l(o)}let m=null;if(this._featureLayerAdapter){const t={...e};delete t.view,m=await this._featureLayerAdapter.getSampleFeatures(t)}return m&&m.length?m:i(c,c.length,n)}load(e){const a=this.layer.load(e).then((a=>{const r=a.associatedLayer;if(this.geometryType=a.geometryType,t(r)){this._featureLayerAdapter=new q({layer:r});return this._featureLayerAdapter.load(e).then((()=>{this.objectIdField=this._featureLayerAdapter.objectIdField,this.supportsSQLExpression=this._featureLayerAdapter.supportsSQLExpression,this.minScale=this._featureLayerAdapter.minScale,this.maxScale=this._featureLayerAdapter.maxScale,this.fullExtent=this._featureLayerAdapter.fullExtent}))}this.objectIdField=a.objectIdField,this.supportsSQLExpression=!1,this.hasQueryEngine=!1,this.fullExtent=a.fullExtent}));return this.addResolvingPromise(a),Promise.resolve(this)}};e([a({constructOnly:!0})],A.prototype,"layer",void 0),A=e([r("esri.smartMapping.support.adapters.SceneLayerAdapter")],A);var z=A;export default z;
