/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{unique as e}from"../../../core/arrayUtils.js";import{numericTypes as t}from"../../../layers/support/fieldUtils.js";import"../../../popup/content/Content.js";import"../../../popup/content/AttachmentsContent.js";import"../../../popup/content/CustomContent.js";import n from"../../../popup/FieldInfo.js";import i from"../../../popup/content/FieldsContent.js";import"../../../popup/content/MediaContent.js";import s from"../../../popup/content/TextContent.js";import r from"../../../popup/ExpressionInfo.js";import{substitute as o}from"../../../intl/substitute.js";import{fetchMessageBundle as a}from"../../../intl/messages.js";import{viewScaleRE as l}from"../../../renderers/visualVariables/support/visualVariableUtils.js";import{getAttributes as p}from"../../../renderers/support/utils.js";let m=0;const f="expression/";function u(e){return"hasVisualVariables"in e&&e.hasVisualVariables()?e.visualVariables.filter((e=>!l.test(e.valueExpression)&&(!("target"in e)||"outline"!==e.target))):[]}function d(e,i){let s=null;"popupTemplate"in e&&e.popupTemplate&&(s=e.popupTemplate.fieldInfos);const r=e.getField(i);let o=null;if(s&&s.some((e=>!(!e||e.fieldName.toLowerCase()!==r.name.toLowerCase())&&(o=e.clone(),!0))),!o){const e=t.indexOf(r.type)>-1,i="integer"===r.type||"small-integer"===r.type;o=new n({fieldName:r.name,isEditable:r.editable,visible:!0,format:e?{places:i?0:2,digitSeparator:!0}:null})}return o.label||(o.label=r.alias),o}function c(e){const{expression:t,title:n,returnType:i}=e;return new r({name:"expr"+m++,expression:t,title:n,returnType:i})}function b(e){const t="number"===e.returnType?{places:2,digitSeparator:!0}:null;return new n({fieldName:`${f}${e.name}`,visible:!0,format:t})}async function x(t){const n=await a("esri/smartMapping/t9n/smartMapping"),{renderer:i,layer:s,normFieldExpressionTemplate:r}=t,l=[],m=[],f=p(i,u);for(const e of f)if("field"===e.type)l.push(d(s,e.field));else if("normalized-field"===e.type){const t=s.getField(e.field),i=s.getField(e.normalizationField),a=c({type:"expression",expression:`\n      $feature["${t.name}"];\n      $feature["${i.name}"];\n      ${"percentage"===r?`($feature["${t.name}"] / $feature["${i.name}"]) * 100;`:`$feature["${t.name}"] / $feature["${i.name}"];`}\n      `,title:o("percentage"===r?n.normFieldLabelAsPercent:n.normFieldLabel,{expression1:t.alias,expression2:i.alias}),returnType:"number"});l.push(b(a),d(s,e.field),d(s,e.normalizationField)),m.push(a)}else if("expression"===e.type){const t=c(e);l.push(b(t)),m.push(t)}return{fieldInfos:e(l,((e,t)=>e.fieldName===t.fieldName)),expressionInfos:e(m,((e,t)=>e.expression===t.expression))}}async function g(e,t){const{fieldInfos:n,expressionInfos:r}=t,l=await a("esri/smartMapping/t9n/smartMapping");if(n.length>2)return[new i({fieldInfos:n})];const p=[];for(const i of n){const t=i.fieldName;let n=i.label;if(!n){const i=e.getField(t);if(i)n=i.alias||t;else if(r){const e=t.split(f)[1],i=r[r.findIndex((t=>t.name===e))];i&&(n=i.title||i.name)}}p.push(new s({text:o(l.fieldInfo,{fieldLabel:n,fieldValue:`{${t}}`})}))}return p}function y(e){return!(!("normalizationField"in e)||!e.normalizationField)||"hasVisualVariables"in e&&e.hasVisualVariables()&&e.visualVariables.some((e=>!(!("normalizationField"in e)||!e.normalizationField)))}export{f as expressionFieldPrefix,g as getContentFromFieldInfos,c as getExpressionInfo,x as getFieldAndExpressionInfos,d as getFieldInfo,b as getFieldInfoFromExpressionInfo,u as getPrimaryVisualVariables,y as hasNormalizedField};
