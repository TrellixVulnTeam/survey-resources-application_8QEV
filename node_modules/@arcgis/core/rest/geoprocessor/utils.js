/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import"../../core/has.js";import e from"../../request.js";import{normalizeCentralMeridian as a}from"../../geometry/support/normalizeUtils.js";import t from"../../layers/support/Field.js";import r from"../../tasks/support/FeatureSet.js";import{parseUrl as o,encode as u}from"../utils.js";import s from"../../layers/support/MapImage.js";import l from"../../tasks/support/DataFile.js";import n from"../../tasks/support/LinearUnit.js";import i from"../../tasks/support/ParameterValue.js";import c from"../../tasks/support/RasterData.js";async function m(t,r,u,s,l){const n={},i={},c=[];return p(s,c,n),a(c).then((a=>{const{outSpatialReference:c,processExtent:m,processSpatialReference:p,returnFeatureCollection:f,returnM:G,returnZ:v}=u,{path:S}=o(t);for(const e in n){const t=n[e];i[e]=a.slice(t[0],t[1])}const k=c?c.wkid||c:null,y=p?p.wkid||p:null,D="execute"===r?{returnFeatureCollection:f||void 0,returnM:G||void 0,returnZ:v||void 0}:null,J=P({...m?{context:{extent:m,outSR:k,processSR:y}}:{"env:outSR":k,"env:processSR":y},...s,...D,f:"json"},null,i),M={...l,query:J};return e(`${S}/${r}`,M)}))}function p(e,a,t){for(const o in e){const u=e[o];if(u&&"object"==typeof u&&u instanceof r){const{features:e}=u;t[o]=[a.length,a.length+e.length],e.forEach((e=>{a.push(e.geometry)}))}}}function f(e){const a=e.dataType,o=i.fromJSON(e);switch(a){case"GPBoolean":case"GPDouble":case"GPLong":case"GPString":return o;case"GPDate":o.value=new Date(o.value);break;case"GPDataFile":o.value=l.fromJSON(o.value);break;case"GPLinearUnit":o.value=n.fromJSON(o.value);break;case"GPFeatureRecordSetLayer":case"GPRecordSet":{const a=e.value.url;o.value=a?l.fromJSON(o.value):r.fromJSON(o.value);break}case"GPRasterData":case"GPRasterDataLayer":{const a=e.value.mapImage;o.value=a?s.fromJSON(a):c.fromJSON(o.value);break}case"GPField":o.value=t.fromJSON(o.value);break;case"GPMultiValue:GPBoolean":case"GPMultiValue:GPDouble":case"GPMultiValue:GPLong":case"GPMultiValue:GPString":return o;case"GPMultiValue:GPDate":{const e=o.value;o.value=e.map((e=>new Date(e)));break}case"GPMultiValue:GPDataFile":o.value=o.value.map((e=>l.fromJSON(e)));break;case"GPMultiValue:GPLinearUnit":o.value=o.value.map((e=>n.fromJSON(e)));break;case"GPMultiValue:GPFeatureRecordSetLayer":case"GPMultiValue:GPRecordSet":o.value=o.value.map((e=>r.fromJSON(e)));break;case"GPMultiValue:GPRasterData":case"GPMultiValue:GPRasterDataLayer":o.value=o.value.map((e=>e?s.fromJSON(e):c.fromJSON(o.value)));break;case"GPMultiValue:GPField":o.value=o.value.map((e=>t.fromJSON(e)))}return o}function P(e,a,t){for(const r in e){const a=e[r];Array.isArray(a)?e[r]=JSON.stringify(a.map((e=>P({item:e},!0).item))):a instanceof Date&&(e[r]=a.getTime())}return u(e,a,t)}export{p as collectGeometries,m as constructRequest,f as decode,P as gpEncode};
