/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../core/has.js";import{isNone as t,applySome as r,unwrapOr as o,isSome as i}from"../../core/maybe.js";import"../../core/Logger.js";import"../../core/accessorSupport/ensureType.js";import{handlesGroup as n}from"../../core/handleUtils.js";import{property as s}from"../../core/accessorSupport/decorators/property.js";import{subclass as l}from"../../core/accessorSupport/decorators/subclass.js";import"../../core/urlUtils.js";import"../../core/uuid.js";import"../../portal/support/resourceExtension.js";import c from"../../Color.js";import{s as a,g as p}from"../../chunks/vec3.js";import{on as u}from"../../core/watchUtils.js";import{getReferenceEllipsoid as d}from"../../geometry/projectionEllipsoid.js";import{getMetersPerVerticalUnitForSR as m}from"../../core/unitUtils.js";import{union as v}from"../../core/SetUtils.js";import{a as h}from"../../chunks/vec4f64.js";import{memoize as y}from"../../core/memoize.js";import{ray as f}from"../../views/3d/support/geometryUtils.js";import{Intersector as _}from"../../views/3d/webgl-engine/lib/Intersector.js";import{ElevationProfileLine as w}from"./ElevationProfileLine.js";import{GeometryDescriptor as g}from"../../layers/support/ElevationQuery.js";const j=2e5;let I=class extends w{constructor(e){super(e),this.type="view",this.color=new c("#cf4ccf"),this.include=null,this.exclude=null,this.numSamplesForPreview=50,this.numSamplesPerChunk=25,this._getQueryElevationDependencies=y(((e,t,r,o,n,s,l)=>({inputGraphicUid:i(e)?b(e):null,visibleLayers:t,maxIntersectionDistance:r,intersectOptions:o,view:n,stationary:s,spatialReference:l}))),this._vecA=h(),this._vecB=h(),this._ray=f.create()}get minDemResolution(){var e,r,o;const i=null==(e=this._viewModel)?void 0:e.view;if(t(i)||"3d"!==i.type)return null;const n=null==(r=i.pointsOfInterest)||null==(o=r.focus)?void 0:o.renderLocation;if(!n)return null;return i.state.camera.computeRenderPixelSizeAt(n)*m(i.spatialReference)}get queryElevationDependencies(){return r(this._view,(e=>this._getQueryElevationDependencies(this._viewModel.input,this._visibleLayers,this._maxIntersectionDistance,this._intersectOptions,e,e.stationary,e.spatialReference)))}get _visibleLayers(){const e=this._view,t=r(e,(e=>{var t,r;return null==(t=e.map)||null==(r=t.allLayers)?void 0:r.filter((e=>e.visible)).toArray()}));return o(t,[])}get _intersectOptions(){const e=this._view;if(t(e))return{};const r=e.externalToInternalIntersectOptions({include:this.include,exclude:this.exclude}),o=e.externalToInternalIntersectOptions({exclude:this._pointCloudLayers});return r.exclude=v(r.exclude,o.exclude),r}get _pointCloudLayers(){const e=this._view;return t(e)?[]:e.allLayerViews.toArray().filter((e=>"point-cloud"===e.layer.type)).map((e=>e.layer))}get _view(){const e=this._viewModel.view;return i(e)&&"3d"===e.type?e:null}get _maxIntersectionDistance(){const e=this._view;return t(e)||!e.renderCoordsHelper?Number.POSITIVE_INFINITY:d(e.spatialReference).radius/e.renderCoordsHelper.unitInMeters}get _intersector(){const e=this._view;if(t(e))return null;const r=new _(e.state.mode),o=r.options;return o.hud=!1,o.invisibleTerrain=!1,o.backfacesTerrain=!1,o.selectionMode=!1,o.store=2,r}async queryElevation(e,{noDataValue:r,signal:o}){const i=this.queryElevationDependencies;if(t(i))throw new Error("ElevationProfileLineInput: no dependencies");const{intersectOptions:n,view:s,spatialReference:l}=i,c=s.renderCoordsHelper,u=s.sceneIntersectionHelper,d=this._intersector,m=this._vecA,v=this._vecA,h=this._vecB,y=this._ray,_=await g.fromGeometry(e).project(l,o),w=_.coordinates,I=w.length;for(let t=0;t<I;++t){var b;const e=w[t];a(h,e.x,e.y,null!=(b=e.z)?b:0),c.toRenderCoords(h,l,h),p(m,h),c.setAltitude(j,m);const o=f.fromPoints(m,h,y);u.computeIntersection(o,d,n);const s=x(i,d.results.all);s?(s.getIntersectionPoint(v),c.fromRenderCoords(v,v,l),e.z=v[2]):e.z=r}return{geometry:_.export(),noDataValue:r}}attach(e){const t=()=>this._onChange();return n([super.attach(e),this.watch("queryElevationDependencies",t),u(this,"include","change",t,t,t),u(this,"exclude","change",t,t,t),u(e,"view.elevationProvider","elevation-change",t)])}};function x({view:e,inputGraphicUid:r,maxIntersectionDistance:o},i){for(let n=0;n<i.length;n++){const s=i[n];if(s.distanceInRenderSpace>o)continue;const l=s.toGraphic(e);if(t(l)||b(l)!==r)return s}return null}function b(e){if(e.layer&&"objectIdField"in e.layer){const t=e.attributes[e.layer.objectIdField];if(t)return`o-${e.layer.id}-${t}`}return`u-${e.uid}`}e([s({type:c,nonNullable:!0})],I.prototype,"color",void 0),e([s()],I.prototype,"include",void 0),e([s()],I.prototype,"exclude",void 0),e([s({readOnly:!0})],I.prototype,"minDemResolution",null),e([s()],I.prototype,"queryElevationDependencies",null),e([s()],I.prototype,"_visibleLayers",null),e([s()],I.prototype,"_intersectOptions",null),e([s()],I.prototype,"_pointCloudLayers",null),e([s()],I.prototype,"_view",null),e([s()],I.prototype,"_maxIntersectionDistance",null),e([s()],I.prototype,"_intersector",null),I=e([l("esri.widgets.ElevationProfile.ElevationProfileLineView")],I);var E=I;export default E;
