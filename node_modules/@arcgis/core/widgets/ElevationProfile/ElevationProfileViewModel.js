/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import"../../core/has.js";import{isNone as e,destroyMaybe as i,isSome as o,applySome as r}from"../../core/maybe.js";import s from"../../core/Logger.js";import"../../core/accessorSupport/ensureType.js";import{property as n}from"../../core/accessorSupport/decorators/property.js";import{aliasOf as l}from"../../core/accessorSupport/decorators/aliasOf.js";import{subclass as p}from"../../core/accessorSupport/decorators/subclass.js";import"../../core/urlUtils.js";import"../../core/uuid.js";import"../../portal/support/resourceExtension.js";import{min as a}from"../../core/arrayUtils.js";import{reactionInit as u}from"../../core/accessorSupport/trackingUtils.js";import c from"../../core/Accessor.js";import h from"../../core/Collection.js";import{referenceSetter as f}from"../../core/collectionUtils.js";import d from"../../Graphic.js";import m from"../../core/Handles.js";import{preferredLengthUnit as v,preferredVerticalLengthUnit as y,measurementLengthUnits as _}from"../../core/unitUtils.js";import g from"../../core/LRUCache.js";import{memoize as U}from"../../core/memoize.js";import{ElevationQueryTileCache as b}from"../../layers/support/ElevationQueryTileCache.js";import{defaultUnitPropertyMetadata as j}from"../support/commonProperties.js";import{ElevationProfileState as P}from"./support/constants.js";import{isProfileGenerationError as w}from"./support/ProfileGenerationError.js";import{isPolyline as O,isValidInputPath as C}from"./support/geometryUtils.js";import{getBoundsInMeters as S,mergeStatistics as E}from"./support/statisticsUtils.js";import{createProfileQueue as T}from"./support/profileUtils.js";import{ElevationProfileController as D}from"./ElevationProfileController.js";import k from"./ElevationProfileLineGround.js";import{ElevationProfileLineCollection as L}from"./elevationProfileLineTypes.js";import{ElevationProfileTool as x}from"./ElevationProfileTool.js";const G=s.getLogger("esri.widgets.ElevationProfile.ElevationProfileViewModel");let R=class extends c{constructor(t){super(t),this.view=null,this.input=null,this._getEffectiveUnitsMemoized=U(((t,e)=>({distance:t,elevation:e}))),this.geodesicDistanceThreshold=1e5,this.hoveredChartPosition=null,this.defaultUnit=null,this.queue=null,this._currentTileCache=null,this.error=null,this._handles=new m,this._defaultProfileLineGround=new k,this._userUnitOptions=null,this._userUnit=null,null!=t&&t.profiles||(this.profiles=new h([this._defaultProfileLineGround]))}initialize(){this._handles.add(u((()=>this.view),(t=>{var i;e(t)?G.warnOnce("no view. Widget will be disabled until a view is provided."):this.queue=T("3d"===t.type?null==(i=t.resourceController)?void 0:i.scheduler:void 0)}))),this.tool=new x({viewModel:this}),this._controller=new D({viewModel:this})}destroy(){this._handles=i(this._handles),this._defaultProfileLineGround=i(this._defaultProfileLineGround),this._controller=i(this._controller),this._currentTileCache=i(this._currentTileCache),this.tool=i(this.tool),this.queue=i(this.queue)}set profiles(t){const e=this._get("profiles"),i=null!=t?t:new h;this._set("profiles",f(i,e))}get state(){const t=this.view;return o(t)&&t.ready?this.tool.state:P.Disabled}get progress(){let t=0,e=0;for(const i of this.visibleProfiles)t++,e+=i.progress;return t>0?e/t:0}set unitOptions(t){this._userUnitOptions=t,this._set("unitOptions",this._filteredOrAllUnits(this._userUnitOptions))}get unitOptions(){return this._filteredOrAllUnits(this._userUnitOptions)}set unit(t){this._userUnit=t?this._findSelectableUnit(t,this._userUnit):null,this.notifyChange("unit")}get unit(){return this._userUnit?(this._userUnit=this._findSelectableUnit(this._userUnit,this.defaultUnit),this._userUnit):this._findSelectableUnit(this.defaultUnit)}get effectiveUnits(){const t=S(this.visibleProfiles.map((t=>t.result))),e=v(t.maxDistance,"meters",this.unit),i=y(t.maxElevation,"meters",this.unit);return this._getEffectiveUnitsMemoized(e,i)}get hasVertices(){const t=r(this.input,(t=>t.geometry));return O(t)&&t.paths.reduce(((t,e)=>t+e.length),0)>0}get hoveredPoints(){return!e(this.input)&&this.visible&&this.tool.editable?this.visibleProfiles.map((t=>{const e=t.hoveredPoint;return o(e)?{hoveredPoint:e,color:t.color}:null})).filter(o):[]}get statistics(){return E(this.visibleProfiles.map((t=>t.statistics)))}get chartData(){if(e(this.input))return null;const{effectiveUnits:t,progress:i,statistics:o,visibleProfiles:r}=this,s=r.filter((t=>t.hasZ)).map((t=>({id:t.id,type:t.type,title:t.title,color:t.color,samples:t.samples,progress:t.progress,chartFillEnabled:t.chartFillEnabled,chartStrokeWidth:t.chartStrokeWidth,chartStrokeOffsetY:t.chartStrokeOffsetY})));return 0===s.length?null:{lines:s,effectiveUnits:t,statistics:o,fullyRefined:1===i,dynamicElevationRange:r.some((t=>"view"===t.type))}}get visibleProfiles(){return this.profiles.toArray().filter((t=>t.available&&t.visible))}get minDemResolutions(){const t=[];for(const{minDemResolution:e}of this.visibleProfiles)o(e)&&t.push(e);return t}get minDemResolution(){return a(this.minDemResolutions)}get errorState(){const t=r(this.input,(t=>t.geometry));if(!C(t))return"no-valid-input";if(o(this.error)){if(w(this.error))switch(this.error.cause){case"too-complex":return"too-complex";case"invalid-geometry":return"invalid-geometry";case"invalid-elevation-info":return"invalid-elevation-info";case"elevation-query-error":return"no-valid-input"}return"unknown-error"}return 0===this.visibleProfiles.length?"no-visible-profiles":e(this.chartData)&&1===this.progress?"refined-but-no-chart-data":"none"}get tileCache(){this._currentTileCache=i(this._currentTileCache);const t=this.view;if(o(t)&&"3d"===(null==t?void 0:t.type)){var r;const e=null==(r=t.basemapTerrain)?void 0:r.elevationQueryCache;if(o(e))return e}return e(this._currentTileCache)&&(this._currentTileCache=new b(new g(20971520))),this._currentTileCache}get inputIsSketched(){return this.tool.interaction.isSketchedGraphic(this.input)}start(t){this.tool.interaction.start(t)}stop(){this.tool.interaction.stop()}cancel(){this.tool.interaction.cancel()}clear(){this.tool.interaction.clear()}_findSelectableUnit(t,e){const i=this.unitOptions;return o(t)&&-1!==i.indexOf(t)?t:e?this._findSelectableUnit(e):i[0]}_filteredOrAllUnits(t){const e=(o(t)?t:[]).filter((t=>-1!==_.indexOf(t)));return 0===e.length?_.slice():e}};t([n()],R.prototype,"view",void 0),t([n({type:d})],R.prototype,"input",void 0),t([n({type:L,nonNullable:!0})],R.prototype,"profiles",null),t([n({readOnly:!0})],R.prototype,"state",null),t([n({readOnly:!0})],R.prototype,"progress",null),t([n()],R.prototype,"unitOptions",null),t([n()],R.prototype,"unit",null),t([n({readOnly:!0})],R.prototype,"effectiveUnits",null),t([n({type:Number})],R.prototype,"geodesicDistanceThreshold",void 0),t([n()],R.prototype,"hoveredChartPosition",void 0),t([n({readOnly:!0})],R.prototype,"hoveredPoints",null),t([n({readOnly:!0})],R.prototype,"statistics",null),t([n()],R.prototype,"chartData",null),t([n()],R.prototype,"visibleProfiles",null),t([n()],R.prototype,"minDemResolutions",null),t([n({readOnly:!0})],R.prototype,"minDemResolution",null),t([n({readOnly:!0})],R.prototype,"errorState",null),t([n(j)],R.prototype,"defaultUnit",void 0),t([n()],R.prototype,"queue",void 0),t([n()],R.prototype,"tileCache",null),t([n()],R.prototype,"tool",void 0),t([l("tool.visible")],R.prototype,"visible",void 0),t([n()],R.prototype,"error",void 0),t([n()],R.prototype,"inputIsSketched",null),t([n()],R.prototype,"_defaultProfileLineGround",void 0),t([n()],R.prototype,"_userUnitOptions",void 0),t([n()],R.prototype,"_controller",void 0),t([n()],R.prototype,"_userUnit",void 0),R=t([p("esri.widgets.ElevationProfile.ElevationProfileViewModel")],R);var q=R;export default q;
