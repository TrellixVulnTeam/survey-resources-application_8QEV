/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import e from"../../core/Logger.js";import t from"../../core/Error.js";import{zoomToFeature as r,zoomToClusteredFeatures as i,browseClusteredFeatures as o,removeSelectedFeature as n}from"./actions.js";const a="esri.widgets.Popup.PopupViewModel",s=e.getLogger(a),c=function(e){const{event:a,view:s}=e,{action:c}=a,u=s&&s.popup;if(!c)return Promise.reject(new t("trigger-action:missing-arguments","Event has no action"));if(!u)return Promise.reject(new t("trigger-action:missing-arguments","view.popup is missing"));const{disabled:d,id:w}=c;if(!w)return Promise.reject(new t("trigger-action:invalid-action","action.id is missing"));if(d)return Promise.reject(new t("trigger-action:invalid-action","Action is disabled"));if(w===r.id)return g(u.viewModel);if(w===i.id)return l(u.viewModel);if(u.viewModel.browseClusterEnabled=!1,w===o.id&&(u.featureMenuOpen=!0,u.viewModel.browseClusterEnabled=!0),w===n.id){u.close();const{selectedFeature:e}=u;if(!e)return Promise.reject(new t(`trigger-action:${n.id}`,"selectedFeature is required",{selectedFeature:e}));const{sourceLayer:r}=e;return r?r.remove(e):s.graphics.remove(e),Promise.resolve()}return Promise.resolve()};function u(e){const{selectedFeature:t,location:r,view:i}=e;if(!i)return null;if("3d"===i.type)return t||r;return e.get("selectedFeature.geometry")||r}function d(e,r){if("3d"!==(null==r?void 0:r.type)||!e||"esri.Graphic"!==e.declaredClass)return!0;const i=r.getViewForGraphic(e);if(i&&"whenGraphicBounds"in i){let r=!1;return i.whenGraphicBounds(e,{useViewElevation:!0}).then((e=>{r=!e||!e.boundingBox||e.boundingBox[0]===e.boundingBox[3]&&e.boundingBox[1]===e.boundingBox[4]&&e.boundingBox[2]===e.boundingBox[5]})).catch((()=>{const r=new t("zoom-to:invalid-graphic","Could not zoom to the location of the graphic.",{graphic:e});s.error(r)})),r}return!0}async function g(e){const{location:i,selectedFeature:o,view:n,zoomFactor:a}=e,c=u(e);if(!c){const e=new t("zoom-to:invalid-target-or-view","Cannot zoom to location without a target and view.",{target:c,view:n});return s.error(e),Promise.reject(e)}const g=n.scale/a,l=e.get("selectedFeature.geometry")||i,w=l&&"point"===l.type&&d(o,n);r.active=!0,r.disabled=!0,await e.view.goTo({target:c,scale:w?g:void 0}),r.active=!1,r.disabled=!1,e.zoomToLocation=null,w&&(e.location=l)}async function l(e){const{selectedFeature:r,view:o}=e;if("2d"!==(null==o?void 0:o.type)){const e=new t("zoomToCluster:invalid-view","View must be 2d MapView.",{view:o});throw s.error(e),e}if(!r.isAggregate){const e=new t("zoomToCluster:invalid-selectedFeature","Selected feature must represent an aggregate/cluster graphic.",{selectedFeature:r});throw s.error(e),e}const n=r.sourceLayer,a=await o.whenLayerView(n),c=a.createQuery();c.aggregateIds=[r.getObjectId()],i.active=!0,i.disabled=!0;const{extent:u}=await a.queryExtent(c);await o.goTo({target:u}),i.active=!1,i.disabled=!1}async function w(e){const{selectedFeature:r,view:i}=e;if("2d"!==(null==i?void 0:i.type)){const e=new t("displayClusterExtent:invalid-view","View must be 2d MapView.",{view:i});throw s.error(e),e}if(!r.isAggregate){const e=new t("zoomToCluster:invalid-selectedFeature","Selected feature must represent an aggregate/cluster graphic.",{selectedFeature:r});throw s.error(e),e}const o=r.sourceLayer,n=await i.whenLayerView(o),a=n.createQuery();a.aggregateIds=[r.getObjectId()];const{extent:c}=await n.queryExtent(a);e.selectedClusterBoundaryFeature.geometry=c,i.graphics.add(e.selectedClusterBoundaryFeature)}async function v(e){const{selectedFeature:r,view:i}=e;if("2d"!==(null==i?void 0:i.type)){const e=new t("browseAggregateFeatures:invalid-view","View must be 2d MapView.",{view:i});throw s.error(e),e}if(!r.isAggregate){const e=new t("browseAggregateFeatures:invalid-selectedFeature","Selected feature must represent an aggregate/cluster graphic.",{selectedFeature:r});throw s.error(e),e}const n=r.sourceLayer,a=await i.whenLayerView(n),c=a.createQuery();c.aggregateIds=[r.getObjectId()],o.active=!0,o.disabled=!0;const{features:u}=await a.queryFeatures(c);o.active=!1,o.disabled=!1,e.features=[r].concat(u)}function p(e){e.features=e.features.filter((e=>e.isAggregate))}export{v as browseAggregateFeatures,w as displayClusterExtent,u as getSelectedTarget,d as isZoomScreenSize,p as removeClusteredFeaturesForBrowsing,c as triggerAction,l as zoomToClusterExtent,g as zoomToLocation};
