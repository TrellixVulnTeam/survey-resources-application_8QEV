/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import"../../core/has.js";import"../../core/Logger.js";import"../../core/accessorSupport/ensureType.js";import{property as e}from"../../core/accessorSupport/decorators/property.js";import{subclass as r}from"../../core/accessorSupport/decorators/subclass.js";import i from"../../core/Error.js";import"../../core/urlUtils.js";import"../../core/uuid.js";import"../../portal/support/resourceExtension.js";import o from"../../geometry/Extent.js";import s from"../../core/Collection.js";import{formatDate as l,convertDateFormatToIntlOptions as a}from"../../intl/date.js";import n from"../../request.js";import"../../intl.js";import p from"../../core/Loadable.js";import c from"../../portal/Portal.js";import u from"../../core/Handles.js";import d from"../../Viewpoint.js";import{fromJSON as m}from"../../tasks/support/fileFormat.js";import{fromJSON as f}from"../../tasks/support/layoutTemplate.js";import h from"../../tasks/PrintTask.js";import{getExtent as v}from"../../views/2d/viewpointUtils.js";import y from"../../tasks/support/PrintParameters.js";import w from"./CustomTemplate.js";const j=6e4,S=s.ofType(w);function g(t){t.layoutOptions||(t.layoutOptions={}),t.layoutOptions.customTextElements||(t.layoutOptions.customTextElements=[]);const e="date";if(!t.layoutOptions.customTextElements.find((t=>e in t))){const{customTextElements:e}=t.layoutOptions;e.push({date:l(Date.now(),a("short-date"))})}}let x=class extends p{constructor(t){super(t),this._handles=new u,this._viewpoint=null,this.allowedFormats="all",this.allowedLayouts="all",this.defaultTemplates=new S,this.includeDefaultTemplates=!0,this.effectivePrintServiceUrl=null,this.error=null,this.portal=c.getDefault(),this.printServiceUrl=null,this.scaleEnabled=!1,this.templatesInfo=null,this.updateDelay=1e3,this.view=null,this.print=this.print.bind(this)}destroy(){this._handles.destroy(),this._handles=null,this.view=null}get printTask(){return new h(this.effectivePrintServiceUrl,{updateDelay:this.updateDelay})}get state(){return"loading"===this.loadStatus?"initializing":this.error||"failed"===this.loadStatus?"error":this.get("view.ready")&&"loaded"===this.loadStatus?"ready":"disabled"}async load(t){return this.addResolvingPromise(this._loadResources(t).catch((t=>this.error=t))),this}print(t){let e;if(!this.view)return Promise.reject(new i("print:view-required","view is not set"));this.scaleEnabled?(this._viewpoint||(this._viewpoint=this.view.viewpoint.clone()),e=this._getExtent(this._viewpoint,t.outScale)):(this._viewpoint=null,e=this._getExtent(this.view.viewpoint)),g(t);const r=new y({view:this.view,template:t,extent:e});return this.printTask.execute(r).catch((t=>{const e="print-task:cim-symbol-unsupported"===t.name?t.message:"An error occurred while exporting the web map.";return Promise.reject(new i("print:export-error",e,{error:t}))}))}async _loadResources(t){let e=[];const{printServiceUrl:r}=this;if(!r){var o;if(this.destroyed)return;const{portal:r}=this;try{await r.load(t)}catch(l){throw new i("print:could-not-load-portal","Cannot load print resource information from portal",{url:this.effectivePrintServiceUrl})}const a=null==(o=r.helperServices)?void 0:o.printTask;var s;if(a)this._set("effectivePrintServiceUrl",a.url),e=(null!=(s=null==a?void 0:a.templates)?s:[]).map((t=>w.fromJSON(t)))}e.length>0&&this.defaultTemplates.addMany(e),await this._loadServiceDescription(t)}async _loadServiceDescription(t){const e=await this._getPrintTemplatesFromService(t);this._set("templatesInfo",e)}_getPrintTemplatesFromService(t){if(-1===this.effectivePrintServiceUrl.toLowerCase().split("/").indexOf("gpserver"))throw new i("print:invalid-print-service-url","Can't fetch print templates information from provided URL",{url:this.effectivePrintServiceUrl});return n(this.effectivePrintServiceUrl,{...t,query:{f:"json"},timeout:j}).then((t=>{const e=t&&t.data,r=e&&e.parameters;let i=null,o=null;r.forEach((t=>{let e,r=t.choiceList&&t.choiceList.slice();r&&r.length&&t.defaultValue&&(e=r.indexOf(t.defaultValue)),e>-1&&(r.splice(e,1),r.unshift(t.defaultValue));const s=(t,e)=>{const r="all"===e?t:t.filter((t=>e.indexOf(t)>-1));return 0===r.length?t:r};if("Format"===t.name){const e=s(r.map(m),this.allowedFormats),o=m(t.defaultValue);i={defaultValue:e.includes(o)?o:e[0],choiceList:e}}else if("Layout_Template"===t.name){let e,i;r=r.filter((t=>"map_only"!==t.toLowerCase())),r.some(((t,r)=>{const i=t.toLowerCase();return i.indexOf("letter")>-1&&i.indexOf("landscape")>-1?(e=r,!0):i.indexOf("a4")>-1&&i.indexOf("landscape")>-1&&(e=r,!1)})),e&&(i=r[e],r.splice(e,1),r.unshift(i));const l=s(r.map(f),this.allowedLayouts),a=f(t.defaultValue);o={defaultValue:l.includes(a)?a:l[0],choiceList:l}}})),this.error=null;return{format:i,layout:o}})).catch((t=>{throw new i("print:unavailable-service-info","Can't fetch templates info from service",{error:t})}))}_getExtent(t,e){const r=e||this.view.scale,i=this.get("view.size"),s=t?t.targetGeometry:null;return v(new o,new d({scale:r,targetGeometry:s}),i)}};t([e()],x.prototype,"allowedFormats",void 0),t([e()],x.prototype,"allowedLayouts",void 0),t([e({type:S})],x.prototype,"defaultTemplates",void 0),t([e()],x.prototype,"includeDefaultTemplates",void 0),t([e({aliasOf:{source:"printServiceUrl",overridable:!0},readOnly:!0})],x.prototype,"effectivePrintServiceUrl",void 0),t([e()],x.prototype,"error",void 0),t([e({type:c})],x.prototype,"portal",void 0),t([e()],x.prototype,"printServiceUrl",void 0),t([e({type:h})],x.prototype,"printTask",null),t([e({readOnly:!0})],x.prototype,"state",null),t([e()],x.prototype,"scaleEnabled",void 0),t([e({readOnly:!0})],x.prototype,"templatesInfo",void 0),t([e()],x.prototype,"updateDelay",void 0),t([e()],x.prototype,"view",void 0),x=t([r("esri.widgets.Print.PrintViewModel")],x);var _=x;export default _;
