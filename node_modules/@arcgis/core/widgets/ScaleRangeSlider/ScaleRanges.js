/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import"../../core/has.js";import"../../core/Logger.js";import"../../core/accessorSupport/ensureType.js";import{property as t}from"../../core/accessorSupport/decorators/property.js";import{subclass as n}from"../../core/accessorSupport/decorators/subclass.js";import"../../core/urlUtils.js";import"../../core/uuid.js";import"../../portal/support/resourceExtension.js";import a from"../../core/Accessor.js";var i;const r=147914382,c=[{id:"room",minScale:100},{id:"rooms",minScale:400},{id:"smallBuilding",minScale:800},{id:"building",minScale:1999},{id:"buildings",minScale:3999},{id:"street",minScale:7499},{id:"streets",minScale:14999},{id:"neighborhood",minScale:29999},{id:"town",minScale:59999},{id:"city",minScale:119999},{id:"cities",minScale:249999},{id:"metropolitanArea",minScale:499999},{id:"county",minScale:999999},{id:"counties",minScale:1999999},{id:"stateProvince",minScale:3999999},{id:"statesProvinces",minScale:6999999},{id:"countriesSmall",minScale:14999999},{id:"countriesBig",minScale:34999999},{id:"continent",minScale:99999999},{id:"world",minScale:r}];function l(e,t){const n=c,a=n.length,i=[];let r,l=e;e=e>=0?e:0,t=t>0?t:n[a-1].minScale;for(let c=0;c<a;c++){const a=Math.min(n[c].minScale,t);r=Math.min(a,t),e<=a&&l<t&&i.push({id:n[c].id,maxScale:Math.max(l,e),minScale:r}),l=r+1}return i.reverse(),s(i)}function s(e){if(0===e.length)return e;const[t]=e,n=e[e.length-1];return t.minScale===t.maxScale&&(e.shift(),t.minScale+=1),n.minScale===n.maxScale&&(e.pop(),n.maxScale-=1),e}let o=i=class extends a{constructor(){super(...arguments),this.ranges=[]}static fromScaleRange({maxScale:e,minScale:t}){return new i({ranges:l(e,t)})}static async fromLayer(e){await e.when();const t=e.get("tileInfo.lods");let n;if(t){n=l(t[t.length-1].scale,t[0].scale)}else n=l(0,0);return new i({ranges:n})}get firstRange(){return this.ranges[0]}get lastRange(){const e=this.ranges;return e[e.length-1]}get length(){return this.ranges.length}get maxScale(){return this.lastRange.maxScale}get minScale(){return this.firstRange.minScale}isMinScaleEdge(e){const{firstRange:t}=this,n=t.minScale,a=i.RecommendedScales[t.id]||t.maxScale;return e<=n&&e>=a}isMaxScaleEdge(e){const{lastRange:t}=this,n=t.maxScale;return e<=(i.RecommendedScales[t.id]||t.minScale)&&e>=n}findScaleRange(e){const t=this.ranges;let n;if(e>=t[0].maxScale)return t[0];if(e<=t[t.length-1].minScale)return t[t.length-1];for(let a=0;a<t.length;a++){const i=t[a];if(e>=i.maxScale&&e<=i.minScale){n=i;break}}return n}findScaleRangeByIndex(e){return this.ranges[this._clampScaleRangeIndex(e)]}scaleToRangeIndex(e){return this.ranges.indexOf(this.findScaleRange(e))}clampScale(e){return Math.min(this.minScale,Math.max(this.maxScale,e))}clampMinScale(e){return 0===e?this.minScale:this.clampScale(e)}clampMaxScale(e){return this.clampScale(e)}contains(e){const t=this.ranges;let n=!1;for(let a=0;a<t.length;a++){const{maxScale:i,minScale:r}=t[a];if(e>=i&&e<=r){n=!0;break}}return n}_clampScaleRangeIndex(e){const t=0;if(e<=t)return t;const n=this.ranges.length-1;return e>n?n:Math.floor(e)}};o.RecommendedScales=Object.freeze({world:r,continent:5e7,countriesBig:25e6,countriesSmall:12e6,statesProvinces:6e6,stateProvince:3e6,counties:15e5,county:75e4,metropolitanArea:32e4,cities:16e4,city:8e4,town:4e4,neighborhood:2e4,streets:1e4,street:5e3,buildings:2500,building:1250,smallBuilding:800,rooms:400,room:100}),e([t()],o.prototype,"firstRange",null),e([t()],o.prototype,"lastRange",null),e([t()],o.prototype,"length",null),e([t()],o.prototype,"maxScale",null),e([t()],o.prototype,"minScale",null),e([t()],o.prototype,"ranges",void 0),o=i=e([n("esri.widgets.ScaleRangeSlider.ScaleRanges")],o);var m=o;export default m;
