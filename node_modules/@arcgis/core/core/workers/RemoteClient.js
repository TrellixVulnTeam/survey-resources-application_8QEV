/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
import{commitHash as e,buildDate as s}from"../../support/revision.js";import{isSome as t,removeMaybe as o}from"../maybe.js";import n from"../Error.js";import{on as r}from"../events.js";import{onAbortOrThrow as i,createAbortError as a,createAbortController as l,isPromiseLike as h,isAbortError as c}from"../promiseUtils.js";import{version as _}from"../../kernel.js";import{Task as p}from"../../views/support/Scheduler.js";import{registry as u}from"./registry.js";import{newJobId as d,MessageType as m,receiveMessage as g,toInvokeError as b,postMessage as f}from"./utils.js";const{CLOSE:v,ABORT:M,INVOKE:k,RESPONSE:y,OPEN_PORT:j,ON:I}=m;class w{constructor(e){this._timer=null,this._cancelledJobIds=new Set,this._invokeMessages=[],this._invoke=e,this._timer=null,this._process=this._process.bind(this)}push(e){e.type===m.ABORT?this._cancelledJobIds.add(e.jobId):(this._invokeMessages.push(e),null===this._timer&&(this._timer=setTimeout(this._process,0)))}clear(){this._invokeMessages.length=0,this._cancelledJobIds.clear(),this._timer=null}_process(){this._timer=null;for(const e of this._invokeMessages)this._cancelledJobIds.has(e.jobId)||this._invoke(e);this._cancelledJobIds.clear(),this._invokeMessages.length=0}}class J{constructor(e,s){this._port=e,this._outJobs=new Map,this._inJobs=new Map,this._invokeQueue=new w((e=>this._onInvokeMessage(e))),this._messageQueue=new Array,this._client=s.client,this._onMessage=this._onMessage.bind(this),this._channel=s.channel,t(s.scheduler)&&(this._frameTask=s.scheduler.registerTask(p.REMOTE_CLIENT,(e=>this._update(e)),(()=>this._messageQueue.length>0))),this._port.addEventListener("message",this._onMessage),this._port.start()}static connect(e){const s=new MessageChannel;let t;t="function"==typeof e?new e:"default"in e&&"function"==typeof e.default?new e.default:e;const o=new J(s.port1,{channel:s,client:t});return"object"==typeof t&&"remoteClient"in t&&(t.remoteClient=o),J.clients.set(o,t),s.port2}static loadWorker(e){const s=u[e];return s?s():Promise.resolve(null)}close(){this._post({type:v}),this._close()}isBusy(){return this._outJobs.size>0}invoke(e,s,t){const o=t&&t.signal,r=t&&t.transferList;if(!this._port)return Promise.reject(new n("worker:port-closed",`Cannot call invoke('${e}'), port is closed`,{methodName:e,data:s}));const l=d();return new Promise(((t,n)=>{const h=i(o,(()=>{var e;const s=this._outJobs.get(l);s&&(this._outJobs.delete(l),null==(e=s.abortHandle)||e.remove(),this._post({type:M,jobId:l}),n(a()))})),c={resolve:t,reject:n,abortHandle:h,debugInfo:e};this._outJobs.set(l,c),this._post({type:k,jobId:l,methodName:e,abortable:null!=o},s,r)}))}on(e,s){const t=new MessageChannel;function o(e){s(e.data)}return this._port.postMessage({type:m.ON,eventType:e,port:t.port2},[t.port2]),t.port1.addEventListener("message",o),t.port1.start(),{remove(){t.port1.postMessage({type:m.CLOSE}),t.port1.close(),t.port1.removeEventListener("message",o)}}}openPort(){const e=new MessageChannel;return this._post({type:j,port:e.port2}),e.port1}_close(){this._channel&&(this._channel=null),this._port.removeEventListener("message",this._onMessage),this._port.close(),this._outJobs.forEach((e=>{var s;null==(s=e.abortHandle)||s.remove(),e.reject(a(`Worker closing, aborting job calling '${e.debugInfo}'`))})),this._inJobs.clear(),this._outJobs.clear(),this._invokeQueue.clear(),this._port=this._client=null,this._frameTask=o(this._frameTask)}_onMessage(e){t(this._frameTask)?this._messageQueue.push(e):this._processMessage(e)}_processMessage(e){const s=g(e);if(s)switch(s.type){case y:this._onResponseMessage(s);break;case k:this._invokeQueue.push(s);break;case M:this._onAbortMessage(s);break;case v:this._onCloseMessage();break;case j:this._onOpenPortMessage(s);break;case I:this._onOnMessage(s)}}_onAbortMessage(e){const s=this._inJobs,t=e.jobId,o=s.get(t);this._invokeQueue.push(e),o&&(o.controller&&o.controller.abort(),s.delete(t))}_onCloseMessage(){const e=this._client;this._close(),e&&"destroy"in e&&J.clients.get(this)===e&&e.destroy(),J.clients.delete(this),e&&e.remoteClient&&(e.remoteClient=null)}_onInvokeMessage(e){const{methodName:s,jobId:t,data:o,abortable:n}=e,r=n?l():null,i=this._inJobs;let a,_=this._client,p=_[s];try{if(!p&&s&&-1!==s.indexOf(".")){const e=s.split(".");for(let s=0;s<e.length-1;s++)_=_[e[s]],p=_[e[s+1]]}if("function"!=typeof p)throw new TypeError(`${s} is not a function`);a=p.call(_,o,{client:this,signal:r?r.signal:null})}catch(u){return void this._post({type:y,jobId:t,error:b(u)})}h(a)?(i.set(t,{controller:r,promise:a}),a.then((e=>{i.has(t)&&(i.delete(t),this._post({type:y,jobId:t},e))}),(e=>{i.has(t)&&(i.delete(t),c(e)||this._post({type:y,jobId:t,error:b(e||{message:`Error encountered at method ${s}`})}))}))):this._post({type:y,jobId:t},a)}_onOpenPortMessage(e){new J(e.port,{client:this._client})}_onOnMessage(e){const{port:s}=e,t=this._client.on(e.eventType,(e=>{s.postMessage(e)})),o=r(e.port,"message",(e=>{g(e).type===m.CLOSE&&(o.remove(),t.remove(),s.close())}))}_onResponseMessage(e){var s;const{jobId:t,error:o,data:r}=e,i=this._outJobs;if(!i.has(t))return;const a=i.get(t);i.delete(t),null==(s=a.abortHandle)||s.remove(),o?a.reject(n.fromJSON(JSON.parse(o))):a.resolve(r)}_update(e){for(;!e.done&&this._messageQueue.length>0;)this._processMessage(this._messageQueue.shift()),e.madeProgress()}_post(e,s,t){return f(this._port,e,s,t)}}J.kernelInfo={revision:e,version:_,buildDate:s},J.clients=new Map;export default J;
